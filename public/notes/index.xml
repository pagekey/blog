<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on PageKey Solutions</title>
    <link>http://pagekeysolutions.com/notes/</link>
    <description>Recent content in Notes on PageKey Solutions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://pagekeysolutions.com/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://pagekeysolutions.com/notes/2018-03-25-your-first-kernel-module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pagekeysolutions.com/notes/2018-03-25-your-first-kernel-module/</guid>
      <description>Writing Your First Kernel Module
Centos or Ubuntu&amp;hellip; Whichever will compile.
Worked on Ubuntu! Standard tutorial followed in Linux docs: https://www.tldp.org/LDP/lkmpg/2.6/html/x121.html
Hello world, goodbye world in dmesg insmod, rmmod, modinfo all work
That was too easy. Now:
 Build hello world kernel module (already done)  Use _ _ init and _ _ exit macros   Create a very simple device or device file That&amp;rsquo;s it  Creating device Hmmm&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://pagekeysolutions.com/notes/2018-04-01-gems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pagekeysolutions.com/notes/2018-04-01-gems/</guid>
      <description>Creating Your First Ruby Gem
Making Gems - Easier than you think! Ruby and Gems - A Quickstart
Making a Command Line Interface as a Ruby Gem How to Give Your Ruby Gem a CLI Making Ruby Gems Accessible via Command Line Interface
 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://pagekeysolutions.com/notes/2018-04-19-electron/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pagekeysolutions.com/notes/2018-04-19-electron/</guid>
      <description>https://electronjs.org/docs/tutorial/first-app
Node.js for desktop app instead of web server
Really a minimal browser
Same setup as nodejs app:
 app/  package.json main.js index.html    npm init - create package.json
add start script. instead of node ., electron .
install electron in app as dependency. preserve version of electron.
npm install --save-dev electronAdd basic main.js:
const {app, BrowserWindow} = require(&amp;#39;electron&amp;#39;)const path = require(&amp;#39;path&amp;#39;)const url = require(&amp;#39;url&amp;#39;)function createWindow () {// Create the browser window.</description>
    </item>
    
    <item>
      <title>A Simple Modification to the Linux Source</title>
      <link>http://pagekeysolutions.com/notes/2018-03-22-simple-linux-source-modifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://pagekeysolutions.com/notes/2018-03-22-simple-linux-source-modifications/</guid>
      <description>Brainstorm and Notes:
 The Linux source is very complex and has many parts It can be hard to get a grasp on where to start Once you find the entry point, it&amp;rsquo;s not as bad. More before the actual coding:  How the kernel works Where the entry point is   Modification: Goal is to print something, do some math. In other words, write some code!  Important note about printkern and where to find messages  /var/log/messages or journalctl   Simple print and force return - I tried this and caused a kernel panic  My original intention - have it print something to the screen and stop all execution.</description>
    </item>
    
  </channel>
</rss>