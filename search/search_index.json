{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":""},{"location":"#blog","title":"Blog","text":"<p>Welcome to the PageKey blog! Check out the latest posts below.</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":""},{"location":"tags/#assembly","title":"assembly","text":"<ul> <li>OS10: Running on Real Hardware</li> <li>OS11: Calling Assembly from C</li> <li>OS12: Basic Keyboard Driver (x86 Interrupts)</li> <li>OS2: First Bootloader</li> <li>OS3: Hone the Power of the BIOS!</li> <li>OS4: Deciphering BIOS Challenges</li> <li>OS5: Going Over print_hex</li> <li>OS6: Reading the Disk</li> <li>OS7: Protected Mode - Making the Jump!</li> <li>OS8: Calling C from Assembly</li> <li>OS9: Multiboot (Bootloader Breakup)</li> <li>OS13: Docker Dev Environment</li> <li>OS14: Organizing Our OS Code</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> <li>OS18: Shredding the Makefile</li> <li>OS19: More VGA + stdlib/memory improvements</li> <li>OS15: Writing a Simple VGA Driver (Bare-Metal Graphics)</li> <li>OS20: Researching PCI (Peripheral Component Interconnect)</li> </ul>"},{"location":"tags/#c","title":"c","text":"<ul> <li>OS10: Running on Real Hardware</li> <li>OS11: Calling Assembly from C</li> <li>OS12: Basic Keyboard Driver (x86 Interrupts)</li> <li>OS8: Calling C from Assembly</li> <li>OS9: Multiboot (Bootloader Breakup)</li> <li>OS13: Docker Dev Environment</li> <li>OS14: Organizing Our OS Code</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> <li>OS18: Shredding the Makefile</li> <li>OS19: More VGA + stdlib/memory improvements</li> <li>OS15: Writing a Simple VGA Driver (Bare-Metal Graphics)</li> <li>OS20: Researching PCI (Peripheral Component Interconnect)</li> <li>OS21: More PCI + Getting Started with Storage (IDE, SATA)</li> </ul>"},{"location":"tags/#c_1","title":"c++","text":"<ul> <li>\u226490s: First OpenGL Program with GLUT (Linux)</li> <li>\u226490s: Hello World with Qt Framework (Ubuntu)</li> </ul>"},{"location":"tags/#career","title":"career","text":"<ul> <li>Career, Year One: 8 Lessons Learned</li> </ul>"},{"location":"tags/#cicd","title":"ci/cd","text":"<ul> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> </ul>"},{"location":"tags/#design","title":"design","text":"<ul> <li>Boom! A new app is born.</li> <li>Can we build our own Kindle, with a twist? | KR1</li> <li>MEASURE - The Secret to Language Learning</li> <li>boom devlog 11</li> <li>DAW1: Let's change music FOREVER</li> <li>DAW2: Config Magic with Python Dataclasses</li> </ul>"},{"location":"tags/#docker","title":"docker","text":"<ul> <li>\u226490s: Install Docker on Windows 10 Pro</li> <li>Docker 101: Basics and Containerizing a Web App</li> <li>OS13: Docker Dev Environment</li> </ul>"},{"location":"tags/#flutter","title":"flutter","text":"<ul> <li>Boom! A new app is born.</li> <li>Coding a Workout App from Scratch - #1 Initial Setup</li> </ul>"},{"location":"tags/#hardware","title":"hardware","text":"<ul> <li>How and Why to Use a Logic Analyzer</li> <li>How to NUC the Cloud with your own Linux Server</li> </ul>"},{"location":"tags/#ideas","title":"ideas","text":"<ul> <li>Is creativity the key to language learning?</li> <li>Design vs. Implementation: The Eternal Divide</li> </ul>"},{"location":"tags/#javascript","title":"javascript","text":"<ul> <li>Make Your Site Stand Out with ScrollMagic</li> <li>4 Fun JavaScript Examples for Beginners</li> <li>Language Logging as the \"One Thing\" | Boom DevLog 5</li> <li>React Native Redesign | Boom Dev Log 6</li> <li>Version, Registration Info in React Native | Boom Dev Log 7</li> <li>Get your feet wet | First Time Programmer 1</li> <li>New coders: Instantly apply concepts with JavaScript (FTP2)</li> <li>Git: Your Foundation | FTP4</li> <li>Using Other People's Code - NPM and Node | FTP6</li> <li>Create a Simple API - Express.js | First Time Programmer</li> <li>Generating the Project and Adding Screens | KR2</li> <li>Eric Adds Components | KR3</li> <li>Getting Started with React (Create React App)</li> <li>WebGL Experiment 1: Draw a Square in 30 Minutes</li> <li>WebGL Live Coding 2</li> <li>WILR1: React Native Basics</li> <li>boom devlog 11</li> <li>rejected \u274c | boom devlog 8</li> <li>5 Lessons from Rewriting My App FOUR TIMES | boom devlog 9</li> <li>NextAuth Tutorial - Google &amp; Apple Social Login</li> <li>Self-Host NextJS on Kubernetes (Tutorial)</li> <li>Converting Markdown into a Blog (kinda) | markdown-sitegen 1</li> </ul>"},{"location":"tags/#julia","title":"julia","text":"<ul> <li>\u226490s: Install Julia Programming Language on Windows</li> </ul>"},{"location":"tags/#kubernetes","title":"kubernetes","text":"<ul> <li>How to: Kubernetes Storage with Longhorn</li> <li>Self-Host NextJS on Kubernetes (Tutorial)</li> </ul>"},{"location":"tags/#language","title":"language","text":"<ul> <li>Is creativity the key to language learning?</li> <li>DuoBot: Topping the DuoLingo Charts with Selenium</li> <li>Boom Languages Dev Log 1</li> <li>Boom Languages Dev Log 2</li> <li>Boom Languages Dev Log 3</li> <li>Boom Languages Dev Log 4</li> <li>Boom! A new app is born.</li> <li>Language Logging as the \"One Thing\" | Boom DevLog 5</li> <li>React Native Redesign | Boom Dev Log 6</li> <li>Version, Registration Info in React Native | Boom Dev Log 7</li> <li>I spent dozens of hours to save 5 minutes on DuoLingo</li> <li>MEASURE - The Secret to Language Learning</li> <li>rejected \u274c | boom devlog 8</li> <li>5 Lessons from Rewriting My App FOUR TIMES | boom devlog 9</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>Take Your Linux Workspace Anywhere: Backup for\u00a0Nerds</li> <li>How to Compile the Linux Kernel from Source</li> <li>Making Simple Modifications to the Linux Source</li> <li>Writing Your First Kernel Module</li> <li>10 Minute Linux Crash Course - Everything You Need to Get Started Now</li> <li>\u226490s: Install Python (Ubuntu)</li> <li>\u226490s: Hello World with Qt Framework (Ubuntu)</li> <li>\u226490s: Install Selenium for Python on Ubuntu</li> </ul>"},{"location":"tags/#live-coding","title":"live-coding","text":"<ul> <li>WebGL Experiment 1: Draw a Square in 30 Minutes</li> <li>WebGL Live Coding 2</li> </ul>"},{"location":"tags/#machine-learning","title":"machine-learning","text":"<ul> <li>How to Get Up and Running with Scikit-Learn</li> <li>Snap the Line! Understanding Linear Regression and Scikit-Learn</li> <li>The Nuanced Truth: Exploring Differences Between ML and AI</li> </ul>"},{"location":"tags/#mongodb","title":"mongodb","text":"<ul> <li>boom devlog 11</li> </ul>"},{"location":"tags/#postgres","title":"postgres","text":"<ul> <li>boom devlog 11</li> </ul>"},{"location":"tags/#powershell","title":"powershell","text":"<ul> <li>Convert OneNote to Markdown (and Obsidian.md)</li> </ul>"},{"location":"tags/#productivity","title":"productivity","text":"<ul> <li>5 Steps to Writing Your Next Technical Article</li> <li>Take Your Linux Workspace Anywhere: Backup for\u00a0Nerds</li> <li>How to Create a Kanban Board in OneNote</li> <li>Python Update - Convert OneNote to Markdown</li> <li>Convert OneNote to Markdown (and Obsidian.md)</li> <li>FINALLY! The Blog SSG I've Been Looking For</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>How to Implement a Hash Table in Python</li> <li>How to Implement a Linked List in Python</li> <li>How to Implement a Queue in Python</li> <li>How to Implement a Stack in Python</li> <li>Bubble Sort in Python</li> <li>Insertion Sort in Python</li> <li>Merge Sort in Python</li> <li>Quicksort in Python</li> <li>How to Implement a Binary Search Tree in Python</li> <li>Django: How to Install and Run Your First Web App</li> <li>DuoBot: Topping the DuoLingo Charts with Selenium</li> <li>\u226490s: Install Python (Ubuntu)</li> <li>\u226490s: Install Python (Windows 10)</li> <li>\u226490s: Install Selenium for Python on Ubuntu</li> <li>Quick Python 1: Your First Loop &amp; Data Types</li> <li>Quick Python 2: Easy User Input</li> <li>Quick Python 3: Error Handling (Actually pretty useful!)</li> <li>Quick Python 4: Sipping from a File (Open/Print Contents)</li> <li>Quick Python 5: Writing Files</li> <li>Quick Python 6: Our First Data Pipeline</li> <li>Quick Python 7: Easy Web Request</li> <li>Quick Python 8: Virtual Environments</li> <li>I spent dozens of hours to save 5 minutes on DuoLingo</li> <li>Python Update - Convert OneNote to Markdown</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>How to Make a CLI in Python</li> <li>DAW1: Let's change music FOREVER</li> <li>DAW10: ResourceManager is DONE</li> <li>DAW11: Generating a Tauri Project</li> <li>DAW12: Tauri filepicker</li> <li>DAW13: 3 ways to create a window in Tauri</li> <li>DAW14: Deciphering State Management in Tauri</li> <li>DAW2: Config Magic with Python Dataclasses</li> <li>DAW3: Rendering Two Notes</li> <li>DAW4: Chords? Tempo? SYNTH??</li> <li>DAW5: Loading Piano from Git</li> <li>DAW6: Integrating Synth Code</li> <li>DAW7: What's wrong with timing??</li> <li>DAW8: New arch, new me</li> <li>DAW9: Advanced TDD with Pytest</li> <li>Converting Markdown into a Blog (kinda) | markdown-sitegen 1</li> <li>Footer &amp; Post Summaries | markdown sitegen 10</li> <li>Adding Pagination | markdown sitegen 11</li> <li>Logo, Footer, Styling | markdown sitegen 12</li> <li>Adding redirects | markdown sitegen 13</li> <li>Adding jinja2 templates | markdown-sitegen 2</li> <li>jumping thru hoops for CSS | markdown sitegen 3</li> <li>Adding Posts Index | markdown sitegen 4</li> <li>Parsing the date, and more | markdown sitegen 5</li> <li>Adding prev/next post buttons | markdown sitegen 6</li> <li>Adding Doodads | markdown sitegen 7</li> <li>kidney reveal / Adding images | markdown sitegen 8</li> <li>Adding colorful codeblocks | markdown sitegen 9</li> </ul>"},{"location":"tags/#research","title":"research","text":"<ul> <li>DAW2: Config Magic with Python Dataclasses</li> </ul>"},{"location":"tags/#ruby","title":"ruby","text":"<ul> <li>Making a Command-line Ruby Gem - Write, Build, and Push</li> </ul>"},{"location":"tags/#rust","title":"rust","text":"<ul> <li>WILR2: Rust Beginnings (minigrep)</li> <li>It has begun. | Rust Book Speedrun 1</li> <li>Variables &amp; Mutability | Rust Book Speedrun 2</li> <li>3.2 Data Types | Rust Book Speedrun 3</li> <li>3.3 Functions | Rust Book Speedrun 4</li> <li>3.4 Comments | Rust Book Speedrun 5</li> <li>3.5 Control Flow | Rust Book Speedrun 6</li> <li>What is ownership? | Rust Book Speedrun 7</li> <li>4.2 References &amp; Borowing | Rust Book Speedrun 8</li> <li>4.3 Slices | Rust Book Speedrun 9</li> </ul>"},{"location":"tags/#testing","title":"testing","text":"<ul> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> </ul>"},{"location":"tags/#tutorial","title":"tutorial","text":"<ul> <li>How to Implement a Hash Table in Python</li> <li>How to Implement a Linked List in Python</li> <li>How to Implement a Queue in Python</li> <li>How to Implement a Stack in Python</li> <li>Bubble Sort in Python</li> <li>Insertion Sort in Python</li> <li>Merge Sort in Python</li> <li>Quicksort in Python</li> <li>5 Steps to Writing Your Next Technical Article</li> <li>How to Implement a Binary Search Tree in Python</li> <li>How to Compile the Linux Kernel from Source</li> <li>Making Simple Modifications to the Linux Source</li> <li>Writing Your First Kernel Module</li> <li>Push Out Your SSH Keys - Jump Nodes in a Jiffy!</li> <li>Making a Command-line Ruby Gem - Write, Build, and Push</li> <li>OS1: Installing VirtualBox and Debian</li> <li>Make Your Site Stand Out with ScrollMagic</li> <li>Django: How to Install and Run Your First Web App</li> <li>OS10: Running on Real Hardware</li> <li>OS11: Calling Assembly from C</li> <li>OS12: Basic Keyboard Driver (x86 Interrupts)</li> <li>OS2: First Bootloader</li> <li>OS3: Hone the Power of the BIOS!</li> <li>OS4: Deciphering BIOS Challenges</li> <li>OS5: Going Over print_hex</li> <li>OS6: Reading the Disk</li> <li>OS7: Protected Mode - Making the Jump!</li> <li>OS8: Calling C from Assembly</li> <li>OS9: Multiboot (Bootloader Breakup)</li> <li>Quick Python 1: Your First Loop &amp; Data Types</li> <li>Quick Python 2: Easy User Input</li> <li>Quick Python 3: Error Handling (Actually pretty useful!)</li> <li>Quick Python 4: Sipping from a File (Open/Print Contents)</li> <li>Quick Python 5: Writing Files</li> <li>Quick Python 6: Our First Data Pipeline</li> <li>Quick Python 7: Easy Web Request</li> <li>Quick Python 8: Virtual Environments</li> <li>21 Programming Terms for Absolute Beginners</li> <li>Docker 101: Basics and Containerizing a Web App</li> <li>Get your feet wet | First Time Programmer 1</li> <li>New coders: Instantly apply concepts with JavaScript (FTP2)</li> <li>VSCode, Emmet Coding, Serving Static Files | FTP3</li> <li>Git: Your Foundation | FTP4</li> <li>Collaborating with Git | FTP5</li> <li>Using Other People's Code - NPM and Node | FTP6</li> <li>Create a Simple API - Express.js | First Time Programmer</li> <li>OS13: Docker Dev Environment</li> <li>OS14: Organizing Our OS Code</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> <li>OS18: Shredding the Makefile</li> <li>OS19: More VGA + stdlib/memory improvements</li> <li>OS15: Writing a Simple VGA Driver (Bare-Metal Graphics)</li> <li>How to Make a CLI in Python</li> <li>OS20: Researching PCI (Peripheral Component Interconnect)</li> <li>NextAuth Tutorial - Google &amp; Apple Social Login</li> </ul>"},{"location":"tags/#ubuntu","title":"ubuntu","text":"<ul> <li>\u226490s: First OpenGL Program with GLUT (Linux)</li> </ul>"},{"location":"tags/#webgl","title":"webgl","text":"<ul> <li>WebGL Experiment 1: Draw a Square in 30 Minutes</li> <li>WebGL Live Coding 2</li> </ul>"},{"location":"tags/#windows","title":"windows","text":"<ul> <li>\u226490s: Install Docker on Windows 10 Pro</li> <li>\u226490s: Install Julia Programming Language on Windows</li> <li>\u226490s: Install Python (Windows 10)</li> </ul>"},{"location":"hash-table/","title":"How to Implement a Hash Table in Python","text":"<p>This tutorial will show you how to implement a hash table with separate chaining. It's not the most efficient method, but it is the simplest way to get started and create a fully functioning hash table.</p> <p></p>","tags":["python","tutorial"]},{"location":"hash-table/#background","title":"Background","text":"<p>Hash tables are indispensable tools for solving a wide assortment for so many interesting programming problems. I always love to incorporate a hash table into a problem; they can provide a clean solution to an issue that would be a mess otherwise.</p> <p>For the longest time, I wondered how hash tables were created. I wanted to make my own, but I had no clue as to how they worked. Luckily, I found James Routley's awesome post detailing how to implement one in C. For anyone interested, I highly recommend it.</p> <p>Using this knowledge, I ported the hash table to Python. By the end of this tutorial, you will understand the basic ideas behind the hash table. Perhaps more importantly,  you will have implemented your very own!</p>","tags":["python","tutorial"]},{"location":"hash-table/#the-basics","title":"The Basics","text":"<p>If you've ever used a dictionary in Python or an associative array in a language like PHP, You've probably used a hash table before. Features such as the dictionary in Python or the associative array in PHP are often implemented using a hash table. Even more straightforward is the HashTable class available in Java.</p> <p>Why would we need such a structure? Well, sometimes a flat area just isn't enough. To make sense of the problem at hand, you may need to store and access your data by a key, a definite step up from the rudimentary integer index provided by flat arrays.</p> <p>The hash table we build will be used like this:</p> <pre><code># Create a new HashTable\nht = HashTable()\n# Create some data to be stored\nphone_numbers = [\"555-555-5555\", \"444-444-4444\"]\n# Insert our data under the key \"phoneDirectory\"\nht.insert(\"phoneDirectory\", phone_numbers)\n# Do whatever we need with the phone_numbers variable\nphone_numbers = None\n... # Later on...\n# Retrieve the data we stored in the HashTable\nphone_numbers = ht.find(\"phoneDirectory\")\n# find() retrieved our list object\n# phone_numbers is now equal to [\"555-555-5555\", \"444-444-4444\"]\n</code></pre> <p>How does this really work under the hood? As it turns out, your key (<code>phoneDirectory</code> in this example) is converted into an index. This index is used for storing and retrieving the data value from the hash table's internal array. All those messy details are hidden from the user - they just have to worry about <code>insert()</code>, <code>find()</code>, and <code>remove()</code>.</p>","tags":["python","tutorial"]},{"location":"hash-table/#fields","title":"Fields","text":"<p>Our hash table will need a few fields to keep it together. It needs a <code>size</code>, which will be the number of elements that have been inserted. It needs a <code>capacity</code>, which will determine the size of our internal array. Last, it needs <code>buckets</code> - this is the internal array, storing each inserted value in a \"bucket\" based on the provided key.</p> <pre><code>class HashTable:\n    def __init__(self):\n        self.capacity = INITIAL_CAPACITY\n        self.size = 0\n        self.buckets = [None] * self.capacity\n</code></pre> <p>Note the <code>INITIAL_CAPACITY</code> variable, arbitrarily set to 50 in my example class. This defines the size of our internal array. In a more complex hash table implementation (i.e. an open-addressed, double-hashed hash table), it's important that the capacity is prime, and that it can be changed. On the other hand, our separate chaining hash table sets the capacity once and never changes it, regardless of how many elements are stored. This is good for simplicity, but bad for scalability.</p>","tags":["python","tutorial"]},{"location":"hash-table/#hashtable-node","title":"HashTable Node","text":"<p>If you thought you were getting a break from the internal Node structure, you were wrong! Our hash table will need its own version of a Node:</p> <pre><code>class Node:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.next = None\n</code></pre> <p>Look familiar? Node has a <code>next</code> field because it's actually part of a LinkedList. Because the hash table uses separate chaining, each bucket will actually contain a LinkedList of nodes containing the objects stored at that index. This is one method of collision resolution.</p>","tags":["python","tutorial"]},{"location":"hash-table/#collisions","title":"Collisions","text":"<p>Whenever two keys have the same hash value, it is considered a collision. What should our hash table do? If it just wrote the data into the location anyway, we would be losing the object that is already stored under a different key.</p> <p>With separate chaining, we create a Linked List at each index of our <code>buckets</code> array, containing all keys for a given index. When we need to look up one of those items, we iterate the list until we find the Node matching the requested key.</p> <p>There are other, far more efficient ways of handling collisions, but separate chaining is likely the simplest method.</p>","tags":["python","tutorial"]},{"location":"hash-table/#methods","title":"Methods","text":"<p>Now we can really get started. Let's jump into our hash table's methods.</p>","tags":["python","tutorial"]},{"location":"hash-table/#hash","title":"Hash","text":"<p>Our hash method needs to take our key, which will be a string of any length, and produce an index for our internal <code>buckets</code> array.</p> <p>We will be creating a hash function to convert the string to an index. There are many properties of a good hash function, but for our purposes the most important characteristic for our function to have is uniformity. We want our hash values to be as evenly distributed among our buckets as possible, to take full advantage of each bucket and avoid collisions. The ideal case is pictured below:</p> <p></p> HashTable Buckets with Uniform Distribution (good) <p>On the other hand, an uneven distribution will defeat the purpose of the hash table altogether, yielding nothing more than a bloated LinkedList.</p> <p>Consider an extreme case: Our hash function will be <code>h(x) = 1</code>. That's right, each input produces the same constant value. So, what happens? Every time we hash a key, the output is 1, meaning that we assign that node to bucket 1. The result would look something like this:</p> <p></p> HashTable Buckets with Non-Uniform Distribution (bad) <p>Not pretty! We'll just have to make sure we avoid this bottleneck at all costs.</p> <p>Here's the code for our hash function:</p> <pre><code>def hash(self, key):\n    hashsum = 0\n    # For each character in the key\n    for idx, c in enumerate(key):\n        # Add (index + length of key) ^ (current char code)\n        hashsum += (idx + len(key)) ** ord(c)\n        # Perform modulus to keep hashsum in range [0, self.capacity - 1]\n        hashsum = hashsum % self.capacity\n    return hashsum\n</code></pre> <p>While fairly arbitrary, this function will provide an acceptable degree of uniformity for our purposes.</p>","tags":["python","tutorial"]},{"location":"hash-table/#insert","title":"Insert","text":"<p>To insert a key/value pair into our hash table, we will follow these steps:</p> <ol> <li> <p>Increment size of hash table.</p> </li> <li> <p>Compute <code>index</code> of key using hash function.</p> </li> <li> <p>If the bucket at <code>index</code> is empty, create a new node and add it there.</p> </li> <li> <p>Otherwise, a collision occurred: there is already a linked list of at least one node at this index. Iterate to the end of the list and add a new node there.</p> </li> </ol> <p>This is reflected in the following code:</p> <pre><code>def insert(self, key, value):\n    # 1. Increment size\n    self.size += 1\n    # 2. Compute index of key\n    index = self.hash(key)\n    # Go to the node corresponding to the hash\n    node = self.buckets[index]\n    # 3. If bucket is empty:\n    if node is None:\n        # Create node, add it, return\n        self.buckets[index] = Node(key, value)\n        return\n    # 4. Collision! Iterate to the end of the linked list at provided index\n    prev = node\n    while node is not None:\n        prev = node\n        node = node.next\n    # Add a new node at the end of the list with provided key/value\n    prev.next = Node(key, value)\n</code></pre>","tags":["python","tutorial"]},{"location":"hash-table/#find","title":"Find","text":"<p>After storing data in our hash table, we will surely need to retrieve it at some point. To do this, we'll perform the following steps:</p> <ol> <li> <p>Compute the <code>index</code> for the provided key using the hash function.</p> </li> <li> <p>Go to the bucket for that <code>index</code>.</p> </li> <li> <p>Iterate the nodes in that linked list until the key is found, or the end of the list is reached.</p> </li> <li> <p>Return the value of the found node, or None if not found.</p> </li> </ol> <p>This idea would be expressed in code like this:</p> <pre><code>def find(self, key):\n    # 1. Compute hash\n    index = self.hash(key)\n    # 2. Go to first node in list at bucket\n    node = self.buckets[index]\n    # 3. Traverse the linked list at this node\n    while node is not None and node.key != key:\n        node = node.next\n    # 4. Now, node is the requested key/value pair or None\n    if node is None:\n        # Not found\n        return None\n    else:\n        # Found - return the data value\n        return node.value\n</code></pre>","tags":["python","tutorial"]},{"location":"hash-table/#remove","title":"Remove","text":"<p>Removing an element from a hash table is similar to removing an element from a linked list. This method will return the data value removed, or None if the requested node was not found.</p> <ol> <li> <p>Compute hash for the key to determine <code>index</code>.</p> </li> <li> <p>Iterate linked list of nodes. Continue until end of list or until key is found.</p> </li> <li> <p>If the key is not found, return None.</p> </li> <li> <p>Otherwise, remove the node from the linked list and return the node value.</p> </li> </ol> <p>This would be reflected in code as such:</p> <pre><code>def remove(self, key):\n    # 1. Compute hash\n    index = self.hash(key)\n    node = self.buckets[index]\n    prev = None\n    # 2. Iterate to the requested node\n    while node is not None and node.key != key:\n        prev = node\n        node = node.next\n    # Now, node is either the requested node or none\n    if node is None:\n        # 3. Key not found\n        return None\n    else:\n        # 4. The key was found.\n        self.size -= 1\n        result = node.value\n        # Delete this element in linked list\n        if prev is None:\n            node = None\n        else:\n            prev.next = prev.next.next\n        # Return the deleted language\n        return result\n</code></pre> <p>For more information about removing a node from a linked list, see my LinkedList article.</p>","tags":["python","tutorial"]},{"location":"hash-table/#applications","title":"Applications","text":"<p>Hash tables can be useful in a wide variety of computer science applications. Once you learn how to use them, you won't be able to stop! It seems at every turn there is a new application for the hash table.</p> <p>Below are a few problems you can attempt to solve using your new hash table:</p> <ol> <li> <p>Write a function to determine whether a string contains repeated characters.</p> </li> <li> <p>Given a string of any length, find the most-used character in the string.</p> </li> <li> <p>Write a function to determine whether two strings are anagrams.</p> </li> </ol>","tags":["python","tutorial"]},{"location":"hash-table/#source","title":"Source","text":"<p>Thank you for reading. Check out the full source code for what we did today below!</p> <p>Full HashTable source code</p> <p>HashTable test code</p>","tags":["python","tutorial"]},{"location":"linked-list/","title":"How to Implement a Linked List in Python","text":"<p>Need a quick run down on a classic data structure? Look no further.</p> <p>Click here for the full LinkedList source code. Also, here is the test code.</p> <p>A linked list is an ordered collection of elements. The thing that makes it special is how it stores data. Behind the scenes, each number, string, object, or other value you may need to keep track of is stored in a Node. Each Node references its successor.</p> <p>The advantage to this approach is the dynamic nature of the list. Unless you run out of memory, you can't run out of space in a linked list, because the last Node in the list always has room to reference another Node. Conversely, when you run out of space in a flat array, you need to create a new, larger array and fill it with the data from the original, which can be inefficient.</p> <p>In this case, we will be talking about a singly linked list, meaning that each Node only has one reference, which belongs to the next Node. For a doubly linked list, there would be an additional reference to the previous Node.</p> <p></p>","tags":["python","tutorial"]},{"location":"linked-list/#nodes-and-ropes","title":"Nodes and Ropes","text":"<p>The concept of a Node is central to linked lists. A linked list Node contains two important fields: <code>next_node</code> and <code>data</code>. The field <code>next_node</code> refers to another Node object, the next element in the list. The <code>data</code> field refers to whatever you are actually storing in the list, which could be anything from a name or phone number to the result of a computation.</p> <p>An easy way to visualize a linked list is by picturing each Node as a box. The box has space for you to hold your <code>data</code>. It also has a hole with a rope coming out - this rope is the <code>next_node</code> reference. When you create your list and add elements, you are essentially tying each <code>Node</code>'s rope to the next one in line.</p> <p>Putting this idea into code will yield the following <code>Node</code> object:</p> <pre><code>class Node(object):\n    def __init__(self, d):\n        self.next_node = None\n        self.data = d\n</code></pre>","tags":["python","tutorial"]},{"location":"linked-list/#list-setup-heads-and-tails","title":"List Setup - Heads and Tails","text":"<p>Unlike a regular flat array, we can't access each list item by index. Instead, we must iterate from one of two points of reference: the <code>head</code> and the <code>tail</code> of the list, each of which contain a Node object. Think of these as the only two \"handles\" we have to grab the list by. From the <code>head</code>, we can work our way down the list by following <code>next_node</code> references unitl we reach the <code>tail</code>.</p> <p>Keep in mind that while the <code>head</code> and <code>tail</code> hold Node objects, they are set to <code>None</code> when the list is created. This is because the list starts out empty, so we don't have any Node objects to use for them.</p> <pre><code>class LinkedList(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.size = 0\n</code></pre>","tags":["python","tutorial"]},{"location":"linked-list/#adding-elements","title":"Adding elements","text":"<p>Adding an element to a list involves updating the <code>next_node</code> references of surrounding Nodes to integrate it into the list, \"tying\" all the ropes in their proper places. The simplest situation to consider is when a node is added to the end of a list. In this case, simply update <code>tail.next_node</code> to point to your new node. At this point, the new node is the last element in the list, so you should update <code>tail</code> to reflect this.</p> <p>Note that if the list is empty, you only need to set <code>head</code> and <code>tail</code> to your new list node. In either case, increment the list's size by one. Adding a node to the end of the list is completed in O(1) time.</p> <pre><code>    # Add d to tail of list\n    def add(self, d):\n        new_node = Node(d)\n        if self.tail:\n            self.tail.next_node = new_node\n            self.tail = new_node\n        else:\n            self.head = new_node\n            self.tail = new_node\n        self.size += 1\n</code></pre> <p>Adding a node at a specific index in the list is a more complex operation. To do this, you need to iterate the list to find the <code>current_node</code> at the index you will be inserting the new data, as well as the <code>previous</code> node. Once you have these references, tie the previous node to the new node, and the new node to the rest of the list. In code, this would mean setting <code>previous.next_node = new_node</code> and <code>new_node.next_node = current_node</code>.</p> <pre><code>    # Return True if d is in list, false otherwise\n    def find(self, d):\n        current_node = self.head\n        while current_node:\n            if current_node.data == d:\n                return True\n            current_node = current_node.next_node\n        return False\n</code></pre>","tags":["python","tutorial"]},{"location":"linked-list/#removing-elements","title":"Removing elements","text":"<p>Removing an element is fairly straightforward, though it may seem counterintuitive at first. You need two references: <code>previous</code>, the node before the one you are deleting, and <code>node</code>, the one you are deleting. Once you have checked and found the <code>data</code> you need in <code>node</code>, simply set <code>previous.next_node = node.next_node</code>. This snippet of code reassigns the previous node from pointing to the node we are deleting to the node beyond it. In this way, the <code>node</code> we are deleting is not set as the <code>next_node</code> of any other node. Since nothing references it, it is as good as gone - Garbage collection will see that it gets deleted.</p> <p>Once you have the <code>previous</code> and <code>node</code> references, the remove operation has a time complexity of O(1).</p> <pre><code>    # Remove d; return True if successful, false otherwise\n    def remove(self, d):\n        previous_node = None\n        current_node = self.head\n        while current_node:\n            if current_node.data == d:\n                if previous_node:\n                    previous_node.next_node = current_node.next_node\n                else:\n                    self.head = current_node.next_node\n                self.size -= 1\n                return True\n            previous_node = current_node\n            current_node = current_node.next_node\n        return False\n</code></pre>","tags":["python","tutorial"]},{"location":"linked-list/#finding-elements","title":"Finding elements","text":"<p>Finding an element in your linked list is not as simple as jumping to the index you would like to access. The only way we can interact with the list is through the <code>head</code> node, <code>tail</code> node, and the links between them. The find operation will make use of a scratch variable, <code>current_node</code>, to keep track of which element of the list we are currently interacting with. To begin the find operation, set <code>current_node = self.head</code>.</p> <p>Next, begin a loop. For each iteration, check if you found the data you are <code>find</code>ing. If you found it, great - return either <code>True</code>, the data, or the Node; what you return depends on how you plan to use the Linked List. If you did not find it, set <code>current_node = current_node.next_node</code>, and begin the next iteration. This assignment moves your <code>current_node</code> pointer onto the next list element, allowing you to perform your check on every item in the list.</p> <p>The find operation has a time complexity of O(n).</p> <pre><code>    # Return True if d is in list, false otherwise\n    def find(self, d):\n        current_node = self.head\n        while current_node:\n            if current_node.data == d:\n                return True\n            current_node = current_node.next_node\n        return False\n</code></pre>","tags":["python","tutorial"]},{"location":"linked-list/#testing","title":"Testing","text":"<p>Typing <code>python3</code> on the command prompt will bring up an interactive shell in which you can interact with your new Linked List. Just make sure that you import it. If your linked list is stored in <code>linked_list.py</code>, then simply type <code>from linked_list import LinkedList</code>. Create a new LinkedList object with something like <code>l = LinkedList()</code>.</p> <p>Personally, I find it tiresome to constantly run through all the methods to make sure they work and that a small change didn't break them. For this reason, I use python's <code>unittest</code> framework to run a series of tests over and over on my list until I get it right. You can use the tests I wrote as a template if you want to get started with unit testing in Python. To run the tests, open a terminal and type <code>python3 -m unittest test_linked_list.py</code>. To run any files with the name prefix <code>test_</code>, type <code>python3 -m unittest discover</code> to automatically detect them.</p>","tags":["python","tutorial"]},{"location":"linked-list/#challenges","title":"Challenges","text":"<p>Up for a challenge? Given our completed LinkedList code, I have two more methods for you to try implementing:</p> <p><code>find_at(self, index):</code></p> <ul> <li>Return the <code>data</code> found at <code>index</code>. If there is no <code>Node</code> at <code>index</code>, return <code>None</code></li> </ul> <p><code>remove_at(self, index):</code></p> <ul> <li>Remove and return the <code>data</code> found at <code>index</code>. If there is no <code>Node</code> at <code>index</code>, return <code>None</code></li> </ul> <p>When you're done, leave a comment with a link to your completed challenges and any tests that go with them!</p>","tags":["python","tutorial"]},{"location":"linked-list/#full-source","title":"Full Source","text":"<p>If you want to see all of the code for our finished LinkedList, check out the source on Github.</p>","tags":["python","tutorial"]},{"location":"queue/","title":"How to Implement a Queue in Python","text":"<p>You may hate the line at the DMV, but without it, things might turn into a rough-and-tumble free for all! In the same way that a line keeps raging motorists from getting out of hand, a Queue helps your computer keep its ducks in a row. The Queue functions very much like a line of people. It's a First-In, First-Out (FIFO) data structure, so no cutting!</p>","tags":["python","tutorial"]},{"location":"queue/#starting-out","title":"Starting Out","text":"<p>Bear with me. Our basic Queue data structure and accompanying Node will look like this:</p> <pre><code>class Node(object):\n    def __init__(self, d):\n        self.data = d\n        self.prev_node = None\n        self.next_node = None\n\nclass Queue(object):\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.size = 0\n</code></pre>","tags":["python","tutorial"]},{"location":"queue/#enqueue","title":"enqueue","text":"<p>Take a number, buddy. When you get in line, you're involved in the <code>enqueue</code> operation. You begin your journey to the front desk at the back, or <code>tail</code>, of the Queue. The <code>tail</code> attribute is just a pointer; it's like a big flag or arrow saying, \"This person (or object) is last in line!\" Talk about embarrassing...</p> <p>In our hypothetical DMV line, everyone is holding their driver's license in their pocket. This registration is your <code>data</code>, making you a <code>Node</code> in the Queue. Our Queue will be implemented as a Double-Ended Linked List, which means that every Node will point to the <code>next</code> data item in the queue. So, each person in our line will have to point at the next person in line. Perhaps rudely, they'll need to jerk a thumb over their shoulder at the <code>prev</code>ious person in line, too.</p> <p>When you're joining the line, the first thing you need to do is point at the current <code>tail</code>. Then, move the hypothetical arrow and declare yourself as the new <code>tail</code> reference.</p> <p>In code, this would look like:</p> <pre><code>    def enqueue(self, d):\n        new_node = Node(d)\n        if self.size &gt; 0:\n            self.tail.prev_node = new_node\n            new_node.next_node = self.tail\n            self.tail = new_node\n        else:\n            self.head = new_node\n            self.tail = new_node\n        self.size += 1\n</code></pre>","tags":["python","tutorial"]},{"location":"queue/#dequeue","title":"dequeue","text":"<p>You've been waiting for an hour, and finally shuffled to the front of the line. The man at the desk yells, \"Next!\" and you rush to the desk.</p> <p>Something special just happened. You've been <code>dequeue</code>'d. Congratulations.</p> <p>In order to <code>dequeue</code> something from the list, you first grab the Node from the front. Then, set <code>self.head = self.head.prev_node</code>. In other words, move the <code>head</code> pointer to the previous person in line. Now, return the <code>data</code> from Node you just removed from the Queue. It's important to store this in a temporary variable. Otherwise, you'll be returning the data of something still in the Queue. An important part of <code>dequeue</code> is that the item you return has been removed from the queue.</p> <pre><code>    def dequeue(self):\n        if self.head == None:\n            return None\n        result = self.head\n        self.head = self.head.prev_node\n        self.size -= 1\n        return result.data\n</code></pre>","tags":["python","tutorial"]},{"location":"queue/#peek","title":"peek","text":"<p>Let's say that you just made it to the front of the line. All the clerks are busy, but you know someone who works there. Your long time pal looks up from a pile of work and yells, \"What's going on?\"</p> <p>How did they know you were there? They had to <code>peek</code> at the front of the line to recognize your face.</p> <p>This operation is very simple. All you need to do is ask the first person in line to pull out their driver's license for a moment. In other words, just return <code>self.head.data</code>.</p> <pre><code>    def peek(self):\n        return self.head.data\n</code></pre>","tags":["python","tutorial"]},{"location":"queue/#full-source-and-tests","title":"Full Source and Tests","text":"<p>Feel free to check out the source of the entire Queue on Github. If it interests you, the code I used to test it is here. Thanks for reading!</p>","tags":["python","tutorial"]},{"location":"stack/","title":"How to Implement a Stack in Python","text":"<p>There's no other data structure like the Stack. In only a few minutes, you can have a fully working implementation that can be used to solve a wide variety of problems. Stacks are useful for anything from reversing a string to language processing applications - not to mention the fact that many programming languages (and probably your operating system) rely on a Stack to function.</p> <p>Click here for the full Stack source code. Also, here is the test code.</p> <p></p>","tags":["python","tutorial"]},{"location":"stack/#an-analogy","title":"An Analogy","text":"<p>The Stack data structure is well-named - it very much resembles a stack of papers, or a tower of blocks, or any pile of objects where all adding and removing occurs at the top of the pile. Just think - you can't remove a quarter in the middle of a stack of coins without knocking the whole thing over!</p> <p>For our purposes, imagine you have a long, thin cardboard box. Your box can hold many different objects, but you can only interact with the contents of your box through the top. This box is your Stack. If you (gently!) slide a green plate into the box, it will rest at the bottom, still visible and accessible from someone looking in. After this, if you add an orange plate to your box, you will only have access to the orange plate. To get to the green plate, you need to first reach in and remove the orange plate. Keep this analogy in your mind as we move forward.</p>","tags":["python","tutorial"]},{"location":"stack/#setup","title":"Setup","text":"<p>Our Stack will have three operations - <code>push</code>, <code>pop</code>, and <code>peek</code>. Before we get to the nitty gritty of their implementation, though, we need to setup the class for the <code>Stack</code>, as well as a <code>Node</code> class to hold whatever we put in our Stack. The Node that we create for our Stack will be identical to the Node we made for our LinkedList in the last post.</p> <p>Our Stack will have two fields - <code>self.top</code>, which is the item on the top of the Stack, and <code>self.size</code>. The field <code>self.top</code> is similar to <code>self.head</code> or <code>self.tail</code> in a LinkedList. What makes it special is that it is the only Node accessible to the user of the <code>Stack</code>. All other nodes are hidden until that <code>self.top</code> Node is removed.</p> <pre><code>class Node(object):\n    def __init__(self, d):\n        self.data = d\n        self.next_node = None\n\nclass Stack(object):\n    def __init__(self):\n        self.top = None\n        self.size = 0\n</code></pre>","tags":["python","tutorial"]},{"location":"stack/#push-it","title":"Push it","text":"<p>When you <code>push</code> something onto your Stack, you place it on top. This is akin to sliding a plate into your long box. The plate you add becomes the new top plate, and all the ones underneath become inaccessible.</p> <p>The first step to making this work is creating a Node object to hold the data you're holding. Then, tie this <code>new_node</code> to the Node referenced by the Stack's <code>self.top</code> variable: <code>new_node.next_node = self.top</code>. Now, set your <code>new_node</code> as the new top of the Stack.</p> <pre><code>    def push(self, d):\n        new_node = Node(d)\n        if self.top:\n            new_node.next_node = self.top\n        self.top = new_node\n        self.size += 1\n</code></pre> <p>The nodes are linked together exactly like a Singly Linked List. The only differences are the operations used to manipulate the data.</p>","tags":["python","tutorial"]},{"location":"stack/#take-a-peek","title":"Take a peek","text":"<p>What happens when you need to look at what's in your Stack? You just peek down inside, that's all! The method <code>peek</code> is used to access the top data entry in a Stack without changing the Stack itself. It's not destructive - after all, it's just a harmless peek!</p> <pre><code>    def peek(self):\n        return self.top.data\n</code></pre>","tags":["python","tutorial"]},{"location":"stack/#pop-it","title":"Pop it","text":"<p>Now, let's get serious. We need to completely remove something from our stack and look at it. We want to do something with it, and more importantly, we want whatever is below it to become the new <code>self.top</code> so that we can access it, too. When we <code>pop</code> something from the stack, we pull an object out, removing it from the stack. More specifically, the <code>pop</code> method returns <code>self.top</code> just like <code>peek</code>, but it also removes whatever Node is located at <code>self.top</code>, changing it to reference the next Node down.</p> <pre><code>    def pop(self):\n        result = self.top.data\n        self.top = self.top.next_node\n        self.size -= 1\n        return result\n</code></pre>","tags":["python","tutorial"]},{"location":"stack/#challenges","title":"Challenges","text":"<p>Let's put this knowledge to use! I have two programming challenges to try. If you get stuck, I'll give you a link to my solutions.</p> <p>Each challenge should use the stack we just built, so either put your functions in the same source file as your stack, or create a challenges source file in the same directory and write <code>from stack import Stack</code> at the top.</p>","tags":["python","tutorial"]},{"location":"stack/#first-challenge-reverse-a-string","title":"First Challenge: Reverse a string","text":"<p>Implement a method, <code>reverse(s)</code>, which uses our Stack to reverse the input string <code>s</code>. For hints about completing this challenge, check out the video at the top of the article.</p>","tags":["python","tutorial"]},{"location":"stack/#second-challenge-evaluate-a-postfix-string","title":"Second Challenge: Evaluate a postfix string","text":"<p>Implement a method, <code>eval_postfix(postfix_string)</code>, which returns a number representing the value of the input <code>postfix_string</code>. A Stack makes this much easier. Assume that the input has no spaces - each character in the string is a number or one of the following operator characters: <code>'+', '-', '*', '/'</code></p> <p>Hint: Push all operands. When you find an operator, pop twice, calculate based on the operator, and push the result.</p> <p>Another hint: When you're finished, the only thing in the stack will be the answer. Pop and return this.</p>","tags":["python","tutorial"]},{"location":"stack/#solutions","title":"Solutions","text":"<p>Don't peek! I hope you tried your best! Anyway, here are my solutions to the challenges.</p>","tags":["python","tutorial"]},{"location":"stack/#full-code-and-testing","title":"Full Code and Testing","text":"<p>That's all there is to it! Part of the beauty of a Stack is its simplicity.</p> <p>If you want to see all of the code for our finished Stack, check out the source on Github. I also wrote a few tests, which cover some of the important functionality of our Stack (though I can't guarantee 100% coverage!). Thanks for reading!</p>","tags":["python","tutorial"]},{"location":"bubble-sort/","title":"Bubble Sort in Python","text":"<p>In this video, we learn the ins and outs of Bubble Sort, a sorting algorithm that will come in handy in many situations. Well, maybe just in your programming classes.</p> <p></p> <p>We go over theory, and then visualize the entire sorting process from start to finish.</p> <p>The full implementation in Python can be found at the following link:</p> <p>https://github.com/stephengrice/youtube/tree/master/Sorts</p> <p>Thank you for watching.</p>","tags":["python","tutorial"]},{"location":"insertion-sort/","title":"Insertion Sort in Python","text":"<p>In this video, we learn the ins and outs of Insertion Sort, a sorting algorithm that will come in handy in many situations. We go over theory, and then visualize the entire sorting process from start to finish.</p> <p></p> <p>The full implementation in Python can be found at the following link:</p> <p>https://github.com/stephengrice/youtube/tree/master/Sorts</p> <p>Thank you for watching.</p>","tags":["python","tutorial"]},{"location":"merge-sort/","title":"Merge Sort in Python","text":"<p>In this video, we learn the ins and outs of Merge Sort, a sorting algorithm that will come in handy in many situations.  We go over theory, and then visualize the entire sorting process from start to finish.</p> <p></p> <p>The full implementation in Python can be found at the following link:</p> <p>https://github.com/stephengrice/youtube/tree/master/Sorts</p> <p>Thank you for watching.</p>","tags":["python","tutorial"]},{"location":"quicksort/","title":"Quicksort in Python","text":"<p>In this video, we learn the ins and outs of Quicksort, a sorting algorithm that will come in handy in many situations. We go over theory, and then visualize the entire sorting process from start to finish.</p> <p></p> <p>We cover the quicksort method in general, as well as two partition schemes: Lomuto and Hoare methods.</p> <p>Lomuto is simpler, but the Hoare method, named for Quicksort's inventor, C.A.R. Hoare, is more efficient.</p> <p>The full implementation in Python can be found at the following link:</p> <p>https://github.com/pagekeysolutions/education/tree/master/Sorts</p> <p>Thank you for watching.</p>","tags":["python","tutorial"]},{"location":"5-steps-write-technical-article/","title":"5 Steps to Writing Your Next Technical Article","text":"<p>Over the past few months, I've written a fair number of technical articles. At first, it felt unnatural to apply what I learned in English class to the cold logic of programming and computers. Despite this, I rinsed and repeated enough times to see that it's not such a bad fit after all. Below, I outline the five steps I take, in one form or another, every time I write a technically-focused article.</p>","tags":["tutorial","productivity"]},{"location":"5-steps-write-technical-article/#1-research-and-take-notes-do-the-thing","title":"1. Research and Take Notes (Do the Thing)","text":"<p>As you write your article, you'll take on the role of teacher. In doing so, you'll get to experience the highest form of learning, and will probably discover at least one thing about what you're writing that you didn't know before.</p> <p>Before you can be the teacher, you have to do the thing, whatever that thing may be. I'm reminded of an oft-cited Emerson quote:</p> <p>\"Do the thing and you will have the power.\"</p> <p>Ralph Waldo Emerson</p> <p>Regardless of what your tutorial or topic entails, be sure to experience the entire process, start to finish, at your own pace. If there's no step-by-step process involved, now is the time to look up answers to questions you may have about the concepts, or even ask new ones that you may not have thought of before. Your audience will have more questions than you could possibly think up in one sitting, but you can do your best to cover the majority!</p> <p>As you go through this process, please take notes. Every button click, every prompt, everything you type - write it all down. When you're trying to reconstruct exactly what happened for someone else's consumption, you're not going to want to dive back into the level of detail necessary at the research stage. Save yourself the trouble and document the details now.</p>","tags":["tutorial","productivity"]},{"location":"5-steps-write-technical-article/#2-create-outline-from-notes","title":"2. Create Outline from Notes","text":"<p>The value of a good design can't be understated. Now that you've researched and taken notes on the process from start to finish, look over your notes and start putting them in a logical order, if they're not already. Form a bulleted outline for your article that lists each point or step, along with the details and caveats that go with each. When you have a detailed outline with all of the hard facts you need in one place, actually doing the writing will be a cinch.</p> <p>Speaking of which...</p>","tags":["tutorial","productivity"]},{"location":"5-steps-write-technical-article/#3-write-the-article","title":"3. Write the Article","text":"<p>The time has finally come. Put on some warm socks, sit down at your desk, and get comfy - it's time to write!</p> <p>Hopefully, you have all of the information you need to get your writing done. Don't be afraid to add onto your outline or notes if you discover something missing, though. There are always new questions to be asked, regardless of what step of the process you're on.</p> <p>Some people may feel a lot of pressure during this part of the process. This is your time to make it happen! It has to be good! What should I even write? I have to erase that sentence. And that one. I can't even get started here.</p> <p>Don't be like that. If you have to, set a timer for 20 minutes, and just write. Don't worry about spelling, grammar, or anything else. Listen to the voice in your head speak about the topics in your outline, and just write it down, like you're copying down a speech. All of those important details can be ironed out in the next step.</p> <p>If you're really having trouble, another little rule you can use is to not erase anything during this stage. Remove the backspace key from your keyboard if you have to (at your own risk - I'm not liable). If you're too self critical, you may end up erasing some important ideas as you go along. Even if they're in rough form, they're still valuable.</p>","tags":["tutorial","productivity"]},{"location":"5-steps-write-technical-article/#4-revise","title":"4. Revise","text":"<p>The article is written! Hurrah!</p> <p>So you're done, right? Time to pack it in?</p> <p>Not so fast, pal. The most important job is still coming. Don't turn your brain off just yet.</p> <p>The task of revising is perhaps the most essential part of the writing process. Once you've written the basics and gotten something down on paper, good or not, you'll find plenty of updates to be made by reading through the article with a clear head and putting yourself in the shoes of your readers.</p> <p>You may want to edit immediately, but more than likely you'll need a break between writing the article and editing the article. At the very least, go get a cup of coffee or tea. At most, give it a day to percolate in your head before going back to the editor's desk. Don't wait too long, though - you want the details of what you've written and what you're trying to express to remain fresh in your mind. It just doesn't need to be so fresh that you can't see it from any other perspective.</p> <p>Several passes of editing may be a good idea, because with each readthrough, you'll find new things to add or change. Don't get too bogged down though. If you're doubting yourself or your writing, push through it and proceed to the final and most essential step: Shipping.</p>","tags":["tutorial","productivity"]},{"location":"5-steps-write-technical-article/#5-publish","title":"5. Publish","text":"<p>If you don't publish your work, you'll be letting all of your hard work in the above steps go to waste. Don't let that happen. Seth Godin refers to this concept as \"shipping\" in his book, Linchpin:</p> <p>\"The only purpose of starting is to finish, and while the projects we do are never really finished, they must ship.\"</p> <p>Seth Godin in Linchpin</p> <p>Even though your article could probably use a little more polish, a few extra words, or a little more rephrasing, this will always be the case. Be brave - hit the publish button so you can get on to the next article. Even if this one isn't your best work, you can always improve on it next time.</p>","tags":["tutorial","productivity"]},{"location":"5-steps-write-technical-article/#next-steps","title":"Next Steps","text":"<p>Try putting this into action! Pick something that you know how to do, run through the steps and this article, and see what happens!</p> <p>When you try this method out, please let me know. Maybe you'll discover a few new steps that I didn't know about. Be sure to share your findings (and your newly published work) in the comments.</p>","tags":["tutorial","productivity"]},{"location":"backup-linux-workspace/","title":"Take Your Linux Workspace Anywhere: Backup for\u00a0Nerds","text":"<p>How many times have you sat down at a new Linux computer and felt like you were starting all over again? All of those aliases, every little helper file and script\u200a-\u200agone. This new computer is a shell of its former self (pun intended). Your heart warms as you think back to the comfort and productivity that came with your Linux workstation at home. If only there were a way to take everything you know and love on the go...</p> <p>Thankfully, there is!</p> <p>If you don't feel like setting it up yourself, you can clone the pre-finished skeleton I made on Github.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#all-of-your-tools-mobile","title":"All of your Tools,\u00a0Mobile","text":"<p>I'm going to show you how to create your own <code>linux-workspace</code> that you can regenerate anywhere. Once we have this set up, all you'll need is an internet connection to take it with you.</p> <p>Essentially, we will be creating a set of common files and scripts that will enable you to clone any code repositories you may have stored online. All of it will be version-controlled with Git, meaning that you can track any changes made.</p> <p>There are two parts to this little code contraption. The first is <code>sync-home.bash</code>. This script provides a way to track changes for important files in your home area, such as\u00a0<code>.bashrc</code>,\u00a0<code>.vimrc</code>, and the like. You simply edit these files from the <code>home</code> folder within the repository and commit/push your changes. This keeps all of your files neatly tracked. Meanwhile, <code>sync-home.bash</code> will copy them into place whenever you want so that you can start using them.</p> <p>The second script packs a punch: <code>clone-repos.py</code> is what makes this all work\u00a0. As input, it uses a comma-separated list of repositories stored in <code>repos.csv</code>. From this list, it clones these repositories one-by-one into the <code>wkdir</code> directory (shorthand for working directory).</p> <p>This is a smooth solution if you frequently find yourself writing code or developing software of any kind. For me, the most time consuming part of making this happen was organizing all of my existing files into Git repositories and pushing them to websites like Bitbucket and Github.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#going-remote","title":"Going Remote","text":"<p>If you're like me, when you want to code, you code. You don't start by thinking how to organize every last file on your computer, or how to track every change you make. Your goal is to explore and learn, not to categorize and label. Occasionally, though, you'll need to find something you did months ago, and this is when the hunt begins. Like a madman, you'll search folders high and low for that outlying scoundrel, that scrap of unscrupulous scripting. As you scour the seemingly endless tree of one-off attempts at web apps and random sneezes of game ideas, you may be wondering if there's a better way.</p> <p>This is why it is so important to get into the habit of working within a Git repository (or some other kind of version control). Even if what you're doing isn't particularly structured, you can always set up a general-purpose practice repository where anything goes. The main idea is to get any kind of code that you touch into a repository so that you can upload it to Github, Bitbucket, or wherever else you may store code online.</p> <p>Once it's been pushed to one or more sites, the files are available in multiple locations, so you can rest assured that they're safe. When there's a fire, your laptop is stolen, or you finally chuck the poor thing across the room in anger, you'll be glad that all of your precious code is backed up the smart way.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#setup-for-success","title":"Setup for\u00a0Success","text":"<p>Again, I want to let you know that you can still get out of this\u200a-\u200athe repository I set up here can be forked or cloned to get started in a jiffy. However, if you're the DIY type, I respect that\u200a-\u200aread on!</p> <p>First things first\u200a-\u200aas mentioned above, you'll want to make sure all of the repositories that you want access to in your workspace are uploaded to some kind of external source code hosting service, whether it's self-hosted or one of the big names.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#handling-home-files","title":"Handling Home\u00a0Files","text":"<p>It won't be hard to get a grip on your home files. First, create a <code>home</code> directory in your <code>linux-workspace</code> repository. This is where you'll keep all of the files you need in your home area to keep life going smoothly. Next, we need a script to install those files whenever we want them. Luckily, I've already taken care of this part for you. Open a text editor, and get ready to write <code>sync-home.bash</code>:</p> <pre><code>#!/bin/bash\nWARNED=false\nfor f in `ls -A home`; do\n        if [ -e ~/$f ] &amp;&amp; ! $WARNED; then\n                echo Warning: Files will be overwritten if you continue.\n                while true; do\n                        echo -n \"Continue? (y/n): \"\n                        read user_in\n                        if [ \"$user_in\" = \"y\" ]; then\n                                WARNED=true\n                                break\n                        elif [ \"$user_in\" = \"n\" ]; then\n                                exit 0\n                        fi\n                done\n        fi\n        echo Copying home/$f into place...\n        cp home/$f ~\ndone\necho Done\n</code></pre> <p>This script doesn't do a whole lot. Basically, it loops through every file in the <code>home</code> directory of your workspace. For each of these files, it first checks if the file already exists in your real home area. If it does, it warns you that your files could be overwritten. If you understand the risks and would rather have the script run to completion without asking for permission, just comment out lines 4\u201316 above.</p> <p>After checking in that you're okay with files being overwritten, the script will copy everything in the <code>linux-workspace/home</code> folder into your actual Linux home area (<code>~</code>). With this, all of those little files, like\u00a0<code>.bashrc</code> and\u00a0<code>.vimrc</code>, will be instantly available. This means all of your personal customizations to the shell, such as shortcuts, aliases, and other related features, will now be available to you.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#lasso-your-repos","title":"Lasso your\u00a0Repos","text":"<p>How great would it be to regenerate all of the folders you work with, anywhere, without relying on cumbersome cloud services like OneDrive or Google Drive? It's possible, and it's not that hard. We only need a few files.</p> <p>First, we will create a list of repositories. You can format this list however you want, but any structural changes must be reflected in the script we're about to write that actually performs the sync. For mine, I just created two columns in a CSV format. The first column is the local location where the code will live within your <code>linux-workspace</code>. The other is the URL to the remote source of the repository, where we will be cloning from. Here's a sample from mine:</p> <pre><code>github/stephengrice, git@github.com:stephengrice/linux-workspace\n</code></pre> <p>In the above example, the local directory <code>github/stephengrice</code> will be created, and <code>linux-workspace</code> will be cloned into it from the remote address.</p> <p>Now we just need a script to sync things up.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#sync-simply","title":"Sync Simply","text":"<p>Before we get started, go through each one of your old repositories and make sure you didn't leave anything uncommitted (type <code>git status</code>). If you have anything lingering around, I would recommend creating  a commit to ensure these changes are tracked. I usually just use \"Commit old changes\" as the commit message. I had to do this many times while pushing all of my repositories to remote. This generic message had to do, as I didn't have time to dive back into each project and figure out where I left off.</p> <p>Once you've done that, push every repository\u200a-\u200aand not just the <code>master</code> branch. Use <code>git push --all</code> to ensure that everything on your local computer is also on the remote site. When this is the case, we can regenerate all of our local repositories with our sync script. After that, we can delete the originals, since the newly cloned repositories are identical.</p> <p>With all of that said, here's our sync script:</p> <pre><code>#!/usr/bin/env python3\nimport csv, os\nWORKING_DIRECTORY_NAME = 'wkdir'\nif __name__ == \"__main__\":\n    with open('repos.csv') as file:\n        csv_data = csv.reader(file, delimiter=',')\n        for row in csv_data:\n            remote_path = row[1]\n            local_path = row[0]\n            if os.path.exists('%s/%s' % (WORKING_DIRECTORY_NAME, local_path)):\n                print('Already exists: %s' % local_path)\n            else:\n                print('Cloning repository...')\n                command = 'git clone %s wkdir/%s' % (remote_path, local_path)\n                print(command)\n                os.system(command)\n</code></pre> <p>My college programming professors would have a heart attack. No comments! What kind of monster have I become?</p> <p>Not to worry, professor\u200a-\u200athe script is actually fairly clear cut. Allow me to document it in the next few paragraphs.</p> <p>The top of the script is defining which Python interpreter to use, importing libraries, and setting constants. The real magic begins when we open <code>repos.csv</code>. You may recall that this file contains two columns\u200a-\u200afirst, where we want to store the repo locally, and second, the address of the remote repository we'll be cloning from. For each of the repositories in the file, it checks if it exists locally, and if it doesn't, it clones the remote.</p> <p>If you get tired of typing out your password every single time, it may be a good idea to copy your public key file (located in <code>~/.ssh/id_rsa.pub</code>) into your Github and/or Bitbucket profile. You may also be interested in pushing out your SSH keys if you have local Git servers.</p> <p>I decided to use Python, because it's quick, straightforward, and a lot more powerful than Bash (no offense to die-hard shell-scripters!). Feel free to make your own script in whichever language tickles your fancy.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#alias-setup","title":"Alias Setup","text":"<p>Most people do a majority of their work from their home area. It's exceedingly easy to get there\u200a-\u200atype <code>cd</code>, and you're done. With this in mind, I thought it may be inconvenient to move all the way over to your Linux workspace every time you want to do something. To get around this, I set up a short alias that allows you to jump to <code>linux-workspace</code>, and it's been working great for me.</p> <p>While you can use whatever name you want for this alias, I named it <code>wkdir</code>. To get this alias working, just edit your\u00a0<code>.bashrc</code> file in the <code>home</code> directory of the repository. Add this line:</p> <pre><code>alias wkdir='cd ~/linux-workspace/wkdir'\n</code></pre> <p>Type the following to finish settings things up:</p> <pre><code>cd ~/linux-workspace\n./sync-home.bash\nsource ~/.bashrc\n</code></pre> <p>Now, try it out! Just type <code>wkdir</code>, anytime, anywhere.</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#pulling-it-all-together","title":"Pulling It All\u00a0Together","text":"<p>With all of this in place, we can adopt the following workflow:</p>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>If you have not already, organize all of your code into Git repositories. Push each of them to some kind of remote site (like Github or Bitbucket).</p> </li> <li> <p>Set up <code>repos.csv</code>. This defines where you want each repository to be stored on your local machine. This should only be necessary one time, unless you add new repositories.</p> </li> </ol>","tags":["linux","productivity"]},{"location":"backup-linux-workspace/#use","title":"Use","text":"<ol> <li> <p>For each computer you want to use this on in the future, use <code>clone-repos.py</code> to clone everything defined in <code>repos.csv</code> to your local machine.</p> </li> <li> <p>Run <code>sync-home.bash</code> to add all of your home files and aliases to this computer, if you defined any. If you want immediate access to your aliases, you can run <code>source ~/.bashrc</code>. This way, you won't need to restart or reopen your terminal session.</p> </li> <li> <p>Enjoy your new work environment! Switch to your work area, choose a repository, and get coding.</p> </li> </ol> <p>With all these tips in mind, you can move away from cloud storage for code repositories and Linux files. You now have the power to forge your own path, and customize the way you do work to your heart's content. Happy computing!</p>","tags":["linux","productivity"]},{"location":"binary-search-tree/","title":"How to Implement a Binary Search Tree in Python","text":"<p>Decisions, decisions... Life is all about choices! Usually there are so many ways to go. An infinite expanse of roads and pathways stretches in front of you, an endless gradient of details; as you consider them, your head starts to spin, your eyes start to droop, your mind races, your head pounds -</p> <p>Wait a second. There's no need to stress. Since we're talking about Binary Search Trees, decisions are going to be a lot easier. A Binary Search Tree (BST) gives you two choices: left or right, less than or greater than, 0 or 1 - hence the name, binary.</p>","tags":["python","tutorial"]},{"location":"binary-search-tree/#overview","title":"Overview","text":"<p>A BST is a great choice for storing data that may need to be sorted. Anything that is stored in a BST must be comparable, which means that the data can be compared with less than <code>&lt;</code>, greater than <code>&gt;</code>, and equal to <code>==</code> operators.</p> <p>For flat arrays, searching for, inserting, and deleting data will loop through every single element, yielding an average efficiency of <code>O(n)</code>. With a Binary Search Tree, each step down the tree cuts the remaining nodes to search by up to half. For this reason, search on a BST is performed in <code>O(log(n))</code> time on average. This is a significant improvement, especially for large data sets.</p>","tags":["python","tutorial"]},{"location":"binary-search-tree/#insert","title":"Insert","text":"<p>In this case, the <code>Node</code> will have most of the important code for the <code>insert</code> method. The <code>BST</code> class will essentially be a wrapper for the <code>Node</code>, hiding some of the rough edges of the internal methods to give the user a clean interface.</p> <p>For the <code>Node</code>, our code will look like this:</p> <pre><code>class Node(object):\n  ...\n    def insert(self, d):\n        if self.data == d:\n            return False\n        elif d &lt; self.data:\n            if self.left:\n                return self.left.insert(d)\n            else:\n                self.left = Node(d)\n                return True\n        else:\n            if self.right:\n                return self.right.insert(d)\n            else:\n                self.right = Node(d)\n                return True\n  ...\n</code></pre> <p>The above code first checks if the data object already exists in the tree. If it does, it returns <code>False</code>, indicating that no node was inserted. Otherwise, it will go to the left or right depending on whether the data to insert is greater or smaller than the node's value. If there's nothing on the side that is chosen, a new node is created, and we return <code>True</code>. Otherwise, the method continues recursively, checking and moving left or right until the data is found or inserted in the tree.</p> <p>The <code>BST</code> class will wrap this neatly, beginning the recursive call on the root node like so:</p> <pre><code>class BST(object):\n  ...\n    def insert(self, d):\n    '''\n    returns True if successfully inserted, false if exists\n    '''\n        if self.root:\n            return self.root.insert(d)\n        else:\n            self.root = Node(d)\n            return True\n  ...\n</code></pre>","tags":["python","tutorial"]},{"location":"binary-search-tree/#find","title":"Find","text":"<p><code>find</code> is another recursive method, which means that it will be implemented in the <code>Node</code> class.</p> <pre><code>class Node(object):\n  ...\n  def find(self, d):\n    if self.data == d:\n      return True\n    elif d &lt; self.data and self.left:\n      return self.left.find(d)\n    elif d &gt; self.data and self.right:\n      return self.right.find(d)\n    return False\n  ...\n</code></pre> <p>In the above code snippet, we first check for the best case - did we find what we are looking for? If so, we are done and can tell everyone the good news by returning <code>True</code>.</p> <p>Otherwise, we have to check which way to go. If the data is less than the current node, we move left. Otherwise, we move right. However, to move left or right, there has to be something there. If not, we're just going to call it quits and return <code>False</code>.</p> <p>The BST wrapper will shape up like this:</p> <pre><code>class BST(object):\n  ...\n  def find(self, d):\n    '''\n    Returns True if d is found in tree, false otherwise\n    '''\n    if self.root:\n      return self.root.find(d)\n    else:\n      return False\n  ...\n</code></pre>","tags":["python","tutorial"]},{"location":"binary-search-tree/#remove","title":"Remove","text":"Example of leaf node removale Example of non-leaf node removal <p>Finally, the <code>BST</code> class is getting its chance to be more than just a wrapper! The <code>Node</code> class will have no <code>remove</code> method at all - the magic will happen entirely within the <code>BST</code> class.</p> <p>While most of these methods can be explained in a fairly straightforward way, <code>remove</code> is where I draw the line. For some reason, this code is ridiculously complicated, and it's best to just bite the bullet and break it down into a set of well-defined cases.</p> <pre><code>class BST(object):\n  ...\n  def remove(self, d):\n    '''\n    Returns True if node successfully removed, False if not removed\n    '''\n    # Case 1: Empty Tree?\n    if self.root == None:\n      return False\n\n    # Case 2: Deleting root node\n    if self.root.data == d:\n      # Case 2.1: Root node has no children\n      if self.root.left is None and self.root.right is None:\n        self.root = None\n        return True\n      # Case 2.2: Root node has left child\n      elif self.root.left and self.root.right is None:\n        self.root = self.root.left\n        return True\n      # Case 2.3: Root node has right child\n      elif self.root.left is None and self.root.right:\n        self.root = self.root.right\n        return True\n      # Case 2.4: Root node has two children\n      else:\n        moveNode = self.root.right\n        moveNodeParent = None\n        while moveNode.left:\n          moveNodeParent = moveNode\n          moveNode = moveNode.left\n        self.root.data = moveNode.data\n        if moveNode.data &lt; moveNodeParent.data:\n          moveNodeParent.left = None\n        else:\n          moveNodeParent.right = None\n        return True     \n    # Find node to remove\n    parent = None\n    node = self.root\n    while node and node.data != d:\n      parent = node\n      if d &lt; node.data:\n        node = node.left\n      elif d &gt; node.data:\n        node = node.right\n    # Case 3: Node not found\n    if node == None or node.data != d:\n      return False\n    # Case 4: Node has no children\n    elif node.left is None and node.right is None:\n      if d &lt; parent.data:\n        parent.left = None\n      else:\n        parent.right = None\n      return True\n    # Case 5: Node has left child only\n    elif node.left and node.right is None:\n      if d &lt; parent.data:\n        parent.left = node.left\n      else:\n        parent.right = node.left\n      return True\n    # Case 6: Node has right child only\n    elif node.left is None and node.right:\n      if d &lt; parent.data:\n        parent.left = node.right\n      else:\n        parent.right = node.right\n      return True\n    # Case 7: Node has left and right child\n    else:\n      moveNodeParent = node\n      moveNode = node.right\n      while moveNode.left:\n        moveNodeParent = moveNode\n        moveNode = moveNode.left\n      node.data = moveNode.data\n      if moveNode.right:\n        if moveNode.data &lt; moveNodeParent.data:\n          moveNodeParent.left = moveNode.right\n        else:\n          moveNodeParent.right = moveNode.right\n      else:\n        if moveNode.data &lt; moveNodeParent.data:\n          moveNodeParent.left = None\n        else:\n          moveNodeParent.right = None\n      return True\n  ...\n</code></pre> <p>Whew! Glad that one's done.</p>","tags":["python","tutorial"]},{"location":"binary-search-tree/#traversals","title":"Traversals","text":"<p>There are three ways to traverse a tree: pre-order traversal, in-order traversal, and post-order traversal. The traversals are mostly implemented in the <code>Node</code> class.</p> <p>We mentioned at the start of the article that BSTs can be useful for sorting data. As it turns out, the way in which you traverse the tree structure will yield different element orderings that can be applied to a variety of applications.</p> <p>The most straightforward example is sorting from least to greatest. If your BST contains all numbers, an in-order traversal of the tree will return a list of all the numbers in the tree, sorted. Another application is the conversion of expressions between infix, prefix, and postfix. If you can represent an expression as an Abstract Syntax Tree (AST) or something similar, these conversions can be performed with an in-order, pre-order, or post-order traversal of the tree.</p> <p>The code for each method of traversal will look very similar. Each time, we'll simply change where we make our recursive call.</p>","tags":["python","tutorial"]},{"location":"binary-search-tree/#pre-order-traversal","title":"Pre-Order Traversal","text":"<pre><code>class Node(object):\n    ...\n    def preorder(self, l):\n      '''\n      l: the list of data objects so far in the traversal\n      '''\n      l.append(self.data)\n      if self.left:\n          self.left.preorder(l)\n      if self.right:\n          self.right.preorder(l)\n      return l\n    ...\n</code></pre>","tags":["python","tutorial"]},{"location":"binary-search-tree/#in-order-traversal","title":"In-Order Traversal","text":"<pre><code>class Node(object):\n    ...\n    def inorder(self, l):\n      '''\n      l: the list of data objects so far in the traversal\n      '''\n      if self.left:\n          self.left.preorder(l)\n      l.append(self.data)\n      if self.right:\n          self.right.preorder(l)\n      return l\n    ...\n</code></pre>","tags":["python","tutorial"]},{"location":"binary-search-tree/#post-order-traversal","title":"Post-Order Traversal","text":"<pre><code>class Node(object):\n    ...\n    def postorder(self, l):\n      '''\n      l: the list of data objects so far in the traversal\n      '''\n      if self.left:\n          self.left.preorder(l)\n      if self.right:\n          self.right.preorder(l)\n      l.append(self.data)\n      return l\n    ...\n</code></pre> <p>For each traversal, I added a corresponding wrapper in the BST class to expose it:</p> <pre><code>class BST(object):\n  def preorder(self):\n    '''\n    Returns list of data elements resulting from preorder tree traversal\n    '''\n    if self.root:\n      return self.root.preorder([])\n    else:\n      return []\n  def postorder(self):\n    '''\n    Returns list of post-order elements\n    '''\n    if self.root:\n      return self.root.postorder([])\n    else:\n      return []\n  def inorder(self):\n    '''\n    Returns list of in-order elements\n    '''\n    if self.root:\n      return self.root.inorder([])\n    else:\n      return []\n</code></pre>","tags":["python","tutorial"]},{"location":"binary-search-tree/#full-source-and-tests","title":"Full Source and Tests","text":"<p>Thank you for reading. Check out the full source code for what we did today below!</p> <p>Full BST source code</p> <p>BST test code</p>","tags":["python","tutorial"]},{"location":"career-year-one/","title":"Career, Year One: 8 Lessons Learned","text":"<p>Ever since I started my career as a computer engineer last summer, I\u2019ve been bombarded by lessons of all types, both from my many smart coworkers and from experience. Moving from the comfy classroom that had been my second home since kindergarten to a full-fledged professional work environment, I couldn\u2019t help but feel excited, intimidated, confused, and enthused\u200a\u2014\u200asometimes all at the same time! When I started out, I had no idea what I was doing, but a few seasoned mentors guided me in figuring out the basics. My goal is to share what I found out, so that your first year at work can be as interesting and productive as mine was!</p>","tags":["career"]},{"location":"career-year-one/#1-communication-and-documentation-our-bread-and-butter","title":"1. Communication and Documentation: Our Bread and Butter","text":"<p>Take a moment to think back to English class. It\u2019s the final semester, and your hand trembles a little bit as you hand your homework in.</p> <p>\"There it goes,\" you think. \"My last paper ever!\"</p> <p>Now snap out of it. I hate to break it to you, but you\u2019re not done with writing. It\u2019s an essential part of getting your ideas across and getting things done. There\u2019s plenty more where that came from!</p> <p>Not to worry, though. Odds are you\u2019ve been communicating effectively for years. With just a small amount of daily effort directed toward sharpening those skills, you\u2019ll find yourself with a new edge in the workplace, opening doors you didn\u2019t even know were there.</p> <p>I was initially very surprised at how hard it could be to really communicate at work. My habit of taking notes from textbooks was built on the assumption that everything in those books had been verified, and that it was just a matter of absorbing the information. On the contrary, life in the office is fast paced, and nobody has time to double- and triple-check their work or to write a novel on the topic before making a change. As development takes place, modifications to products are discussed in a whirlwind of emails, IMs, and phone calls, sometimes with little else left behind to describe the final result.</p> <p>If you\u2019re looking for a way to immediately provide value as a new hire, start documenting things. There are likely many processes that have yet to be documented, and still more details of the organization that are just \"understood\" by people who\u2019ve been around for years. New hires are tasked with finding their place in the organization and coming up to speed with all of these cultural conundrums. By documenting your journey, you\u2019ll save time (and company money) for the next person who tries to do it.</p> <p>It\u2019s also helpful to realize that what you\u2019re writing may seem self-explanatory to you, but someone trying to understand your writing may have a different skill set. They will appreciate that you took the time to write it all down.</p>","tags":["career"]},{"location":"career-year-one/#2-stick-with-it-even-when-its-not-fun","title":"2. Stick With It (Even when it\u2019s not fun)","text":"<p>It didn\u2019t take me long to realize that having a full time job isn\u2019t always a party. There have been plenty of times when I felt bogged down, bored, or overwhelmed with the tasks I was working on at the time.</p> <p>If you\u2019ve been in this situation, you\u2019ve probably had wild thoughts run through your head:</p> <p>I\u2019m stuck, so I must be terrible at this!</p> <p>I\u2019ll do anything to get away from this one stupid task!</p> <p>I have to check my email. Let me go see if my lead has anything new to do.</p> <p>This is taking way too long\u200a\u2014\u200ait\u2019s never going to get done.</p> <p>I need to change careers, now!</p> <p>It\u2019s not as bad as you think. The fact is that your assignments at work will sometimes take longer than you want them to. There is a multitude of factors out of your control that can and will stop you from finishing what you\u2019re working on. You may have to wait for someone to get back in the office to approve your request, or maybe you just have to grind through a sticky technical issue that won\u2019t budge.</p> <p>Regardless of what\u2019s bugging you at the time, the point is you can\u2019t just quit. For those tough tech problems, continue working on it, even if it feels useless. If you\u2019ve really reached a blocker, don\u2019t just sit there. Take a second to evaluate your priorities (more on this later) and move forward. Give it some time to percolate in the back of your mind, and maybe ask someone else for their take on the issue.</p>","tags":["career"]},{"location":"career-year-one/#3-faster-isnt-always-better","title":"3. Faster Isn\u2019t Always Better","text":"<p>When I started out last August, I sprinted into my new position. Fresh out of college, I entered the role eager and hungry, ready to prove myself and get as much done as possible. At first, this worked well. There was plenty to learn from my initial tasking, and when I got bored, there was always someone new to talk to and learn from. There wasn\u2019t much for me to do in the beginning, as I had a lot to learn before I could truly provide value to my department. As for the tasks I did receive, I chased them without reserve, beating them into submission and over-delivering as much as I could.</p> <p>As the tasks stacked up, my enthusiasm waned. I started getting pulled away and distracted; after starting to pour myself into the intricate details of a scripting issue, I would be interrupted by someone stopping by my desk to discuss something entirely unrelated. In response, I began to rush through everything on my list, feeling obliged to complete everything that was handed to me. As one may expect, this had a poor effect on the quality of my work. Far from setting myself apart with the results I provided, I had to cut corners and gave barely enough time to each individual task. I felt like I was juggling six plates, and it wouldn\u2019t be too long before I dropped one.</p> <p>As the old adage goes, haste makes waste. If you find yourself rushing to get more things done, consider taking a deep breath, stopping everything, and re-evaluating what\u2019s on your plate, why you\u2019re working on it, and how you\u2019ll get it done. In other words, prioritize your work.</p>","tags":["career"]},{"location":"career-year-one/#4-the-one-thing-focus-and-prioritizing","title":"4. The One Thing: Focus and Prioritizing","text":"<p>The book I read this year that had the biggest effect on my work was The One Thing by Gary Keller. The ideas in this book helped me realize the key to solving many of the problems I was experiencing in the office: You can only concentrate on one thing at a time. Really. In his book, Keller explains that it\u2019s actually impossible to concentrate on more than one thing at a time, so we should stop trying.</p> <p>To borrow one of his examples, think of your mind as a computer processor. While your computer may appear to be doing many things simultaneously, the processor is actually only executing one instruction at a time, switching between any number of processes very quickly. This works great for computers; as it turns out, they are far better at switching between tasks than we are. For a human to switch, it\u2019s very inefficient. We have to stop what we\u2019re working on, get all of the context ready, both in our minds and on our desks, and find a starting point. More task switching means more time wasted, so it\u2019s best to choose the most important thing on your list and stay with it until it\u2019s done.</p> <p>Another helpful lesson intoned by Keller was that nothing is equal. For any two tasks, one of them is more important than the other to you, no matter what. Since their priority can\u2019t be exactly the same, prioritizing should give you a definite path forward when you\u2019re stuck. At any given time, one task on your list is the most important. This is the one you should work on. In doing so, the other items on the list may resolve themselves.</p> <p>When I finally came up with a system of prioritizing tasks, my productivity skyrocketed. It was simple, but effective. I made a \"Board\" in OneNote where I threw all of my tasks, big or small, from anyone or anything that may require my attention. After that, I make use of three lists\u200a\u2014\u200aTo Do, Complete This Week, and Completed. Each list will show the project, task description, and priority.</p> <p>This system allows me to see everything I have been asked to do at a glance. By throwing everything in there, I won\u2019t forget tasks. By frequently dragging-and-dropping tasks to prioritize, I ensure that whenever possible, I\u2019m working on the \"One Thing\" that is the most important to complete at the time.</p> <p>A list of twenty tasks is much less daunting with this method\u2014 instead of being stuck worrying about how you\u2019ll get everything done, you prioritize, pick your top task, and go. Simple.</p>","tags":["career"]},{"location":"career-year-one/#5-not-enough-work-find-some","title":"5. Not Enough Work? Find Some!","text":"<p>As a new engineer at my company, I often found myself running out of tasks. The original project I was assigned to had begun to wind down, and I was finishing my assigned work fairly quickly, leaving more and more space between tasks.</p> <p>When everything on your list is done, there is temptation to sit and enjoy the feeling of completion. I finished everything I was assigned, so I\u2019m done, right? It\u2019s like school\u200a\u2014\u200aclass is over early. Or is it?</p> <p>This is another stark contrast between school and work. At school, if you check all the boxes on the rubric, you\u2019re free to go. At work, though, you have to put in 40 or more hours per week; you can\u2019t just leave because you\u2019re bored and you sent your one email for the day. Since you\u2019ll have to be around anyway, you may as well get engaged in something that will benefit yourself and others!</p> <p>I would recommend two routes in your quest for finding work. The first one requires only you. If you\u2019re between tasks, don\u2019t waste those minutes\u200a\u2014\u200alook something up online that you didn\u2019t know before, and practice a skill if you can. This means checking out a few lines of that new programming language, or brushing up on pivot tables in Excel. It could also be less technical tasks, like learning a few phrases of a foreign language relevant to your field. Be sure not to get too lost in this one; while these skills are helpful and will make you a better employee, you\u2019re really at work to apply those skills, not read up on them!</p> <p>That\u2019s when you should move onto the second route: Seeking out work. This is something that can be nerve-wracking and probably out of your comfort zone. However, this is also where a lot of the fun is. Put on your detective hat and figure out where exactly there is a labor deficit in your organization. Who or what needs extra attention to be working at peak efficiency?</p> <p>If you pursue this when you have time, you\u2019ll have the added benefit of getting to know more people. People who have been around for a while will probably appreciate the help.</p>","tags":["career"]},{"location":"career-year-one/#6-take-the-initiative-take-the-risk","title":"6. Take the Initiative, Take the Risk","text":"<p>Another great read that has helped my career was Linchpin by Seth Godin. This is a book about the mindset you hold toward your work. Instead of bringing only what your job description describes with you to the office, the book suggests that everyone has art that, if they choose to give it, can move things forward by leaps and bounds.</p> <p>For example, let\u2019s say you\u2019re someone with a passion for graphic design, and you\u2019ve recently entered a job that involves compiling financial records. At the surface level, it certainly doesn\u2019t seem like those two things have a lot in common. In fact, it appears almost impossible to link the two. If you\u2019re not making the effort, it\u2019s not going to happen. But if you get creative and think of everything as an opportunity, you\u2019ll find a way.</p> <p>The time has come\u200a\u2014\u200aQuarter 3 is over, and you\u2019re just finishing up the status package to present to others in your group. With the presentation looming, you stare at slide after slide of white on black text, bar graphs, and cheesy pre-made clip art.</p> <p>Seeing an opportunity, you use your love of visual design to create custom icons and diagrams for key slides, illustrating the information in a new way and driving the point home. Your manager is so impressed that she pushes for your designs to be included on future company marketing material, both internally and for customers.</p> <p>This is your art. Your unusual spin on a normally dry topic adds a welcome streak of color, just enough to brighten the day of your audience. Even if this takes up more time than just doing the bare minimum, a little bit of extra effort spent doing something you love won\u2019t feel like a pile of work. On the contrary, you\u2019ll probably enjoy the time and produce a better end-result.</p> <p>You don\u2019t have to be an artist to bring art to work, though. It could be through interpersonal communication, creating new ideas, and so much more. (If you\u2019re still struggling to understand what your art is, read Seth\u2019s book)</p> <p>For me, this meant bringing a love of programming into a job that didn\u2019t directly require it. By finding ways to apply my passion, I was able to contribute to projects in ways that others found difficult. As a side effect, the interest I developed in low-level computing ended up teaching me many lessons that would come in useful down the road.</p>","tags":["career"]},{"location":"career-year-one/#7-fear-is-a-signpost","title":"7. Fear Is A Signpost","text":"<p>At this point, you may be asking, \"If everyone has all this art to give, why don\u2019t more people use it?\"</p> <p>The answer may come as a surprise: Fear. While living in your comfort zone is very enticing, Godin stresses that all of the magic happens outside of it. Feel a little scared to pick up the phone and call a client? Good, do it anyway. Does giving presentations make your knees shake? All the more reason to give it a try. Do you have an idea, but are afraid of being ridiculed for bringing it forward? Take a deep breath, gather yourself, and put it out there.</p> <p>It\u2019s in this way that your fear is a signpost\u200a\u2014\u200alearn to listen to it. If you\u2019re afraid of something, it may be just what you need to do in order to grow. Run towards it, not away. Whenever you can, push past the little critic in the back of your head and do something that scares you.</p>","tags":["career"]},{"location":"career-year-one/#8-keep-moving-forward","title":"8. Keep Moving Forward","text":"<p>Sometimes, I feel like I\u2019m treading water. There are days when I can do nothing more than stare a problem right in the eye, bewildered as to what the solution may be. Then, miraculously, things will fall into place and the solution will reveal itself. It may take some pondering, or coming back to the problem with a fresh mindset. Either way, the solution will come with persistence.</p> <p>An essential takeaway is that when you\u2019re struggling with an issue, you\u2019re still making progress. As Jeff Olson argues in The Slight Edge, there is no such thing as a breakthrough. When you finally solve the problem, it\u2019s no miracle; it is the sum of all your efforts finally coming to fruition. Make just a little bit of progress, every single day, even when you don\u2019t feel like it. Your daily efforts are much like the compound interest that (hopefully!) keeps your savings on the uptick. If you let it, this principle will permeate into every aspect of your life.</p> <p>On another note, you may find it valuable to carefully consider some daily disciplines that you can build. What can you chip away at every single day to move towards your goal? How can you become better at what you do before the sun sets? These are the questions that will keep you on track to getting what you want out of your career.</p>","tags":["career"]},{"location":"career-year-one/#the-tip-of-the-iceberg","title":"The Tip of the Iceberg","text":"<p>As some friends have joked, I\u2019ve got one year down, 45 to go. I\u2019ve just scratched the surface of my career, so there\u2019s a whole lot more that I need to learn. In summary, Year One has showed me:</p> <ol> <li> <p>Communication is essential. Learn it.</p> </li> <li> <p>Stick with it, even when it\u2019s not fun.</p> </li> <li> <p>Faster isn\u2019t always better.</p> </li> <li> <p>Learn to prioritize your work, and focus on the most important thing.</p> </li> <li> <p>Find work when everything else is done.</p> </li> <li> <p>Take the initiative. Go beyond the bare minimum and add your own touch.</p> </li> <li> <p>Use fear as a signpost.</p> </li> <li> <p>Keep moving forward.</p> </li> </ol> <p>Hopefully, some of these points have given you a new outlook on your work day. Keep them in mind moving forward, and if you find anything else out along the way, be sure to let me know!</p>","tags":["career"]},{"location":"is-creativity-the-key-to-language-learning/","title":"Is creativity the key to language learning?","text":"<p>The way people learn languages is an intriguing topic. We have plenty of resources available online to help us, but I\u2019m most interested in the answer to one question: how can we improve upon what we already have? The future of language learning is more than the flashcard-esque fill-in-the-blank learning systems that have become all too common. The ideal site is one that challenges the user, and asks him or her to create something new with their target language. Language learning is about finding new ways to communicate, and creation is the highest form of communication.</p> <p>I love DuoLingo\u200a\u2014\u200aI used it extensively when learning Russian and Spanish, working my way through both courses in their entirety. I learned a ton of new words and phrases, and it kept me on track even when I didn\u2019t want to study. It\u2019s beautifully simple\u200a\u2014\u200aopen your phone, at any time of day, and learn something new.</p> <p>Despite this, I found Duo\u2019s methods much less effective in my recent attempts to learn Japanese. What changed? The main difference is how much I relied on DuoLingo. Instead of going out of my way to find language partners, listen to newscasts, translate articles, and generally interact with the language on a personal level, I just put in my time and \u201cdid my Duo.\u201d I trusted in the small investments of daily effort, believing it would eventually allow me to use Japanese in my daily life. These investments didn\u2019t pay off as much as I thought they would. As a result, I broke my streak and largely gave up on studying Japanese.</p> <p>Let\u2019s face it. It\u2019s my own fault I didn\u2019t keep up with Japanese. If I had taken the time to structure my learning and really put my heart into it, I probably would have had more success. (I\u2019ll have to remember this when I try again!) In spite of this, I couldn\u2019t help but wonder how a language learning system could be more personal. What would have kept me engaged?</p> <p>A common theme in the language learning community is the importance of just getting started. The idea is that no matter where you\u2019re beginning from, you just have to close your eyes and throw yourself into the process. Duo is great for this; a few clicks in the right places and you\u2019ll be off and running in your new language.</p> <p>Another idea that the most skilled and outspoken polyglots constantly drive home is that to learn to do something, you must do the thing that you want to learn, without exceptions. If you want to speak to people in Russian, then speak to people in Russian. If you want to write German novels, then start trying to write German novels. Looking at French flashcards will not improve your ability to tell a story in French, nor will it sharpen your wits in daily French conversation. When viewed through this lens, it becomes clear that DuoLingo is teaching us a very narrow range of skills, much like the dreaded classroom-based learning we all remember so sorely from high school and college. The text pops up, you translate it either into or out of your target language, and spit it back out. That\u2019s it.</p> <p>So how do we break out of this rigid script? Instead of learning to be Google Translate, we need to train ourselves to be humans speaking a new language. We need to create. Naturally, an app can\u2019t force people be creative and love the process, but it can certainly set them up for success and give them the right targets to aim for.</p> <p>I envision a new kind of language learning framework that encourages and rewards the kind of fun that can arise from creating new things in a foreign tongue. You may feel like a child as funny-sounding words dance off your tongue or wiggle from your typing fingers, weaving into stories, songs, or whatever else you can imagine. The point is that the process would be treated as something personal, experienced differently by everyone who attempts it. These efforts would pay off not only in increased fluency, but with the rewarding feeling that comes with making something new. You may end up with something you\u2019re proud of at the end of it all\u200a\u2014\u200asomething to share with your friends, or maybe even your mom.</p> <p>While flashcards are an important feature in any site for remembering what you\u2019ve learned, the language learning website I\u2019m imagining would take it to the next level, offering three new mediums of self-expression:</p> <ol> <li> <p>Translate your own text, not someone else\u2019s. Import interesting news articles, paste discussion from online forums, or just ask the website to grab something random from the internet if you\u2019re feeling uninspired. You get to choose what to translate, and how to go about it. The site will track your changes and give you an \u201cattaboy\u201d for making progress.</p> </li> <li> <p>Write a story. Even if you only know three words in a language, you can arrange them in a way that describes your current situation and write something unique to your life. Anything from your morning commute to a fantastic space-wars story could be expressed in your target language. In doing so, you\u2019ll find yourself grasping for new words you wouldn\u2019t need to know otherwise. Hitting the online translator for something you actually need to know in order to express yourself will really make the words stick!</p> </li> <li> <p>Write a song. How better to express yourself than in song? Like writing stories, the barrier to entry is lower than expected. Just two words that rhyme are enough to make the first lines of a rap or poem. Just end each line with words that rhyme, and you can fill in the rest like a puzzle. Whether it\u2019s a song or a rap, it\u2019s easy to appreciate the beauty of a language once you start piecing it together yourself. Writing a songs, raps, or poetry will help you find new words. Moreover, your special tune will always remind you of the context in which you first learned and used those words.</p> </li> </ol> <p>While these daily disciplines would be simple, the effect could be drastic. Incorporating the creative process into an online language learning program might be exactly what is needed to elevate the language learning process to never-before-seen levels of effectiveness.</p> <p>What are your thoughts? Is this something you would consider using? Can you thing of other mediums of self expression? If so, please leave a comment\u200a\u2014\u200ait would be greatly appreciated!</p>","tags":["language","ideas"]},{"location":"design-vs-implementation/","title":"Design vs. Implementation: The Eternal Divide","text":"<p>Typically, people don't go about their day thinking about design and implementation, or at least not in these terms. Such words are usually limited to the vocabulary of engineers, programmers, developers, or project managers. In spite of this, these two concepts can apply to just about everything in your daily life. Learning to think in these terms may give you a new perspective.</p> <p>Though the terminology is unorthodox, design and implementation can easily be applied to the process of writing. Whenever I'm putting together an article, essay, story, or document, I find myself performing design and implementation as two distinct activities, whether I attempt to separate them or not. Design is figuring out which ideas I would like to convey, how I want to convey them, and what the feel should be - it's the big picture. Outlining is a design activity that really helps me bring my writing together.</p> <p>On the other side of the coin is the implementation of the writing. It's what I'm doing right now - with the ideas more or less figured out, I'm putting pen to paper, relentlessly beating the words out of the keyboard and giving life to the skeleton of thoughts that I had previously formed.</p> <p>What do these two concepts really mean? Google can help us with the definitions:</p> <p>Design (v). Decide upon the look and functioning of (a building, garment, or other object), typically by making a detailed drawing of it.</p> <p>Implementation (n). The process of putting a decision or plan into effect; execution.</p> <p>As you can see, even the definition of design acknowledges that it applies to many different contexts: buildings, garments, electronics, musical instruments, video games, articles, fantasy football leagues - everything!</p> <p>With these concepts in mind, I find it helpful to focus on design whenever possible, especially since it's often forgotten. Whether you're aware or not, it's happening behind the scenes in your head anyway. By realizing what's happening, you can take control and ensure that the end result is exactly what you envisioned!</p> <p>Keeping in mind the immense benefits that can be reaped from a relatively small amount of planning, this article will focus on design and implementation from the perspective of a writer.</p>","tags":["ideas"]},{"location":"design-vs-implementation/#benefits-of-a-design-focus","title":"Benefits of a Design Focus","text":"<p>Like I mentioned above, the control that you get over your end result when focusing on design is invaluable.</p>","tags":["ideas"]},{"location":"design-vs-implementation/#ease-of-implementation","title":"Ease of Implementation","text":"<p>Actually performing the work becomes much, much easier when you have a blueprint that details exactly what needs to happen.</p> <p>For example, I once made a habit of \"implement first, think later\" when it came to my website designs for PageKey. I knew roughly what I wanted the end result to be, but really couldn't visualize it in any kind of detail. I was familiar with the \"look and feel\" I was shooting for, but didn't have much to show beyond that.</p> <p>As I progressed, it became increasingly harder to change my mind about decisions. They became baked into the code. Want to move the navigation pane to the right side? That's 100 lines to change. Need to rework the way the footer looks next to the body? You're going to have to edit every individual color code.</p> <p>When I redesigned my site, I made sure to create a digital design beforehand. I spent ample time making sure this design was exactly what I wanted before moving onto code. This approach saved me hours at the end of the day.</p>","tags":["ideas"]},{"location":"design-vs-implementation/#preventing-errors","title":"Preventing Errors","text":"<p>It's tempting to dive right in and get something working right away. As we've seen, though, this tactic will neither save you time nor produce a better product. When you jump straight into implementation, you lock yourself into the first inkling or thought that's running through your mind at that moment. Code is a lot harder to change than a drawing, and it takes longer to get it working in the first place.</p> <p>Think of it like a building. If you decided you were going to build your dream home, you wouldn't go to the home improvement store, buy a 5 gallon bucket of mortar and a half ton of bricks, and start putting bricks down.</p> <p>When you have the idea, you're still a long way away from laying any materials down. You still need to figure out the room layouts, the architectural look, the electrical and plumbing systems, and so much more. Only when the full picture has been established in your mind (and in the minds of everyone involved in building it) can you proceed with building.</p> <p>A majority of the errors you would encounter in the pure implementation strategy described above, where no formal design efforts take place, are completely avoided by carefully thinking through the problem or plan at a high level before tackling the nitty gritty lower-level details.</p> <p>There's nothing that can replace working everything out at a high level, standing back, and observing the overall effect of what you've created. If something is a little off, but you can't quite put your finger on it, it's easy enough to tweak, time and again, until you figure out the issue.</p>","tags":["ideas"]},{"location":"design-vs-implementation/#potential-downsides","title":"Potential Downsides","text":"<p>There are downsides to any strategy. In this case, the issue could be that there is a system to begin with.</p>","tags":["ideas"]},{"location":"design-vs-implementation/#limiting-your-mindset","title":"Limiting Your Mindset","text":"<p>Despite all of the benefits of planning and outlining, the rigidity may leave little room for creativity. When I'm writing an article off-the-cuff, it could go any direction - I really don't know what exactly I'm going to cover, and I may surprise myself with what I produce.</p> <p>On the other hand, writing from an outline is like checking boxes off a list. Covered that point? Next. Wrote a sentence about that? Next. What could be a flowing piece of writing and persuasion is often initially a scrunched up ball of ideas, thrown onto the paper with little care to how each is expressed.</p> <p>The mitigation to this issue, for me personally, is to take time to reread what I've written several times with the goal of revising and amending. Almost like conversing with myself, I'll often have more ideas when reading through a second time that I can add onto the original piece. Stories, analogies, and allegory often escape my narrow minded, top down outlining approach, but are incorporated in a later stage.</p> <p>\"The Idiot\" by Dostoyevsky (free to download on Kindle - in English and Russian!) is a work that is famous for having a fluid plot. It was written periodically, and with each installment, the author claimed that he couldn't tell what was going to happen next. He simply defined a rich set of characters, and wrote about what happened when they interacted. The outcome couldn't have been centrally planned, because he wrote it off-the-cuff as he went along. If he had centrally planned this book, start to finish, the end result would have been completely different. The style is called carnivalesque, which allows a story to evolve naturally, without having to assign a specific purpose to each character.</p>","tags":["ideas"]},{"location":"design-vs-implementation/#shorter-pieces","title":"Shorter Pieces","text":"<p>When I'm writing from an outline, things tend to come out a lot shorter than they would otherwise. This can be good if I'm making points in a more concise manner rather than talking in circles to get to them. Often times, though, the brevity only communicates the bare-bones specter of what I really wanted to say. Elaboration on the bulleted ideas from my outline are what really make an effective, clearly conveyed message.</p>","tags":["ideas"]},{"location":"design-vs-implementation/#the-winner","title":"The Winner","text":"<p>So, who will it be - design or implementation? As I'm sure you've guessed, the winner is...</p> <p>Neither!</p> <p>At the end of the day, both design and implementation are extremely important to the successful execution of a project, whether that be an article, a supercomputer, or a skyscraper.</p> <p>It's easy to forget what happens behind the scenes of the text you read every day. Textbooks have teams of editors scouring the paragraphs for editors. Similarly, newspaper articles likely go through several stages of reviews, both by the author and his or her peers.</p> <p>While the focus tends to be on actually doing the work that gets something done, one cannot forget the design work that must be completed before these things can happen. Both are equally important, and should be respected as such - design without implementation creates nothing of value, as does implementation without design.</p>","tags":["ideas"]},{"location":"kanban-board-onenote/","title":"How to Create a Kanban Board in OneNote","text":"<p>Sometimes, I have trouble prioritizing my tasks. My day becomes a whirlwind of distraction; I end up talking to a lot of different people working on very different projects. This would lead to considerable stress; as soon as I'd start to work on one thing, I'd get pulled away and forget where I left off, or even what I was working on!</p> <p>I needed a system to keep my head on straight. I played with Kanban Flow at home and found it to be incredibly useful, but to my dismay, it wasn't available at work, so I had to find another option.</p> <p>I turned to OneNote, Microsoft's notetaking software. As I tweaked my little wannabe Kanban Board, I was more and more impressed at the flexibility and utility of OneNote.</p>","tags":["productivity"]},{"location":"kanban-board-onenote/#why-should-i","title":"Why Should I?","text":"<p>If you're busy right now, don't let me slow you down - you can stop reading now and go back to what you were doing before I distracted you. This does take about five minutes to set up, after all.</p> <p>On the other hand, you may find that these few short minutes of self-study were a worthy investment when you start to power through work that you were once too frazzled to concentrate on. Kanban is a powerful system, and even if it's heavily modified, this OneNote version could change the way you work for the better.</p> <p>If you're having trouble prioritizing, this method is for you. The act of prioritizing is basically built in to the system - each table row has little handles that allow you to drag tasks up, down, and between tables as you see fit.</p> <p>You'll see what I mean.</p>","tags":["productivity"]},{"location":"kanban-board-onenote/#creating-the-board","title":"Creating the Board","text":"<p>Let's get started. We will be creating four tables to hold tasks: Backlog, Waiting, Working, and Completed. The first thing we need is a table. Think of the table as a cookie cutter for all of your tasks. Each task you keep track of will be molded to the table's design; it serves as the template for everything that moves from the Backlog to Completed. Design it  in a way that makes sense for you. In my case, I like to use three columns: Project, Task, and Priority.</p> <p>Open a new page and start typing the first column name. Press tab, and it should turn into a table. Type the next one, tab over, and repeat until you have all of the columns. Then, press enter.</p> <p></p> Step 1: Create the table that will serve as a template for others. <p>Our first table has been set up. The next step is to copy it to make the other tables. Click and drag to highlight the entire table. Next, press <code>Control-C</code>, click somewhere else on the page, and hit <code>Control-V</code> to duplicate the table and place it somewhere else. Repeat until we have all four tables.</p> <p>Align your new columns horizontally and name them.</p> <p></p> Step 2: Copy the table a few times to make more than one column. <p>It looks like we're all set up. Now we can put it to good use.</p>","tags":["productivity"]},{"location":"kanban-board-onenote/#using-the-board","title":"Using the Board","text":"<p>Create your first task. Click in your Backlog board, fill out each column, and press tab to create a blank row after it. It's a good idea to leave a blank row in there, so that you always have a place to start filling out a new task.</p> <p></p> Step 3: Add your first task. <p>Now let's take a second to imagine this task getting done. We see it on our board and think it's pretty important. So, we start working it. To do this, we hover our mouse just to the left of the row to reveal a little anchor, which we can use to click and drag the row between tables.</p> <p>The task moves from Backlog to Working, where we spend some time getting it done. Then, we find ourselves waiting for another team member (we'll call him John) to complete work on it before we continue, so we move it to Waiting. Come on, John - check your email already!</p> <p>With great patience, we wait for John to finish his part and are finally able to complete our task.</p> <p></p> Step 4: Move your task across columns as you work it.","tags":["productivity"]},{"location":"kanban-board-onenote/#variations-on-this-method","title":"Variations on this Method","text":"<p>As with anything productivity related, you have to figure out what works for you. For example, an easy modification may be removing the \"Working\" board. Why? Well, you're only one person, so you can only get one thing done at a time! What's the point of a list with one item anyway? Just move it to the top of your Backlog and get to work.</p> <p>Instead of \"Waiting\" and \"Working\", you could just have a \"This Week\" list. I did this for a while, and it helped me figure out a few of the more important tasks to concentrate on when my Backlog was particularly long.</p> <p>Finally, make good use of your Completed list. Save those beautiful checked boxes up for a month, and then compile them into some notes. Store these away for your resume, or send them to your boss to remind him or her that you're getting stuff done!</p>","tags":["productivity"]},{"location":"kanban-board-onenote/#go-to-town","title":"Go To Town","text":"<p>There you have it. You're equipped with all the tools you need to organize yourself and use Kanban within the comfort of your very own OneNote.</p> <p>While this method may not be for everyone, it can be the anchor you need if your days have become too hectic. I've recently moved away from this technique, but it kept my head above water at work for a long time. I hope it can do the same for you.</p>","tags":["productivity"]},{"location":"linux-kernel-1/","title":"How to Compile the Linux Kernel from Source","text":"<p>Linux is everywhere, and there are plenty of Linux distributions available providing great out-of-the-box features. But what happens when you need to make an intricate, low-level change to system functionality? What if you wanted to get into kernel development and start to understand one of the world's largest open source projects?</p> <p>The first step to doing all of these things is compiling the Linux kernel from source. While it may seem tedious or trivial at first, this process will get you down in the weeds of the OS, allowing you to turn modules on or off, search for kernel features, and even examine (and if you're brave, tweak) the raw source code that runs everything on your Linux machine!</p> <p>This post is Part 1 of a series on the Linux kernel.</p> <p>Part 1 - Part 2 - Part 3</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#1-install-all-dependencies","title":"1. Install all dependencies.","text":"<p>Let's jump right in. The code is nothing without the toolchain that compiles it! We'll make use of our handy package managers to get everything we need.</p> <p>If you use <code>apt-get</code> (Debian / Ubuntu), use the following: </p><pre><code>sudo apt-get install git build-essential\n</code></pre> If you use <code>yum</code> (Centos, RHEL, etc.): <pre><code>sudo yum install git rpm-build redhat-rpm-config asciidoc hmaccalc perl-ExtUtils-Embed pesign xmlto\nsudo yum install audit-libs-devel binutils-devel elfutils-devel elfutils-libelf-devel\nsudo yum install ncurses-devel newt-devel numactl-devel pciutils-devel python-devel zlib-devel\n</code></pre>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#2-clone-the-source","title":"2. Clone the source.","text":"<p>The absolute latest, bleeding edge version of the source is found on the Github account of Linus Torvalds himself, the mastermind behind Linux! You can check it out here.</p> <p>To clone this, find a place to keep it (your home area is fine) and type the following:</p> <pre><code>git clone https://www.github.com/torvalds/linux.git\n</code></pre> <p>This will create a clone in a <code>linux</code> folder wherever you ran the command. Make sure you have a steady connection - this may take a while!</p> <p>If you have a spotty connection, or you're in a hurry, you can create a shallow clone, which will clone only the most recent commit, rather than the entire history:</p> <pre><code>git clone --depth 1 https://www.github.com/torvalds/linux.git\n</code></pre>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#3-optional-determine-number-of-processors","title":"3. Optional: Determine number of processors.","text":"<p>Building the kernel is a fairly labor intensive task for your computer. If you're not utilizing all of your processors, it will take much, much longer.</p> <p>If you know how many CPUs your computer has, great. If not, examine the output of <code>cat /proc/cpuinfo</code>. Though you should verify this by examining the file yourself, the following command should give you the exact number of processors you have:</p> <pre><code>cat /proc/cpuinfo | grep processor | wc -l\n</code></pre> <p>Make note of this number - it will be important in the next few steps.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#4-configure-the-kernel","title":"4. Configure the kernel.","text":"<p>Even Linux geeks like to use a GUI once in a while! The menuconfig program will turn your terminal into a mini-windowing system, allowing you to select which parts of the kernel are included in your build. To begin, run the following:</p> <pre><code>cd linux\nmake menuconfig\n</code></pre> <p>While in this program, you can use your arrow keys and enter/space bar to navigate and select modules. Another helpful trick is to press the <code>/</code> key, which will allow you to search. As an example, type <code>/HDMI</code> to get information on HDMI drivers in the kernel.</p> <p>Once you have finished, select <code>&lt; Save &gt;</code> and press <code>&lt; Ok &gt;</code> to write to a <code>.config</code> file in that directory. After this, feel free to <code>&lt; Exit &gt;</code> the menu.</p> <p>Another option is to use the <code>make config</code> command, but this isn't recommended. It will use the command line to ask you a long series of questions, requiring you to manually verify almost every setting in the kernel.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#5-create-compressed-image","title":"5. Create Compressed Image","text":"<p>It's time for the moment of truth (one of them, anyway). We're going to create bzImage, which stands for \"Big Zimage.\" Don't worry about what this means - just think of it as another step in the pipeline.</p> <p>Remember the number of processors you found in step 3? Now's the time to use it. Run the following, where <code>&lt;NUMBER OF PROCESSORS&gt;</code> is your answer from Step 3: </p><pre><code>make bzImage -j&lt; NUMBER OF PROCESSORS &gt;\n</code></pre> <p>For example, if your computer has 4 processors, you would use: </p><pre><code>make bzImage -j4\n</code></pre> <p>This <code>-j</code> option specifies the number of jobs to use when running the <code>make</code> command. By using (at least) one job for each processor, you will take better advantage of your CPU's resources and speed up the build process significantly.</p> <p>While there is some debate over the exact jobs-to-processors ratio that provides the optimal performance, using a 1:1 ratio as a rule of thumb should work well enough getting started. Since the effectiveness of this may vary depending on what the job is, feel free to mess around with other numbers, benchmark results, and find what works best.</p> <p>For the remainder of the article, we will assume 4 CPUs, hence <code>-j4</code>. Remember to change this if your system is different.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#6-link-modules","title":"6. Link Modules","text":"<p>For the next step, run the following command:</p> <pre><code>make modules -j4\n</code></pre> <p>This will link any modules marked as 'M' in <code>make menuconfig</code> to the kernel image created in the last step. Anything marked as 'Y' will already be included in that image.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#7-install-modules","title":"7. Install Modules","text":"<p>Now we will install kernel modules in <code>/lib/modules</code>. This can be accomplished with the following:</p> <p></p><pre><code>sudo make modules_install -j4\n</code></pre> Note that we had to prefix the command with <code>sudo</code>. We need to perform this step as a superuser because it involves copying files to sensitive system locations that are often locked down.","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#8-install-the-kernel","title":"8. Install the kernel","text":"<p>Finally, we will install our kernel to <code>/boot</code>. Use:</p> <pre><code>sudo make install -j4\n</code></pre> <p>Congratulations, our kernel is built and present in <code>/boot</code>! The next step is to figure out how to boot into our kernel and see it in action.</p> <p>Before we do anything, let's confirm which kernel we are using. In your home area, use the following to show the current kernel in use:</p> <pre><code>uname -r\n</code></pre> <p>You may want to write this down or redirect to a file for later comparison, but if you can remember it, more power to you!</p> <p>The kernel must now be configured in the system bootloader so that it will be used on the next restart. If you're using the ever-popular <code>grub</code>, you can use:</p> <pre><code>sudo update-grub\n</code></pre> <p>If all is well, a reboot should use the new kernel. Try it now, and confirm the new kernel is in use with <code>uname -r</code>.</p> <p>Thanks for reading through - I hope you learned something! If you're hungry for more, read the next article, in which we will make some simple modifications to kernel source code.</p> <p>In an even later article, we'll be creating a basic kernel module.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-1/#sources","title":"Sources","text":"<ul> <li>https://wiki.centos.org/HowTos/I_need_the_Kernel_Source</li> <li>ftp://ftp.wayne.edu/ldp/en/Kernel-HOWTO/ar01s10.html</li> <li>https://unix.stackexchange.com/questions/20864/what-happens-in-each-step-of-the-linux-kernel-building-process?newreg=4067157d2de24c1c99b0ab222a59366f</li> </ul> <p>This post is Part 1 of a series on the Linux kernel.</p> <p>Part 1 - Part 2 - Part 3</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/","title":"Making Simple Modifications to the Linux Source","text":"<p>The Linux kernel is one of the most complex open-source projects available to the public, and the source code that comprises it is highly intricate, to say the least. Knowing this, I wondered what it would take to pick apart such a technological beast and actually begin to understand it. The key to understanding, like anything else, is to learn by doing. The entire source repository is available to view in a browser, and more than 95% of it is written in C. How hard could it be to write a little C code?</p> <p>As it turns out, it's harder than expected. Keep reading to get the full rundown on how I edited the kernel source,  built it, broke it (several times), and finally made a simple change that produced an output in the system logs.</p> <p>This post is Part 2 of a series on the Linux kernel.</p> <p>Part 1 - Part 2 - Part 3</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#prerequisite","title":"Prerequisite","text":"<p>Before we start, you may want to check out how to build the kernel. This will allow you to make the same modifications that I do as the article progresses and to eventually make your own changes.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#modifications","title":"Modifications","text":"<p>Let's get our hands dirty. Today, our goal will be to add a snippet of code that does some math for us and prints several lines to the system log using <code>printk</code>. The snippet we will be using is as follows:</p> <pre><code>printk(KERN_DEBUG \"Hello this is Steve calling, I'm currently trapped in your kernel.\");\nprintk(KERN_DEBUG \"Hello, yep, it's me here.\");\nint math = 5;\nint i;\nint ans;\nfor (i = 0; i &lt; 5; i++) {\n    ans = math + i;\n        printk(KERN_DEBUG \"The value of math + i is %i\", ans);\n}\n</code></pre>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#kernel-printing","title":"Kernel printing","text":"<p>Note that the above code makes use of the <code>printkern</code> function. This is the function that prints to the system log, which can be viewed using the <code>dmesg</code> command. On some Linux distributions, these messages can also be found in the <code>/var/log/messages</code> file; for some others, the command <code>journalctl</code> does the trick. When in doubt, though, just opt for <code>dmesg</code>.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#entry-point","title":"Entry Point","text":"<p>A quick Google search told me that the kernel entry point is located in <code>init/main.c</code>. This fascinated me - I hoped that at least knowing where execution began would allow me to slowly unravel the kernel source code. I also (perhaps naively) thought it would be easy to make changes here, in one of the most important parts of the kernel.</p> <p>Reading through the source led me to believe that the true start of execution was in the <code>static int kernel_init(void)</code> function.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#first-attempt-panic","title":"First Attempt - Panic!","text":"<p>I want to include an analogy before we begin. Modifying a project of this magnitude without knowing anything about it is something like doing heart surgery with a shovel. With that said, let's continue.</p> <p>My first thought for how to go about this was to find the kernel entry point, insert my code at the beginning of the function, and <code>return</code>. The code looked something like this:</p> <pre><code>static int __ref kernel_init(void *unused)\n{\n    printk(KERN_DEBUG \"Hello this is Steve calling, I'm currently trapped in your kernel.\");\n    // The rest of our snippet ...\n    ...\n    return 0;\n  int ret;\n    // The rest of the function, never to be executed\n    ...\n}\n</code></pre> <p>My expectation was that when the machine booted, it would display my messages and stop all execution, leaving my text up for the world to see. The result was a little bit different... It caused a kernel panic!</p> <p></p> Panic! At The Kernel <p>At this point, I realized that the <code>kernel_init</code> function may do something important, and that cutting it off and returning before the first line may not have been the best strategy. Go figure!</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#trying-again","title":"Trying Again","text":"<p>My next attempt involved moving the print statement to the end of the function, where (hopefully) all of the important setup tasks would have already been completed.</p> <pre><code>static int __ref kernel_init(void *unused)\n{\n    // Important code...\n    ...\n    if (ramdisk_execute_command) {\n            ret = run_init_process(ramdisk_execute_command);\n            if (!ret)\n                    return 0;\n            pr_err(\"Failed to execute %s (error %d)\\n\",\n                         ramdisk_execute_command, ret);\n    }\n    printk(KERN_DEBUG \"Hello this is Steve calling, I'm currently trapped in your kernel.\");\n    // The rest of our snippet\n    ...\n}\n</code></pre> <p>This time, building the kernel succeeded (albeit with a warning due to my sloppy coding skills) and the system booted without crashing. Even so, I couldn't help but be disappointed when I checked the logs.</p> <p>While there was no crash, our message still didn't show up in the logs. Something was still wrong. My only guess was that our snippet started trying to print things before anything was ready to record them. So, I started to follow the spaghetti...</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#digging-in","title":"Digging In","text":"<p>I needed to find a place where <code>printk</code> would work.</p> <p>I started by following the method called in <code>kernel_init</code> in hopes of understanding the line of execution. This was made easier with a handy tool I stumbled across for browsing the kernel source. I started by looking up <code>run_init_process (init/main.c)</code>, then <code>do_execve (fs/exec.c)</code>, then <code>do_execveat_common (fs/exec.c)</code>...</p> <p>It didn't take long for me to realize I was in over my head. I needed a different strategy than trying to read the source like a book.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#the-fix-we-need","title":"The Fix We Need","text":"<p>I decided to check where some of the other messages in <code>dmesg</code> were being outputted. In the system log screenshot shown above, the second message is <code>Command line: BOOT_IMAGE=...</code>. So, I searched the source for that line:</p> <pre><code>grep printk * -r | grep \"Command line\"\n</code></pre> <p>This almost immediately yielded some files in the <code>arch</code> directory. At first, I just edited the first file that came up (<code>arch/alpha/kernel/setup.c</code>), but this didn't work. <code>arch</code> is short for architecture, meaning that I would have to edit the source for the architecture of my target system. In my case, this was <code>arch/x86/kernel/setup.c</code>.</p> <p>I found the relevant line in this file, and inserted our code snippet below it:</p> <pre><code>#else\n    printk(KERN_INFO \"Command line: %s\\n\", boot_command_line);\n    // Here goes nothing!!\n    printk(KERN_DEBUG \"Hello this is Steve calling, I'm currently trapped in your kernel.\");\n    printk(KERN_DEBUG \"Hello, yep, it's me here.\");\n    int math = 5;\n    int i;\n    int ans;\n    for (i = 0; i &lt; 5; i++) {\n        ans = math + i;\n            printk(KERN_DEBUG \"The value of math + i is %i\", ans);\n    }\n#endif\n</code></pre> <p>After inserting the code, I performed another quick kernel build, and...</p> <p></p> We made it! <p>Success! The kernel logs finally showed our beloved homemade debug messages. With this, we successfully added our own code to the kernel and verified that it executed.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-2/#wrapping-up","title":"Wrapping Up","text":"<p>Though it took a few botched attempts and shots in the dark, I was finally able to inject custom code into the kernel and verify that it executed. While it's a colossal monster of a project, you can scratch the surface of the Linux kernel source if you know where to look! There were a few blunders along the way, but by correcting these mistakes, I learned a lot and accomplished my original goal. I would encourage you to do the same. Continue to tinker where we left off, and see what you can learn!</p> <p>This post is Part 2 of a series on the Linux kernel.</p> <p>Part 1 - Part 2 - Part 3</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-3/","title":"Writing Your First Kernel Module","text":"<p>So we've already built the kernel from source and even modified the source code. While these were some pretty cool parlor tricks, isn't it about time we learned something useful?</p> <p>Well, I can't promise that, but today we'll take a step in the right direction by building a Linux kernel module.</p> <p>The Linux kernel is structured so that you can add extended functionality without modifying the core source. These added modules can be linked in as the source is compiled or added dynamically. The one we write today will be inserted dynamically, adding itself and running without a system reboot.</p> <p>While writing a kernel module is definitely safer than modifying the source, it can still mess up your system a lot more than a user space application, so proceed with caution.</p> <p>This post is Part 3 of a series on the Linux kernel.</p> <p>Part 1 - Part 2 - Part 3</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-3/#user-space-vs-kernel-space","title":"User Space vs. Kernel space","text":"<p>Hold on - What was that last part about a safe space? Oh, you mean user space!</p> <p>In the world of kernel developers, where wise old men tug their beards and discuss edgy topics like Round Robin scheduling and virtual memory schemes, there are but two paths that a budding programmer can follow - that of the User Space, and that of the Kernel Space. Choose wisely.</p> <p>User space applications cover most things that we think of for software development - these are your browsers, email clients, video games, web servers, and so forth. These applications are like the flashy skyscrapers in a big city; everyone knows and talks about them, but nobody seems to remember the infrastructure that supports them. Even a mighty tower must have a solid base.</p> <p>Kernel space code provides that foundation. It involves everything that makes the operating system run, hosting and providing an execution environment for all user applications. System calls, memory management, process management, scheduling, threading, device management, and much more are all handled in the kernel space. Much as the best bridges and roads are those that go unnoticed, a beautiful kernel handles everything under the hood seamlessly. You don't notice it's there... Until it breaks!</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-3/#what-can-a-kernel-module-do","title":"What can a kernel module do?","text":"<p>Not much if I'm writing it.</p> <p>Jokes aside, kernel modules can be anything from a device driver to a new type of file system. It's one of the most practical ways to provide additional functionality to the kernel for a specific use case.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-3/#setting-up-makefile","title":"Setting Up: Makefile","text":"<p>Enough talk. Let's get to work! The first thing we'll need in order to create our kernel module is a <code>Makefile</code>. If you're not familiar with <code>make</code>, it's a build tool that lets you automate redundant tasks like compilation, cleanup, and so forth. For very small projects, it may seem like nothing more than a convenience, but as your program become more complex, a good <code>Makefile</code> is essential.</p> <p>Ours will be fairly straightforward. Create a blank directory, <code>cd</code> to it, and open a new file named <code>Makefile</code> in your favorite text editor. Enter the following:</p> <pre><code>obj-m += hello-world.o\nall:\n  make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules\nclean:\n  make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean\n</code></pre> <p>The first line uses the <code>make</code> Domain Specific Language (DSL) to append <code>hello-world.o</code> to the <code>obj-m</code> variable.</p> <p>A few takeaways: * <code>obj-m</code> is a variable referenced in another <code>Makefile</code>. You'll notice that the <code>all</code> and <code>clean</code> tasks both call <code>make</code> in the <code>lib/modules/(kernel version here)/build</code> directory. That's where the <code>Makefile</code> that is uses <code>obj-m</code> is. * For all of your Bash enthusiasts out there, you'll recognize <code>$()</code>. Much like bash, this operator substitutes  the result of what executes between the parentheses into the file. It's important not to confuse this with the Bash or shell version of this, however. The code between the parentheses of <code>$()</code> in a <code>Makefile</code> must be written in the <code>make</code> DSL, not in bash/shell. * Furthermore, <code>shell</code> is a <code>make</code> builtin that allows you to execute shell commands. (bash, ksh, csh, or whatever your heart desires in the way of shells) * <code>PWD</code> is another <code>make</code> builtin that does exactly what the shell <code>pwd</code> (print working directory) does. In fact, replacing <code>$(PWD)</code> with <code>$(shell pwd)</code> would produce the exact same result. (Try it!)</p> <p>Now that we've laid the ground work, let's get to coding.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-3/#writing-the-module","title":"Writing the Module","text":"<p>Edit <code>hello-world.c</code> and add the following code:</p> <pre><code>#include &lt;linux/module.h&gt;\n#include &lt;linux/kernel.h&gt;\n\nint init_module(void)\n{\n  printk(KERN_INFO \"Hello world.\\n\");\n  return 0;\n}\nvoid cleanup_module(void)\n{\n  printk(KERN_INFO \"Goodbye world.\\n\");\n}\n</code></pre> <p>Save this file, and type <code>make</code>. If all goes well and you see no errors, several files will be created in the current directory. The important one to notice is <code>hello-world.ko</code>.</p> <p>As a side note, if you're wondering why there is never a comma between <code>KERN_INFO</code> and your message in <code>printk</code>, it's because <code>KERN_INFO</code> is a macro. In fact, this and all other <code>printk</code> macros are defined in <code>/include/linux/kern_levels.h</code> in the Linux source code.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-3/#installing-the-module","title":"Installing the Module","text":"<p>It's time to test out our hard work. While in the same directory, type:</p> <pre><code>sudo insmod hello-world.ko\n</code></pre> <p>If no errors are present, it must have worked. Verify this by typing <code>dmesg</code> to show kernel messages. In my case, it looked something like this:</p> <p></p> Who said that? <p>That worked well enough! Try out <code>modinfo hello-world.ko</code> to see some more generic information about the module you just made.</p> <p>Okay, that's enough fun for one day. Let's rip that thing back out of the kernel. Type: <code>sudo rmmod hello-world.ko</code> and check <code>dmesg</code> again:</p> <p></p> You say goodbye... And I say hello. <p>How beautiful! Our module's circle of life is complete. They sure do grow up fast.</p>","tags":["linux","tutorial"]},{"location":"linux-kernel-3/#conclusion","title":"Conclusion","text":"<p>I sure hope this was a hootin' good time for you. We wrote our first kernel module, compiled it, and did a good old hot swap into the running kernel.</p> <p>All in all, we didn't break any records, but it was a good start to writing kernel modules. The future is bright for you, young kernalist. If you dare, you can attempt to write a device driver kernel module (see links below). I'll leave that up to you for now. Until then, keep coding.</p> <p>Sources &amp; Other Useful Links:</p> <ul> <li>Kernel Modules &amp; Drivers as explained by O'Reilly</li> <li>Why you don't need a comma in <code>printk(KERN_INFO \"message\\n\")</code></li> <li>__init and __exit macros</li> <li>Advanced: Creating a file in /dev</li> <li>Advanced: Write a device driver</li> </ul> <p>This post is Part 3 of a series on the Linux kernel.</p> <p>Part 1 - Part 2 - Part 3</p>","tags":["linux","tutorial"]},{"location":"push-ssh-keys/","title":"Push Out Your SSH Keys - Jump Nodes in a Jiffy!","text":"<p>Every day, system administrators, students, professors, and everyday computer users struggle with entering their password on the command line. With each passing jump from one system to another, ten seconds tick by. Whoops, that's a mistake - make it 30!</p> <p>Over time, entering your password every time you want to move between nodes using SSH can become a real hassle. The benefits from \"pushing out\" your SSH keys, or making all of the nodes you typically jump to trust your public key, will save you more time with every use, snowballing from seconds, to minutes, to hours!</p> <p>This article describes two ways of pushing out your keys: The easy way, and the hard way.</p> <p>Photo by Oliver Sj\u00f6str\u00f6m</p>","tags":["tutorial"]},{"location":"push-ssh-keys/#prerequisite","title":"Prerequisite","text":"<p>To complete these steps, you'll need to generate a public/private keypair if you haven't already. Run this command:</p> <pre><code>ls ~/.ssh\n</code></pre> <p>If you see <code>id_rsa.pub</code> and <code>id_rsa</code> in there, then you're all set. If not, run this command:</p> <pre><code>ssh-keygen -t rsa -b 4096\n</code></pre> <p>Press enter when prompted, keeping default values for now. If you want to know more about how you can customize your keys and make them more or less secure, feel free to Google it!</p>","tags":["tutorial"]},{"location":"push-ssh-keys/#background","title":"Background","text":"<p>If you've never looked into it, SSH may seem mysterious - you enter an IP or hostname, and just like that, you've got a terminal window acting like you're on that machine! It seems crazy, but really, it's just two computer programs running. The first is the ssh client, and the other is the ssh server, or the ssh daemon. As you'll see, both can be running on the same machine at the same time.</p> <p>The server runs on the machine whose data you're trying to access. It watches the network constantly, looking for new connections, and when it finds one, starting a new terminal session. The client is the program that actually goes out and requests access.</p> <p>When you're authenticating, or logging in, there are at least two ways of getting in. The first is with a password, which I'm sure you're already accustomed to. The SSH client securely transfers the password over the network and the server checks it against the corresponding user account on that machine.</p> <p>Another way to authenticate is with a public / private keypair, which you should have generated using the steps above. A public / private keypair is like a lock and key. Your private key is a secret that only you should have access to - anyone else who has it can pretend to be you! The public key, however, can be distributed to anyone and everyone who wants to send you data or verify that you are who you say you are. Thanks to the math behind these keys, it's computationally infeasible (read: too hard, even for computers, to figure out in any reasonable amount of time) for you to reverse them.</p>","tags":["tutorial"]},{"location":"push-ssh-keys/#the-hard-way","title":"The Hard Way","text":"<p>You may be thinking, \"Hey, what's the deal? This is 2018, and I want my results now. I want the easy, Google-verified, one-liner method to accomplishing this.\"</p> <p>Well, my friend, there is a reason we're starting with the hard way: Learning! If you want to get your one-liner and move on, feel free to scroll on down to the next section. In the mean time, the rest of us will be up here, finding out a bit more about how SSH really works.</p> <p>When you've generated the public / private keypair as directed, there will be a <code>.ssh</code> directory in your home area containing some special files. Remember to use <code>ls -al</code> to see all the files, even \"hidden\" ones that begin with a dot.</p> <p>One of the files in the <code>.ssh</code> directory is the <code>authorized_keys</code> file. If it exists, this file is used by the SSH program to detect whether or not someone is allowed to connect using a specific public / private keypair.</p> <p>To get our keys \"pushed out\", the public key from each node must be in the <code>authorized_keys</code> file. Assume that you're pushing keys from a source node to a destination node with the goal of not needing password entry to jump between these machines. We'll follow these steps:</p> <ol> <li> <p>From your source node, securely copy your public key to the destination node's home directory:</p> <pre><code># From source node:\nscp ~/.ssh/id_rsa.pub DESTINATION_HOSTNAME_OR_IP:~\n</code></pre> </li> <li> <p>Login to your destination node with SSH. Sorry, you'll still need to enter a password this time.</p> <pre><code>ssh DESTINATION_HOSTNAME_OR_IP\n</code></pre> </li> <li> <p>Put the public key file we just copied over into the <code>authorized_keys</code> file on your destination. This way, we know to \"trust\" the source node. NOTE: Make sure you use the append operator <code>&gt;&gt;</code> and NOT the redirect operator <code>&gt;</code>. Otherwise, you'll overwrite any existing keys and have to push everything all over again!</p> <pre><code># From destination node:\ncat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\n# Now we can remove this public key from our home directory\nrm ~/id_rsa.pub\n</code></pre> </li> <li> <p>We've successfully told our destination node to trust the source node. Now we'll repeat steps 1 - 4 in reverse order, so that our source trusts our destination. In other words, we have to go both ways to make sure that passwords are not needed TO or FROM the nodes in question.</p> <pre><code># Still on destination node:\nscp ~/.ssh/id_rsa.pub SOURCE_HOSTNAME_OR_IP:~\nssh SOURCE_HOSTNAME_OR_IP\ncat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys\nrm ~/id_rsa.pub\n</code></pre> </li> </ol> <p>That about does it for the hard way. But it sure was a lot of work - and a lot of password typing! There's a better way, though. Stay tuned for...</p>","tags":["tutorial"]},{"location":"push-ssh-keys/#the-easy-way","title":"The Easy Way","text":"<p>Luckily, there is a handy little tool called <code>ssh-copy-id</code> that takes care of most of these steps for us. We can push keys from a source node to a destination node in just one line, like this:</p> <pre><code># From source node:\nssh-copy-id -i ~/.ssh/id_rsa.pub DESTINATION_HOSTNAME_OR_IP\n</code></pre> <p>The <code>-i</code> command specifies which public / private key pair, or identity, you want to use. You can use <code>ssh-keygen</code> to generate more than one pair, if desired or required.</p> <p>Once you run that command and enter the password when prompted, you should be able to login to the destination node without a password. Try it out. Did it work? While you're at it, push keys the other way:</p> <pre><code># From desintation node:\nssh-copy-id -i ~/.ssh/id_rsa.pub SOURCE_HOSTNAME_OR_IP\n</code></pre> <p>All done! Wasn't that easy?</p>","tags":["tutorial"]},{"location":"push-ssh-keys/#final-thoughts","title":"Final Thoughts","text":"<p>That's all for this quick SSH tip. If you liked this article, have comments or concerns, or just want to express yourself, leave a comment below. Check out some of the other articles on this blog for more technical info, or even try our YouTube channel on for size. Thanks for reading!</p>","tags":["tutorial"]},{"location":"ruby-gem/","title":"Making a Command-line Ruby Gem - Write, Build, and Push","text":"<p>Anyone who has used Ruby before knows that gems are the spice of life. They are easy to install and distribute, even easier to use, and most importantly, they provide useful functionality. It's not uncommon to see entire software projects centered around a single well-made gem. Take any Ruby on Rails project, and you'll see this in practice.</p> <p>Gems are, in a nutshell, Ruby code packaged for easy distribution and use. It's easy to make your first gem, and even easier to reuse someone else's! Thousands upon thousands of gems are available on RubyGems.org, ready to solve your problems.</p> <p>In this article, we're going to do two things. First, we'll get started by creating our first gem and pushing it to RubyGems. This way, everyone in the world will be able to install and use it with the <code>gem install</code> command. Not bad!</p> <p>After that, we're going to modify the gem so that you can use it anywhere on your computer, just by typing its name into the console. Sweet!</p> <p></p>","tags":["ruby","tutorial"]},{"location":"ruby-gem/#requirements","title":"Requirements","text":"<p>In order to complete this tutorial, you'll need a version of Ruby installed on your computer. If you don't already have it, consider first installing RVM (Ruby Version Manager), and then selecting the version of Ruby you want via RVM. This will save you countless headaches in the future should you need to switch Ruby versions for any reason.</p> <p>For the record, I used Ruby version <code>2.3.3p200</code> in the creation of this tutorial. As long what you use is at least somewhat recent, you should be fine.</p> <p>Note that this tutorial was created using Ubuntu Linux (on Windows). I'm sure there's a way to accomplish this using only Windows, but I have to leave that for you to figure out.</p>","tags":["ruby","tutorial"]},{"location":"ruby-gem/#setting-up-the-gem","title":"Setting Up the Gem","text":"<p>Let's start by creating the initial file structure of our gem. Create an empty directory and <code>cd</code> to it. For this tutorial, I'll be creating the <code>pagekey</code> gem. When you make yours, be sure to use a unique name that's not already taken on RubyGems.org.</p> <pre><code>mkdir pagekey\ncd pagekey\n</code></pre> <p>The skeleton of our gem will consist of a <code>.gemspec</code> file to specify the gem configuration, a <code>lib</code> folder to hold our source, and of course our first source file. I'll create these now:</p> <pre><code>touch pagekey.gemspec\nmkdir lib\ntouch lib/pagekey.rb\nmkdir bin\n</code></pre> <p>Our file structure should look like this:</p> <pre><code>pagekey\n|-- pagekey.gemspec\n|-- bin\n|-- lib\n    |-- pagekey.rb\n</code></pre> <p>Now I'll edit <code>pagekey.gemspec</code> and include some information about our gem. Remember to update this with information specific to your own gem.</p> <pre><code>Gem::Specification.new do |s|\n  s.name      = 'pagekey'\n  s.version   = '0.1.0'\n  s.platform  = Gem::Platform::RUBY\n  s.summary   = 'PageKey Solutions tutorial gem'\n  s.description = \"Created in a tutorial found on blog.pageKeySolutions.com. Doesn't do too much!\"\n  s.authors   = ['Steve G']\n  s.email     = ['info@pagekeysolutions.com']\n  s.homepage  = 'http://rubygems.org/gems/pagekey'\n  s.license   = 'MIT'\n  s.files     = Dir.glob(\"{lib,bin}/**/*\") # This includes all files under the lib directory recursively, so we don't have to add each one individually.\n  s.require_path = 'lib'\nend\n</code></pre> <p>Perfect. Now that the gem is configured, let's add some really basic code and test it out. To accomplish this, I'll edit <code>lib/pagekey.rb</code>:</p> <pre><code>module PageKey\n  def self.hello_world\n    \"Good morning world and all who inhabit it!\"\n  end\nend\n</code></pre> <p>Excellent. We're all set up as far as code goes. Now we can leverage Ruby's wonderfully streamlined gem workflow to build and test our creation. Watch how easy it is.</p>","tags":["ruby","tutorial"]},{"location":"ruby-gem/#building-and-testing","title":"Building and Testing","text":"<p>To package everything up, we will provide our <code>.gemspec</code> file as the only input:</p> <pre><code>gem build pagekey.gemspec\n</code></pre> <p>If all goes well, you'll see:</p> <pre><code>Successfully built RubyGem\nName: pagekey\nVersion: 0.0.0\nFile: pagekey-0.0.0.gem\n</code></pre> <p>Now we will install it so that it will be accessible from our code.</p> <pre><code>gem install ./pagekey-0.0.0.gem\n</code></pre> <p>For projects that use your gem, you may want to include it in your <code>Gemfile</code> and run <code>bundle install</code>: </p><pre><code># Inside Gemfile:\ngem 'pagekey', '~&gt; 0.0.0'\n</code></pre> <p>Time for the moment of truth. We can test it on <code>irb</code>, the interactive ruby console. Type <code>irb</code> and it will start the interpreter.</p> <pre><code>&gt; require 'pagekey'\n =&gt; true\n&gt; PageKey::hello_world\n =&gt; \"Good morning world and all who inhabit it!\"\n</code></pre> <p>Wonderful. It works as expected.</p>","tags":["ruby","tutorial"]},{"location":"ruby-gem/#adding-the-cli","title":"Adding the CLI","text":"<p>Right now, if I type <code>pagekey</code>, I'll get an angry message from my console, like: <code>pagekey: command not found</code>. This isn't good - I want to use my gem just like <code>ls</code>, <code>cat</code>, <code>awk</code>, or any other useful program!</p> <p>In order to make this gem available under a specific terminal command, we'll have to create an executable and link to it in our <code>.gemspec</code> file.</p> <p>The executable will basically be a short Ruby script that accepts command line arguments and routes them to the gem's code in <code>./lib</code>.</p> <p>Create a directory to hold the file with <code>mkdir bin</code> and edit the <code>bin/pagekey</code> file:</p> <pre><code>#!/usr/bin/env ruby\nrequire 'pagekey'\nputs PageKey::hello_world\n</code></pre> <p>Ensure that the file is executable by running <code>chmod +x bin/pagekey</code>. Our next step is to specify this executable in <code>pagekey.gemspec</code> so that it will be added to the system PATH variable when the gem is installed. Add the following line:</p> <pre><code>  s.executables = ['pagekey']\n</code></pre> <p>Now the gem will look in the <code>bin</code> directory for the <code>pagekey</code> executable when you type <code>pagekey</code> on the command line.</p>","tags":["ruby","tutorial"]},{"location":"ruby-gem/#pushing-and-publishing","title":"Pushing and Publishing","text":"<p>After these efforts, our beautiful gem is ready to go. But, until it's in the open air, I'd it's nothing but a diamond in the rough (how pun-tastic!). Let's get this thing out there in the real world.</p> <p>Make sure that you build your gem as described above with <code>gem build pagekey.gemspec</code>. Then, create an account at rubygems.org. Replace <code>USERNAME</code> with your RubyGems username in the following snippet, and run it:</p> <pre><code>curl -u USERNAME https://rubygems.org/api/v1/api_key.yaml &gt;\n~/.gem/credentials; chmod 0600 ~/.gem/credentials\n</code></pre> <p>This will set up your system with the proper credentials to publish gems to your RubyGems account. The final step is very simple: Just push it!</p> <pre><code>gem push pagekey-0.0.0.gem\n</code></pre> <p>The gem will upload, and it will become available for the world to see and download!</p>","tags":["ruby","tutorial"]},{"location":"ruby-gem/#bonus-useful-rake-automation","title":"Bonus: Useful Rake Automation","text":"<p>One more tool that may be helpful as you get into the flow of gem development is <code>rake</code>, which allows you to automate processes using the Ruby programming language. In the base directory for your gem, add a <code>Rakefile</code> to hold your scripts. I've included an example that proved very helpful as I pursued my own little gem project:</p> <pre><code>GEM_NAME = \"pagekey\"\nGEM_VERSION = \"0.0.0\"\n\ntask :default =&gt; :build\n\ntask :build do\n  system \"gem build \" + GEM_NAME + \".gemspec\"\nend\n\ntask :install =&gt; :build do\n  system \"gem install \" + GEM_NAME + \"-\" + GEM_VERSION + \".gem\"\nend\n\ntask :publish =&gt; :build do\n  system 'gem push ' + GEM_NAME + \"-\" + GEM_VERSION + \".gem\"\nend\n\ntask :clean do\n  system \"rm *.gem\"\nend\n</code></pre> <p>To run these commands, just type <code>rake</code>, <code>rake build</code>, <code>rake install</code>, <code>rake publish</code>, or <code>rake clean</code> and see what happens.</p> <p>The outcome of each task is fairly self-explanatory. The build command just builds the gem for you. The install command builds the gem and installs it, so that you can <code>require</code> it and try it out. The publish command also builds the gem, after which it takes care of pushing the gem for you.</p> <p>The arrow <code>=&gt;</code> indicates a dependency of tasks. For example, <code>task :install =&gt; :build</code> indicates that <code>:install</code> depends on <code>:build</code>, and so every time that <code>rake install</code> runs, the commands under the <code>:build</code> task run beforehand.</p> <p>This <code>Rakefile</code> relies heavily on the <code>system</code> command, which utilizes the shell interpreter of the system you're runnning on. This means that the file is OS specific. All of these tasks can likely be performed in pure Ruby, but I found it much easier, especially for simple, small projects, to write everything as a <code>system</code> command. As you grow, however, it may be best to move away from OS-specific code.</p> <p>As a challenge, I'll suggest to you one way to greatly improve this <code>Rakefile</code>.</p> <p>Right now, you'd have to update the <code>.gemspec</code> file and your <code>Rakefile</code> if you wanted to change the version from <code>0.0.0</code> to <code>0.0.1</code>. This is not ideal. Modify your gem's code such that it references the <code>GEM_VERSION</code> in only one place within the application.  Since everything is written in Ruby, you would be able to <code>require</code> a configuration file that contains the version as a variable and use that. Perhaps it would also be helpful to include a task in your <code>Rakefile</code> called <code>:increment</code>, which updates your gem version by incrementing the last number (moving <code>0.0.0</code> to <code>0.0.1</code> automatically).</p>","tags":["ruby","tutorial"]},{"location":"ruby-gem/#wrapping-up","title":"Wrapping Up","text":"<p>Thanks for reading. I hope this article will help you get started writing your first Ruby gem, so that you can contribute to the large and impressive open-source Ruby community. Best of luck!</p>","tags":["ruby","tutorial"]},{"location":"pkos-1/","title":"OS1: Installing VirtualBox and Debian","text":"<p>In this video, we'll set up VirtualBox and install a Debian VM so that we can use Linux on Windows.</p> <p></p>","tags":["tutorial"]},{"location":"pkos-1/#code","title":"Code","text":"<ul> <li>Link to tag</li> </ul>","tags":["tutorial"]},{"location":"scrollmagic/","title":"Make Your Site Stand Out with ScrollMagic","text":"<p>Today, we learn how to create a basic ScrollMagic web animation.</p> <p></p> <p>View the demo: http://bit.ly/pks-scrollmagic</p>","tags":["javascript","tutorial"]},{"location":"django-first-web-app/","title":"Django: How to Install and Run Your First Web App","text":"<p>Friends, we all have ideas for apps. Everyone that I\u2019ve talked to, whether they\u2019re interested in technology or not, has had some kind of idea for something that their phone and computer could do better, something to make their lives that much easier. Yet, getting started can be tremendously intimidating. How can we actually make it happen? Do we need degrees? Years of study? A natural gift?</p> <p>I think the answer is no. Applications are can be complex and vary widely in functionality, but the fundamentals are the same. This is true whether you\u2019re building for mobile phones, web, or even desktop.</p> <p>Today, we\u2019ll take the first step to bringing your stunning app idea to life. We\u2019ll be working with Django, which is a Python framework used to make web apps that are fast, secure, and maintainable.</p> <p>For this tutorial, I\u2019ll do my best to assume you have little or no prior knowledge on the subject. This might make explanations lengthy, so feel free to skip through if you already feel comfortable with a topic.</p>","tags":["python","tutorial"]},{"location":"django-first-web-app/#what-is-django","title":"What is Django?","text":"<p>The official Django website describes itself as \u201cthe Web framework for perfectionists with deadlines.\u201d It\u2019s an open-source web framework that follows the model-view-template architectural pattern.</p> <p>What\u2019s that in English? It helps you build websites.</p> <p>Django comes right out of the box with a ton of goodies, including a development server and a set of tools for building and testing your site from end to end. It follows a familiar high-level architecture, in which a web server is connected to a database.</p> <p></p> Simple Web App Architecture <p>Luckily, we don\u2019t have to understand the inner workings of Django to use it. In fact, that\u2019s the point - with the details neatly abstracted for us, we\u2019re free to jump right in and learn as we go!</p>","tags":["python","tutorial"]},{"location":"django-first-web-app/#setting-up","title":"Setting Up","text":"<p>To get started, we will have to install some software on our computer. I\u2019ll be walking you through installation for the following tools:</p> <ul> <li> <p>Python</p> </li> <li> <p>Pip</p> </li> <li> <p>Django</p> </li> </ul> <p>Later on, you may want to install a production database, such as MySQL. The built-in SQLite database is really only good for one user at a time. However, until you\u2019re ready to publish and scale your app, it will work just fine.</p>","tags":["python","tutorial"]},{"location":"django-first-web-app/#python","title":"Python","text":"<p>Everything in Django is built using the Python programming language, so we\u2019ll definitely need to have that installed. There are two major \u201cflavors\u201d of Python out there: Python 2 and Python 3. Unless you have a specific reason to go with Python 2, I would recommend using Python 3 from the get-go.</p> <p>If you\u2019re a Linux user, you probably already have Python installed\u200a\u2014\u200ajust open a terminal and write <code>python --version</code>. If you don\u2019t have it, or if it\u2019s not the version you want, you\u2019ll need to install it with a package manager. Since you\u2019re a Linux user, I\u2019m assuming you can figure that out, or at least Google it. :)</p> <p>For Windows, we can\u2019t rely on a beautiful package manager\u200a\u2014\u200awe\u2019ll have to install the binary from the web. To do this, just download Python from the website. Then, run the downloaded installer and follow the instructions onscreen.</p> <p>When you\u2019re done, you should be able to open a command prompt and write <code>python --version</code>. If it returns something like <code>Python 3.5.2</code>, you\u2019re in good shape.</p>","tags":["python","tutorial"]},{"location":"django-first-web-app/#pip","title":"Pip","text":"<p>Pip is a package manager for Python. It\u2019s what we\u2019ll use to install Django and its many dependencies. Luckily, you probably already have it installed. Try it out by saying <code>pip --version</code>. If a version prints out with a link to your Python version, you\u2019re good to go. It should look like this:</p> <pre><code>pip 19.1.1 from /path/to/binary/pip (python 3.5)\n</code></pre> <p>Make sure the Python version matches the one you would like to use.</p> <p>If the command doesn\u2019t work, we can just install it using Python. Run this:</p> <pre><code>$ python -m pip install pip\n</code></pre> <p>This should get you off and running.</p>","tags":["python","tutorial"]},{"location":"django-first-web-app/#django","title":"Django","text":"<p>At last! We can finally install Django.</p> <p>Now that we have pip doing our dirty work for us, installing Django is as easy as running:</p> <pre><code>$ pip install django\n</code></pre> <p>Check to make sure it worked:</p> <pre><code>$ django-admin --version\n2.2.2\n</code></pre> <p>Now we\u2019re ready to go.</p>","tags":["python","tutorial"]},{"location":"django-first-web-app/#generating-the-project","title":"Generating the Project","text":"<p>With Django, we don\u2019t have to start from scratch. The basic format of the project will be generated for us by the <code>django-admin</code> tool.</p> <p>We\u2019ll give our project a generic name\u200a\u2014\u200ahello_django. To generate the project, run this:</p> <pre><code>$ django-admin startproject hello_django\n</code></pre> <p>This creates a project folder with plenty of pre-set files for us to work from.</p> <p>Let\u2019s enter the directory and see what\u2019s inside.</p> <pre><code>$ cd hello_django\n$ du -a\n0       ./hello_django/__init__.py\n4       ./hello_django/settings.py\n4       ./hello_django/urls.py\n0       ./hello_django/wsgi.py\n8       ./hello_django\n4       ./manage.py\n12      .\n</code></pre> <p>Excellent. The basics for our app are in place. We will never have to edit <code>manage.py</code>, but it\u2019s going to be our best friend as we move forward. It\u2019s this script that will run our development server, run any tests we may have, and generate new \u201capps.\u201d</p> <p>We\u2019ll talk about what apps are in Django and how to use them soon. First, though, let\u2019s make sure everything is working so far. Start your Django server and see for yourself what it looks like out of the box:</p> <pre><code>$ python manage.py runserver\n...\nDjango version 2.2.2, using settings 'hello_django.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre> <p>Now open up a browser and type http://localhost:8000/ into your address bar. You should see a welcome page for Django!</p> <p></p> <p>If you see something like the page above, you\u2019re up and running!</p> <p>In the next part of this tutorial, we\u2019ll take a look at how to actually make things happen\u200a\u2014\u200awe\u2019ll generate an \u201capp\u201d and start linking things up with URLs.</p> <p>Thanks for reading!</p>","tags":["python","tutorial"]},{"location":"10-minute-linux/","title":"10 Minute Linux Crash Course - Everything You Need to Get Started Now","text":"<p>Some of us grew up clicking around in MS Paint on Windows. Others may enjoyed the luxurious interface afforded by Mac OS. Still others may have been stuck with nothing more than a cell phone, or even just a TI-84 calculator.</p> <p>Regardless of your humble beginnings, I want to congratulate you on taking things to the next level by jumping headfirst into the world of Linux. Whatever your reason for dipping your toes in these waters, I'm sure you won't regret it! Anyone involved with computers will almost certainly encounter Linux at some point in their career, so now is the time for you to get ahead of things and figure out how to use the dang thing!</p> <p>All you'll need is a little patience and about 10 minutes to get started! Read on.</p> <p>Disclaimer: the video is 10 minutes, but the article may be a bit more verbose. :)</p> <p></p>","tags":["linux"]},{"location":"10-minute-linux/#making-moves-navigating-the-system","title":"Making Moves (Navigating the System)","text":"<p>One of the first things you need to know how to do when you're learning to use the computer is how to move around. For Windows or Mac, everything is graphical. Some Linux distributions have a Graphical User Interface (GUI) as well, but Real Linux happens on the command line. From now on, we're throwing off the GUI security blanket and diving straight into the command-line!</p>","tags":["linux"]},{"location":"10-minute-linux/#ls","title":"<code>ls</code>","text":"<p>By far, the most common command on Linux is <code>ls</code>, which <code>l</code>i<code>s</code>ts the files in the current directory. Instead of opening a window and seeing a folder's files there, you'll instead be in a terminal window whose current working directory is set to some folder on your hard drive. <code>ls</code> shows you everything in that folder.</p> <p>Here is an example of what using <code>ls</code> may look like:</p> <pre><code>steve@surface01:folder$ ls\nfile1.txt  file2.txt  image.jpg\nsteve@surface01:folder$\n</code></pre> <p>In the above, you can see that we typed <code>ls</code> and hit enter, showing the contents of our current folder. As it turns out, the folder contains three files: <code>file1.txt</code>, <code>file2.txt</code>, and <code>image.jpg</code>.</p> <p>The <code>ls</code> command on its own hides files that start with a \"<code>.</code>\". To really see all the files, you can use <code>ls -a</code>:</p> <pre><code>steve@surface01:folder$ ls -a\n.  ..  file1.txt  file2.txt  image.jpg\nsteve@surface01:folder$\n</code></pre> <p>You can view extra information about the files with the long version of the command, <code>ls -l</code>:</p> <pre><code>steve@surface01:folder$ ls -l\ntotal 0\n-rw-r--r-- 1 steve steve 0 Nov 28 14:11 file1.txt\n-rw-r--r-- 1 steve steve 0 Nov 28 14:11 file2.txt\n-rw-r--r-- 1 steve steve 0 Nov 28 14:11 image.jpg\nsteve@surface01:folder$\n</code></pre> <p>You can use them together with <code>ls -al</code> (or <code>ls -la</code>):</p> <pre><code>steve@surface01:folder$ ls -al\ntotal 8\ndrwxr-xr-x  2 steve steve 4096 Nov 28 14:11 .\ndrwxr-xr-x 28 steve steve 4096 Nov 28 12:38 ..\n-rw-r--r--  1 steve steve    0 Nov 28 14:11 file1.txt\n-rw-r--r--  1 steve steve    0 Nov 28 14:11 file2.txt\n-rw-r--r--  1 steve steve    0 Nov 28 14:11 image.jpg\nsteve@surface01:folder$\n</code></pre>","tags":["linux"]},{"location":"10-minute-linux/#cd","title":"<code>cd</code>","text":"<p>What if there's nothing in this folder that we're particularly interested in? Are we out of luck?</p> <p>No! The <code>cd</code> command, or current directory, will come to the rescue! We use this command to change the current working directory to somewhere else on the system.</p> <p>For example, say I need a break from work. In that case, I'll head over to my games folder:</p> <pre><code>steve@surface01:games$ cd /home/steve/games\nsteve@surface01:games$ ls\ncod.sh  minecraft.sh\nsteve@surface01:games$\n</code></pre> <p>As you can see, typing <code>ls</code> again now shows the files inside the games folder in my home directory. If the path <code>/home/steve/does_not_exist</code> isn't a real folder on your computer, you'll get an error:</p> <pre><code>steve@surface01:folder$ cd /home/steve/does_not_exist\n-bash: cd: /home/steve/does_not_exist: No such file or directory\nsteve@surface01:folder$\n</code></pre> <p>Notice how the path above begins with a slash (\"<code>/</code>\"). When you see this in Linux, it's called an absolute path. This means that you're giving the exact path to a file or folder on your system. The alternative is to use a relative path, which we'll talk about below.</p>","tags":["linux"]},{"location":"10-minute-linux/#pwd","title":"<code>pwd</code>","text":"<p>In case you get completely turned around, you can use the <code>pwd</code> command, or print working directory, to tell you exactly where you are on the computer.</p> <p>After running the <code>cd</code> command in the above example, this is the output of the <code>pwd</code> command:</p> <pre><code>steve@surface01:folder$ cd /home/steve/games\nsteve@surface01:games$ pwd\n/home/steve/games\nsteve@surface01:games$\n</code></pre>","tags":["linux"]},{"location":"10-minute-linux/#relative-paths","title":"Relative Paths","text":"<p>There are two special directories you'll want to worry about: <code>.</code> and <code>..</code>. Yes, you read that right - they're called \"dot\" and \"dot dot\". What the heck does that mean?</p> <p>The single dot, <code>.</code>, stands for the current directory. The double dot, <code>..</code>, stands for the parent directory. Anything that uses one of these two special folders, or that does not begin with a slash, is considered a relative path.</p> <p>Say that we're back in my <code>games</code> folder, and I want to move up a folder into the <code>/home/steve</code> directory. One way to do this would be to type the whole path in the command, as <code>cd /home/steve</code>. However, you might as well save your fingers some work! Just type <code>cd ..</code> and it will do the same job.</p> <pre><code>steve@surface01:games$ pwd\n/home/steve/games\nsteve@surface01:games$ cd ..\nsteve@surface01:~$ pwd\n/home/steve\nsteve@surface01:~$\nsteve@surface01:~$ cd games\nsteve@surface01:games$ pwd\n/home/steve/games\nsteve@surface01:games$\n</code></pre> <p>It may not seem like a big deal, but paths can get quite long. When you're 20 folders deep, you definitely won't want to type the entire path out to move up a folder!</p> <p>Another powerful part of this is that you can chain the dot-folders. To move up two directories instead of one, it's as easy as:</p> <pre><code>steve@surface01:games$ pwd\n/home/steve/games\nsteve@surface01:games$ cd ../..\nsteve@surface01:home$ pwd\n/home\nsteve@surface01:home$\n</code></pre> <p>Notice that I moved from <code>/home/steve/games</code> all the way up to <code>/home</code>. Much quicker!</p> <p>Now that you now know the basics of moving around, let's get our hands dirty and mess with some files.</p>","tags":["linux"]},{"location":"10-minute-linux/#get-organized-file-manipulation","title":"Get Organized! (File Manipulation)","text":"","tags":["linux"]},{"location":"10-minute-linux/#cat","title":"<code>cat</code>","text":"<p>The fluffiest of all Linux commands, <code>cat</code> is also one of the most useful. It's job is not to eat all of your kibble or crawl on your keyboard, but instead to output the contents of any file on your computer. This is handy if you want to check what's inside of something without popping open a text editor, but it's also priceless when using piping, discussed below.</p> <p>It's incredibly simple to use. Just type <code>cat &lt;name_of_file&gt;</code>. Here's an example - say that I keep my dog's name is a text file in case I forget it:</p> <pre><code>steve@surface01:folder$ ls\ndog_name.txt\nsteve@surface01:folder$ cat dog_name.txt\nDoggo\nsteve@surface01:folder$\n</code></pre> <p>As you can see, we've printed the contents of <code>dog_name.txt</code> to the terminal for all the world to see!</p>","tags":["linux"]},{"location":"10-minute-linux/#touch","title":"<code>touch</code>","text":"<p>If you need to create an empty file, maybe as a placeholder or just to prove that you have permission to do it, you can use the touch command.</p> <pre><code>steve@surface01:folder$ ls\nsteve@surface01:folder$ touch my_file.txt\nsteve@surface01:folder$ ls\nmy_file.txt\nsteve@surface01:folder$ cat my_file.txt\nsteve@surface01:folder$\n</code></pre> <p>There it is!</p>","tags":["linux"]},{"location":"10-minute-linux/#mkdir","title":"<code>mkdir</code>","text":"<p>The <code>mkdir</code> command lets you make a directory. Check it out:</p> <pre><code>steve@surface01:folder$ ls\nmy_file.txt\nsteve@surface01:folder$ mkdir folder1\nsteve@surface01:folder$ ls\nfolder1  my_file.txt\nsteve@surface01:folder$ touch folder1/other_file.txt\nsteve@surface01:folder$ cd folder1/\nsteve@surface01:folder1$ ls\nother_file.txt\nsteve@surface01:folder1$ cd ..\nsteve@surface01:folder$ ls\nfolder1  my_file.txt\nsteve@surface01:folder$\n</code></pre> <p>If you need to make multiple nested directories all at once, you'll have to use <code>mkdir -p</code>.</p> <pre><code>steve@surface01:folder$ mkdir lots/of/nested/folders\nmkdir: cannot create directory \u2018lots/of/nested/folders\u2019: No such file or directory\nsteve@surface01:folder$ mkdir -p lots/of/nested/folders\nsteve@surface01:folder$ ls\nlots\nsteve@surface01:folder$ du -a\n4       ./lots/of/nested/folders\n8       ./lots/of/nested\n12      ./lots/of\n16      ./lots\n20      .\nsteve@surface01:folder$ find .\n.\n./lots\n./lots/of\n./lots/of/nested\n./lots/of/nested/folders\nsteve@surface01:folder$\n</code></pre> <p>Notice that we used the <code>du -a</code> command to see all of the folders. While <code>du</code> stands for disk utilization, it can also be helpful to show an entire folder structure rather than a single directory. Another option to perform the same task is <code>find .</code>.</p>","tags":["linux"]},{"location":"10-minute-linux/#rmdir","title":"<code>rmdir</code>","text":"<p>If you want to remove a directory, <code>rmdir</code> is the way to go.</p> <pre><code>steve@surface01:folder$ mkdir img\nsteve@surface01:folder$ ls\nimg\nsteve@surface01:folder$ rmdir img\nsteve@surface01:folder$ ls\nsteve@surface01:folder$\n</code></pre> <p>It doesn't always work though. What if the directory has something in it?</p> <pre><code>steve@surface01:folder$ ls\nsteve@surface01:folder$ mkdir testdir\nsteve@surface01:folder$ touch testdir/testfile.txt\nsteve@surface01:folder$ find .\n.\n./testdir\n./testdir/testfile.txt\nsteve@surface01:folder$ rmdir testdir\nrmdir: failed to remove 'testdir': Directory not empty\nsteve@surface01:folder$ ls\ntestdir\nsteve@surface01:folder$\n</code></pre> <p>In order to delete a directory with something in it, we'll have to use the <code>rm</code> command, explained below.</p>","tags":["linux"]},{"location":"10-minute-linux/#mv","title":"<code>mv</code>","text":"<p>The <code>mv</code> command serves two purposes. You can move a file, and you can also rename a file. If you think about it, this is pretty much the same thing anyway. If you rename a file, it's a lot like you're moving it to a new path in the same directory.</p> <pre><code>steve@surface01:folder$ touch myfile.txt\nsteve@surface01:folder$ ls\nmyfile.txt\nsteve@surface01:folder$ mv myfile.txt not_my_file.txt\nsteve@surface01:folder$ ls\nnot_my_file.txt\nsteve@surface01:folder$\n</code></pre>","tags":["linux"]},{"location":"10-minute-linux/#rm","title":"<code>rm</code>","text":"<p>Sadly, we have to let some of our files go sometimes. When that time comes, <code>rm</code> lets you remove files.</p> <pre><code>steve@surface01:folder$ ls\nnot_my_file.txt\nsteve@surface01:folder$ rm not_my_file.txt\nrm: remove regular empty file 'not_my_file.txt'? y\nsteve@surface01:folder$ ls\nsteve@surface01:folder$\n</code></pre> <p>So long!</p> <p>What if you want to remove a directory? You'll have to use <code>rm -r</code> instead. The <code>-r</code> stands for recursive.</p> <pre><code>steve@surface01:folder$ ls\nsteve@surface01:folder$ mkdir testdir\nsteve@surface01:folder$ touch testdir/testfile.txt\nsteve@surface01:folder$ find .\n.\n./testdir\n./testdir/testfile.txt\nsteve@surface01:folder$ rm -r testdir\nrm: descend into directory 'testdir'? y\nrm: remove regular empty file 'testdir/testfile.txt'? y\nrm: remove directory 'testdir'? y\nsteve@surface01:folder$ ls\nsteve@surface01:folder$\n</code></pre> <p>Notice how it asks you for every single file. If you're deleting a directory with thousands of files, this is not going to work. To force it to delete the files without asking, add <code>-f</code> to the command:</p> <pre><code>steve@surface01:folder$ ls\nsteve@surface01:folder$ mkdir testdir\nsteve@surface01:folder$ touch testdir/testfile.txt\nsteve@surface01:folder$ find .\n.\n./testdir\n./testdir/testfile.txt\nsteve@surface01:folder$ rm -rf testdir\nsteve@surface01:folder$ ls\nsteve@surface01:folder$\n</code></pre> <p>Be careful with this one, as you can damage your system beyond repair. Never run anything like <code>rm -rf /</code> as you will delete everything (assuming you have permission) and brick your system. It's like deleting system32 on Windows - anyone telling you to run this command does not have good intentions!</p>","tags":["linux"]},{"location":"10-minute-linux/#wrap-up","title":"Wrap Up","text":"<p>Well done - you now know the basics of navigating around a Linux system.</p>","tags":["linux"]},{"location":"duobot/","title":"DuoBot: Topping the DuoLingo Charts with Selenium","text":"<p>In this video, I show off my magical DuoLingo-playing bot made with Selenium. Its best magic trick: breaking while you're using it.</p> <p></p> <p>Take the first step to writing your own! Check out our post for installing Selenium in 90 seconds or less.</p>","tags":["python","language"]},{"location":"90-sec/docker-windows/","title":"\u226490s: Install Docker on Windows 10 Pro","text":"<p>In this video, we get Docker working for us in 90 seconds!</p> <p></p>","tags":["docker","windows"]},{"location":"90-sec/julia-windows/","title":"\u226490s: Install Julia Programming Language on Windows","text":"<p>In this video, we install the up-and-coming programming language Julia on Windows in 90 seconds or less.</p> <p></p>","tags":["julia","windows"]},{"location":"90-sec/opengl-glut/","title":"\u226490s: First OpenGL Program with GLUT (Linux)","text":"<p>In this video, we run through the steps for making our first OpenGL program using GLUT.</p> <p></p> <p>List of packages to install:</p> <pre><code>sudo apt install vim make build-essential freeglut3 freeglut3-dev libglew1.5 libglew1.5-dev libglu1-mesa libglu1-mesa-dev libgl1-mesa-glx libgl1-mesa-dev mesa-common-dev libglew-dev libglfw3 libglfw3-dev libglm-dev\n</code></pre>","tags":["c++","ubuntu"]},{"location":"90-sec/python-ubuntu/","title":"\u226490s: Install Python (Ubuntu)","text":"<p>In this video we make sure we have Python 3 installed on our Ubuntu Linux system.</p> <p></p>","tags":["linux","python"]},{"location":"90-sec/python-windows/","title":"\u226490s: Install Python (Windows 10)","text":"<p>In this video, we install Python 3 on Windows 10 in 90 seconds or less.</p> <p></p>","tags":["python","windows"]},{"location":"90-sec/qt-ubuntu/","title":"\u226490s: Hello World with Qt Framework (Ubuntu)","text":"<p>In this video, we install dependencies and run our first Qt graphical application using C++ on Ubuntu Linux.</p> <p></p> <p>Code for this lesson:</p> <p>https://github.com/pagekeysolutions/education/tree/master/Qt_in_90_Sec</p>","tags":["c++","linux"]},{"location":"90-sec/selenium-ubuntu/","title":"\u226490s: Install Selenium for Python on Ubuntu","text":"<p>In this video, we learn how to set up Selenium in 90 seconds or less! Made using Ubuntu on Windows (WSL). You may need to start an Xming server if you use this method (I did).</p> <p></p>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#steps","title":"Steps","text":"","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#1-install-packages","title":"1. Install packages.","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install python3 python3-pip firefox\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#2-download-geckodriver","title":"2. Download <code>geckodriver</code>.","text":"<pre><code>wget https://github.com/mozilla/geckodriver/releases/download/v0.26.0/geckodriver-v0.26.0-linux64.tar.gz\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#3-untar-geckodriver","title":"3. Untar <code>geckodriver</code>.","text":"<pre><code>tar xvf geckodriver-v0.26.0-linux64.tar.gz\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#4-copy-geckodriver-into-system-path","title":"4. Copy <code>geckodriver</code> into system <code>PATH</code>.","text":"<p>Edit: <code>/usr/local/lib</code> may be more appropriate than <code>/usr/lib</code> because <code>/usr/local/lib</code> is typically the place for user-installed software (whereas <code>/usr/lib</code> is for the package manager). Use whichever you prefer, but if you decide to use <code>/usr/local/lib</code>, make sure that it is in your <code>$PATH</code> environment variable.</p> <pre><code>sudo cp geckodriver /usr/lib\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#5-install-the-selenium-python-package","title":"5. Install the <code>selenium</code> Python package.","text":"<pre><code>pip3 install selenium\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#6-edit-verifypy-and-make-sure-selenium-is-working","title":"6. Edit <code>verify.py</code> and make sure Selenium is working.","text":"<pre><code>vi verify.py\n</code></pre> <pre><code>#!/usr/bin/env python\nfrom selenium import webdriver\nbrowser = webdriver.Firefox() \nbrowser.get('http://www.google.com/')\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#7-run-the-test-script","title":"7. Run the test script.","text":"<pre><code>python verify.py\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#8-try-writing-a-unit-test-with-selenium","title":"8. Try writing a unit test with Selenium.","text":"<pre><code>vi test_selenium.py\n</code></pre> <pre><code>from selenium import webdriver\n\nclass TestGoogle(unittest.TestCase):\n  def setUp(self):\n    self.browser = webdriver.FireFox()\n  def test_title(self): \n    self.browser.get('http://www.google.com/') \n    self.assertIn('Google', self.browser.title)\n  def tearDown(self):\n    self.browser.close()\n\nif __name__ == '__main__':\n  unittest.main()\n</code></pre>","tags":["linux","python"]},{"location":"90-sec/selenium-ubuntu/#9-run-your-test","title":"9. Run your test.","text":"<pre><code>python test_selenium.py\n</code></pre> <p>Need Python? We have a tutorial for that, too! Install Python in 90 seconds or less on Windows or on Ubuntu.</p>","tags":["linux","python"]},{"location":"beginner-javascript-examples/","title":"4 Fun JavaScript Examples for Beginners","text":"<p>Welcome to our JavaScript lesson! Today, we'll be trying out some fun examples to see a few of the cool things you can do with JavaScript.</p> <p>Any of these examples are editable on CodePen. Just click \"Edit on Codepen\" in the top right corner and you can make as many changes as you want. Don't worry - the changes you make will be just for you! You don't have to worry about making mistakes, because you can always come back here to start fresh.</p> <p>Photo by Igor Haritanovich</p>","tags":["javascript"]},{"location":"beginner-javascript-examples/#genie-game","title":"Genie Game","text":"<p>Link to Genie Game on CodePen</p> <p>Click the button below to start the Genie Game!</p> <p>If you look at the code, you'll notice that we're using <code>if</code>, <code>else</code>, and <code>for</code> statements to make this work. These are called control flow statements, and without them, programming would be a lot harder! They let us control which code is executed, allowing us to change what happens based on the answers given by the user (that's you!).</p> <p>To show messages to the user, we use the <code>alert</code> function. It's easy to use - all you have to do is follow this format, and you'll see a popup box with your message: </p> <pre><code>alert(\"Your message here\");\n</code></pre> <p>Another function that we used is the <code>confirm</code> function. It displays a box with a message, just like the <code>alert</code> function, but it has a special feature. Instead of a single \"OK\" button, the <code>confirm</code> box has both an \"OK\" and a \"Cancel\" button. If the user presses the \"OK\" button, a value of <code>true</code> is returned. On the other hand, if you hit \"Cancel,\" a value of <code>false</code> is returned. We can use this to ask yes or no questions and change which messages we display based on the responses.</p> <pre><code>var choice = prompt(\"Do you like cheese?\");\nif (choice == true) {\n    alert(\"Me too!\");\n} else {\n    alert(\"I understand.\");\n}\n</code></pre> <p>Finally, the last major function that we use is the <code>prompt</code> function. This is just like the <code>alert</code> and <code>confirm</code> functions, but it gives you a text box to type in a message to the program. You can use it like this:</p> <pre><code>var favorite_pet = prompt(\"What is your favorite pet?\");\nalert(favorite_pet + \" is a great choice!\");\n</code></pre> <p>With all of that out of the way, let's see it in action! Click the button below to play the game. Then, try changing the code and make it do something new!</p> <p>As a special challenge, create a new CodePen and try to make your own story from scratch. Be sure to use this one as a reference if you need it.</p>","tags":["javascript"]},{"location":"beginner-javascript-examples/#challenges","title":"Challenges","text":"<ol> <li> <p>Let's try out the snippets. Right click on this post and press \"Inspect Element.\" Then, look for the Console. Copy each of the snippets from the beginning of the post and paste them into the Console. For bonus points, change the messages to something that you made up yourself!</p> </li> <li> <p>Continue the story after the three wishes are granted. You can include any number of <code>alert</code>, <code>confirm</code>, or <code>prompt</code> messages, and <code>if</code>, <code>else</code>, and <code>for</code> statements, if you're feeling adventurous! Hint: Start by adding a new line of code after line #32.</p> </li> <li> <p>Use the template below to create your own story from scratch! You can start by just replacing the text that is displayed with your own story. Then, try building your own logic.</p> </li> </ol>","tags":["javascript"]},{"location":"beginner-javascript-examples/#random-choice","title":"Random Choice","text":"<p>Link to Random Choice on CodePen</p> <p>This code picks a random color when you press the button, and shows you the answer.</p>","tags":["javascript"]},{"location":"beginner-javascript-examples/#tip-calculator","title":"Tip Calculator","text":"<p>Link to Tip Calculator on CodePen</p> <p>If you ever need to pay the bill at a restaurant, you may need to figure out how much to tip. This calculator takes the bill amount you provide and adds 20% so that you know how much to pay!</p>","tags":["javascript"]},{"location":"beginner-javascript-examples/#canvas-example","title":"Canvas Example","text":"<p>Link to Canvas Example on CodePen</p> <p>The HTML Canvas is a special element on the page that lets you draw custom shapes, lines, and images wherever and however you want. It's often used to create games right in your browser. It's a bit of an advanced topic, so we won't delve into it for this post. Try messing around with the code to get a feel for it.</p>","tags":["javascript"]},{"location":"beginner-javascript-examples/#conclusion","title":"Conclusion","text":"<p>Thanks for following along with our JavaScript tutorial! I hope you got a lot out of it.</p>","tags":["javascript"]},{"location":"pkos-10/","title":"OS10: Running on Real Hardware","text":"<p>Time for some real hardware! Let's load this OS up and try it out on an old laptop.</p> <p></p>","tags":["tutorial","assembly","c"]},{"location":"pkos-10/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly","c"]},{"location":"pkos-11/","title":"OS11: Calling Assembly from C","text":"<p>Join us in this video to find out how we can call a function in assembly from our kernel in C. This will allow us to do things in raw assembly when needed, and then we can pop back to the comfortable world of C when finished!</p> <p></p>","tags":["tutorial","assembly","c"]},{"location":"pkos-11/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly","c"]},{"location":"pkos-12/","title":"OS12: Basic Keyboard Driver (x86 Interrupts)","text":"<p>In this video, we learn about interrupts and write our own basic keyboard driver!</p> <p></p>","tags":["tutorial","assembly","c"]},{"location":"pkos-12/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Lecture</li> <li>9:58 What we're building</li> <li>10:39 Updates to Makefile, add .gdbinit file</li> <li>12:32 Updates to kernel.asm</li> <li>18:08 Updates to kernel.c</li> <li>28:28 Compiler error fixes; working demo again</li> <li>29:06 GDB debugging skills; making the keyboard map from scratch</li> </ul>","tags":["tutorial","assembly","c"]},{"location":"pkos-12/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly","c"]},{"location":"pkos-2/","title":"OS2: First Bootloader","text":"<p>In this video, we install qemu and nasm so that we can build our first bootloader and run it.</p> <p></p>","tags":["tutorial","assembly"]},{"location":"pkos-2/#notes","title":"Notes","text":"<p>Command for getting the first bootloader code:</p> <pre><code>wget https://raw.githubusercontent.com/pagekeysolutions/education/master/OS/video2/first.asm\n</code></pre> <p>Command for getting the Makefile:</p> <pre><code>wget https://raw.githubusercontent.com/pagekeysolutions/education/master/OS/video2/Makefile\n</code></pre>","tags":["tutorial","assembly"]},{"location":"pkos-2/#sources","title":"Sources","text":"<ul> <li> <p>https://stackoverflow.com/questions/34268518/creating-a-bootable-iso-image-with-custom-bootloader</p> </li> <li> <p>http://mikeos.sourceforge.net/write-your-own-os.html</p> </li> </ul>","tags":["tutorial","assembly"]},{"location":"pkos-2/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly"]},{"location":"pkos-3/","title":"OS3: Hone the Power of the BIOS!","text":"<p>We delve into and modify the example code, I explain a few assembly concepts, and I give you some challenges!</p> <p></p>","tags":["tutorial","assembly"]},{"location":"pkos-3/#notes","title":"Notes","text":"<p>Here\u2019s the source code repository (AND the solutions to the challenges):</p> <p>https://github.com/pagekeysolutions/education/tree/master/OS</p> <p>Here is the link to the Ralph Brown\u2019s Interrupt List download:</p> <p>http://www.cs.cmu.edu/~ralf/files.html</p>","tags":["tutorial","assembly"]},{"location":"pkos-3/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly"]},{"location":"pkos-4/","title":"OS4: Deciphering BIOS Challenges","text":"<p>Let's go over the challenges from the last video.</p> <p></p>","tags":["tutorial","assembly"]},{"location":"pkos-4/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly"]},{"location":"pkos-5/","title":"OS5: Going Over print_hex","text":"<p>In this video, we go over the challenge program Print Hex using 16-bit assembly.</p> <p></p>","tags":["tutorial","assembly"]},{"location":"pkos-5/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly"]},{"location":"pkos-6/","title":"OS6: Reading the Disk","text":"<p>How do we read the disk? We better find out before we go into protected mode!</p> <p>Watch 'til the end for a bonus bugfix :-)</p> <p></p>","tags":["tutorial","assembly"]},{"location":"pkos-6/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly"]},{"location":"pkos-7/","title":"OS7: Protected Mode - Making the Jump!","text":"<p>We really did it. We made the jump to 32-bit protected mode.</p> <p></p>","tags":["tutorial","assembly"]},{"location":"pkos-7/#notes","title":"Notes","text":"<p>Here\u2019s the awesome book I keep referencing:</p> <p>https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf</p>","tags":["tutorial","assembly"]},{"location":"pkos-7/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly"]},{"location":"pkos-8/","title":"OS8: Calling C from Assembly","text":"<p>In this video, we run our first miniature kernel, written in C.</p> <p></p>","tags":["tutorial","assembly","c"]},{"location":"pkos-8/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly","c"]},{"location":"pkos-9/","title":"OS9: Multiboot (Bootloader Breakup)","text":"<p>In this video, we break up with our old bootloader :-(</p> <p>Don't worry, life without it is much better! :-)</p> <p></p>","tags":["tutorial","assembly","c"]},{"location":"pkos-9/#notes","title":"Notes","text":"<p>Special thanks to Petros Koutoupis for his awesome Linux Journal article. Please check it out at this link - it's a great read!</p> <p>https://www.linuxjournal.com/content/what-does-it-take-make-kernel-0</p>","tags":["tutorial","assembly","c"]},{"location":"pkos-9/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["tutorial","assembly","c"]},{"location":"quick-python-1/","title":"Quick Python 1: Your First Loop & Data Types","text":"<p>In this video, we get our feet wet and unlock a tiny bit of the enormous power Python offer with a simple for loop.</p> <p></p> <p>Check out the source code here:</p> <p>https://github.com/stephengrice/education/tree/master/Quick_Python/01_Loops_Data_Types</p> <p>If you need to install Python, we have you covered! Check out our Done in 90 Seconds series to get it installed FAST!</p>","tags":["python","tutorial"]},{"location":"quick-python-2/","title":"Quick Python 2: Easy User Input","text":"<p>In this video, we find out how to get user input into our program - a huge advantage if you're just starting out.</p> <p></p> <p>Check out the source code here:</p> <p>https://github.com/stephengrice/education/tree/master/Quick_Python/02_Easy_User_Input</p> <p>If you need to install Python, we have you covered! Check out our Done in 90 Seconds series to get it installed FAST!</p>","tags":["python","tutorial"]},{"location":"quick-python-3/","title":"Quick Python 3: Error Handling (Actually pretty useful!)","text":"<p>In this video, we keep the user in line! With error handling, we can specify what type of input we're expecting to receive. This basic skill will also be useful for countless other situations as you continue your Python journey.</p> <p></p> <p>Check out the source code here:</p> <p>https://github.com/stephengrice/education/tree/master/Quick_Python/03_Error_Handling</p> <p>If you need to install Python, we have you covered! Check out our Done in 90 Seconds series to get it installed FAST!</p>","tags":["python","tutorial"]},{"location":"quick-python-4/","title":"Quick Python 4: Sipping from a File (Open/Print Contents)","text":"<p>In this video, we take a sip out of a file - just a quick skim, printing out the contents. </p> <p>It's a great skill that we'll build on later. </p> <p></p> <p>Check out the source code here:</p> <p>https://github.com/stephengrice/education/tree/master/Quick_Python/04_Read_a_File</p> <p>If you need to install Python, we have you covered! Check out our Done in 90 Seconds series to get it installed FAST!</p>","tags":["python","tutorial"]},{"location":"quick-python-5/","title":"Quick Python 5: Writing Files","text":"<p>In this video, we cover writing to files and discuss \"write\" mode vs. \"append\" mode. </p> <p></p> <p>Link to code:</p> <p>https://github.com/stephengrice/education/tree/master/Quick_Python/05_Write_a_File</p>","tags":["python","tutorial"]},{"location":"quick-python-6/","title":"Quick Python 6: Our First Data Pipeline","text":"<p>In this video, we use standard input and output in Python to process data piped to us from other applications.</p> <p></p> <p>If you liked this video, check out the whole Quick Python series and be sure to sign up using the form below to get notified of new posts! Thanks for checking this one out.</p>","tags":["python","tutorial"]},{"location":"quick-python-7/","title":"Quick Python 7: Easy Web Request","text":"<p>In this video, we write our first web request.</p> <p></p> <p>If you liked this video, check out the whole Quick Python series and be sure to sign up using the form below to get notified of new posts! Thanks for checking this one out.</p>","tags":["python","tutorial"]},{"location":"boom-devlog-1/","title":"Boom Languages Dev Log 1","text":"<p>Picking up an old project from earlier this year and making a few additions.</p> <p></p> <p>If you'd like to try it out, visit https://boomlanguages.com.</p> <p>Unfortunately, I may have broken it by changing the server domain name, but stick around until 7/31 - that's when I'm aiming to push out a new (not-broken) update with some of the features you see here, and hopefully more.</p>","tags":["language"]},{"location":"boom-devlog-2/","title":"Boom Languages Dev Log 2","text":"<p>I just finished getting Version 2.0.0 on all app stores and the web. The main new feature is an \"article translation\" tool. It works, but as you'll see, it's pretty buggy.</p> <p></p> <p>If you'd like to try it out, visit https://boomlanguages.com.</p>","tags":["language"]},{"location":"boom-devlog-3/","title":"Boom Languages Dev Log 3","text":"<p>2.0.3 is out on stores and the big change is that the article translator tool is actually somewhat usable now. Also, users receive an email on signup! Not the most exciting changes, but it's progress.</p> <p></p> <p>If you'd like to try it out, visit https://boomlanguages.com.</p>","tags":["language"]},{"location":"boom-devlog-4/","title":"Boom Languages Dev Log 4","text":"<p>Version 2.2.2 brings some new changes since our last dev log.</p> <p></p> <p>Here's a summary of the changes:</p> <ol> <li>Code refactor</li> <li>Web landing page</li> <li>Articles list - done/in progress</li> <li>Article \"show\" page with info/actions to take</li> <li>Article translator improvements</li> <li>My Words</li> <li>Users list</li> <li>Activity Log</li> </ol> <p>In other news, pagekeysolutions.com has been redesigned and now includes links to everything we're working on.</p> <p>If you'd like to try out the app, visit boomlanguages.com.</p>","tags":["language"]},{"location":"quick-python-8/","title":"Quick Python 8: Virtual Environments","text":"<p>In this video, we learn how to create, manage, and remove Python Virtual Environments.</p> <p></p> <p>Here's a link to the source code.</p>","tags":["python","tutorial"]},{"location":"quick-python-8/#quick-tips","title":"Quick Tips","text":"","tags":["python","tutorial"]},{"location":"quick-python-8/#commands","title":"Commands","text":"<pre><code>python3 -m venv &lt;path&gt;\n</code></pre> <p>Creates a virutal environment located at <code>&lt;path&gt;</code></p> <pre><code>source &lt;path&gt;/bin/activate\n</code></pre> <p>Activates a virtual environment</p> <pre><code>deactivate\n</code></pre> <p>Deactivates a virutal environment</p>","tags":["python","tutorial"]},{"location":"quick-python-8/#bonus-bash-alias-for-quick-switching","title":"Bonus: Bash Alias for Quick Switching","text":"<p>Paste this function into your <code>~/.bashrc</code> or <code>~/.bash_aliases</code> file and restart your shell. It assumes you keep your virtual environments in the <code>~/venv</code> folder.</p> <pre><code>venv() {\n    source ~/venv/$1/bin/activate\n}\n</code></pre> <p>Switch to the venv with <code>venv &lt;NAME&gt;</code> and get out of it by typing <code>deactivate</code>.</p> <p>Example:</p> <pre><code>python3 -m venv ~/venv/my-env\nvenv my-env\n# do stuff in your environment. When done:\ndeactivate\n</code></pre> <p>If you liked this video, check out the whole Quick Python series and be sure to sign up using the form below to get notified of new posts! Thanks for checking this one out.</p>","tags":["python","tutorial"]},{"location":"boom-1.0/","title":"Boom! A new app is born.","text":"The Boom! Languages logo, created by Nick Fulfaro (@fulfaroanimations). <p>About four months ago, in late November 2020, I finally took action on an ambitious plan that I've had in the back of my head for quite a while. I wanted to build a language-learning app that was just a bit different than the others I've tried.</p> <p>As with any project, it seemed easy... until I got started!</p> <p>I created a plan, designed the app, and implemented it as best I could. While it has fewer features than I originally thought I'd be able to get done, the ones that it does have seem to work well so far (in spite of a few bugs people found immediately after it was published).</p>","tags":["design","flutter","language"]},{"location":"boom-1.0/#try-it-now","title":"Try it now!","text":"<p>Boom! is available on Android and iOS. You can give it a try yourself!</p> <p>So far, it's a really simple concept. Just create an account, select a language, and start taking quizzes! You'll get points for each lesson, and a streak if you maintain it for more than one day. As a bonus, you can add your friends and check in on their progress, too.</p> <p>Try Boom</p> <p>The language data used for all of the quizzes is intentionally publicly available (more on this later). You can find links to this data inside the app, or check it out here (NOTE: link is dead so I removed it). If you know one of the languages we're teaching (just Spanish, Russian, and French for now) and want to go above and beyond, feel free to create an issue and merge request on GitLab to add more lessons. I hope to add more soon, so if you have ideas, let me know!</p> <p>For people who aren't familiar with how GitLab works, rest assured that I've realized the error in my ways - Git is not the best way for us all to collaborate. I'm working on an easier way to do this, so stay tuned!</p> <p></p> The Boom! Dashboard in all its glory","tags":["design","flutter","language"]},{"location":"boom-1.0/#the-why","title":"The Why","text":"<p>You can't browse the internet, watch TV, or listen to the radio anymore without hearing ads about language learning apps. Every company with a language app wants to convince you that their solution is the one that's different, the one that's finally going to make you fluent in your target language. Just come use their product and it will all work out!</p> <p>I've been interested in learning languages as a hobby for quite a while, so I've tried my share of language learning software. I can remember the excitement I felt when I first got my hands on a copy of Rosetta Stone for Spanish from the local library back in sixth grade. It was a great start, but soon enough, I started looking around on the internet for more resources. I eventually started reading articles from people who had done what I wanted to do: become fluent in a foreign language of their choice.</p> <p>As it turns out, one of the first things that they tell you on blogs and YouTube videos about language learning is that you can't do just one thing to learn a language; you have to try a ton of techniques, gleaning bits and pieces from the varied things you do along the way. The more distinct tactics that you try out, the better you'll learn.</p> <p>In other words, these companies aren't being entirely honest when they sell their solution as the one thing that you need to learn a language.</p> <p>Let's not forget how much time has passed since these products were first released. I'm not going to call out any specific product or company - I'll leave it as an exercise to you. Think of a language learning product, any of them. Now ask yourself a few questions.</p> <p>How long has it been around? Good. Now, what's the main feature of the product? How does it keep you engaged? When was the last time they added something radically new to switch up your learning, keep you engaged, and add another facet to your language repertoire?</p> <p>The answer to the last question is key. Chances are, it's been a while.</p> <p>The stagnation I have observed is certainly understandable; I can't blame these companies for doing one thing and doing it well, nor can I knock them for making no more than tiny, incremental improvements for as long as it remains profitable.</p> <p>But on the other hand, I see a need that is only being partially met. Language learners are forced to use more than one solution if they want to be successful. Those who realize this will try many things and, most likely, meet their goals - others may simply wonder in frustration why they're not progressing.</p> <p>So here's the opportunity: if existing language companies are willing to remain comfortable and do one thing well, someone like me may be able to fill in the gaps for people who want more.</p>","tags":["design","flutter","language"]},{"location":"boom-1.0/#the-what-my-solution","title":"The What (My Solution)","text":"<p>Let's take a step back. That was sounding pretty ambitious, even arrogant, for someone who doesn't even seem to have a plan yet. What's going to make this app so great?</p> <p>To be fair, there are many, many obstacles that could get in the way of a single person trying to compete with well-established, well-funded companies that have existed for decades. But who knows? I may gain some allies along the way to help out. (Hit me up - steve@pagekey.io)</p> <p>If all goes well and I can get everything working, I would like Boom! to present engaging quizzes that randomly generate content to make people use the vocabulary and grammar they learn in new ways. I want this content to be publicly available, and publicly editable (though there will be a review process before edits are merged).</p> <p>The idea is that if everyone can edit and freely download the language learning content, it will become a shared resource better than anything that was developed privately. Plus, there's no need for the next person to start from scratch. If someone were to use that same data to create a sleeker application that teaches people more efficiently, we all win.</p> <p>I have a growing list of other features that will tie into the same system to provide novelty and (eventually) some semblance of virtual social interaction, keeping people on their toes and having fun as they learn. I haven't developed these ideas enough to share them yet, but hopefully I'll be able to add them to the app soon.</p> <p>For now, my main focus has been getting the first iteration of reliable, engaging language quizzes up-and-running on people's phones. I'll share a bit of the process I followed in hopes that you'll glean something useful from it.</p>","tags":["design","flutter","language"]},{"location":"boom-1.0/#the-how","title":"The How","text":"<p>I'd divide what I've done up to this point into management and technical discussions.</p>","tags":["design","flutter","language"]},{"location":"boom-1.0/#project-and-time-management","title":"Project and Time Management","text":"<p>Though it's something I once gave little thought to, I've come to realize that project management, design, and organization are some of the most important considerations when you want to make something happen.</p> <p>Thanks to the advice of my friend Daniela Gil, who is a management maven, I was able to plan almost all of the activities that I needed to complete for this app before starting any work, including tasks like getting the server up, registering the app in the store, and even creating my own business to more easily manage the financial side of things. Of course, the central task was writing the code, which I did my best to break down as well.</p> <p>Using a Work Breakdown Structure (WBS) from the very start had two benefits: first, it gave me motivation, because I could see a clear path to what I wanted to do, and second, it kept me from getting distracted, going down the rabbit hole, and ultimately not finishing the project.</p>","tags":["design","flutter","language"]},{"location":"boom-1.0/#technical-design","title":"Technical Design","text":"<p>Another helpful resource that I stumbled upon just-in-time was my Foundations of Software Engineering course that I'm taking at the Whiting School of Engineering at Johns Hopkins University. The Foundations of Software Engineering course gave me all the tools that I needed to think through writing an application, from start to finish. I'm thankful for my professors, Sam Schappelle, Joe Demasco, and Jeff Garonzik, for providing an informative, practical course.</p> <p>The course stressed the need to have discipline and avoid the \"code and fix\" design pattern. I was determined to embody this value, aiming to create a design that was as detailed as possible before writing any code!</p> <p></p> Becoming clear on the Use Cases was one of the first design steps I took. It informed nearly all activities that followed. Looks like I got distracted while writing the post-condition, though. <p>It paid off, too. The upfront design gave me clarity and saved me many hours (of which I have precious few to spare for this type of project). Instead of coding in circles without really thinking about what I was doing, the design facilitated a focused, modular implementation. It was kind of like I was my own boss, at first considering only the high-level design of the app without touching any code. It was this restraint that kept my code-junky fingers from digging this project into a hole it would never get out of.</p> <p>Many of essential questions were answered using tactics cleaned from my Software Engineering class (and a few systems engineering courses). Especially handy were creating the context diagram, carefully defining use cases, making wireframes, and constructing a data model.</p> <p></p> An early attempt at an all-inclusive Context Diagram. I never got around to letting people login with Google or Facebook. I also switched from GitHub to GitLab.","tags":["design","flutter","language"]},{"location":"boom-1.0/#user-interface","title":"User Interface","text":"<p>From the start, I knew that I needed a client and a server to get this job done. I already had a tech stack in mind, too, thanks to a few prototypes I threw together for fun. My plan was to use Flutter for the frontend, and Ruby on Rails for the backend.</p> <p>In case you haven't heard of it, Flutter is an open-source UI framework developed by Google that allows you to write code once and publish it on iOS, Android, Web, and even Desktop! (though Desktop is still in beta.)</p> <p>It uses a brand new programming language called Dart that was specially built to work well with Flutter (as far as I know). It's a lot like Java, but with a lot less annoying boilerplate code to write, and with much better support for asynchronous programming. I was a bit jarred at first by the use of Futures, async functions, and their anonymous function syntax (one-liner is <code>() =&gt; Statement()</code>, multi-liner is <code>() =&gt; {&lt;block here&gt;}</code>). Once I got used to it, though, everything started to fit together very, very nicely.</p> <p>I've had some exposure to asynchronous programming through tinkering with Node.js, but I recall leaving it behind in frustration when I noticed that all of my programs tended to turn into an endless pit of nested functions as complexity increased.</p> <p>I didn't really have that problem with Dart. Maybe it's because of the strong typing and similarity to Java, or maybe it's just because I stuck with it a bit longer and read up more on the way to do things properly (instead of forging ahead and trying to do things my way, which may have been part of the problem with my Node.js adventures \ud83d\ude42).</p> <p>I want to give a shout-out to Nick Clark, who introduced me to Flutter for the first time last summer when we were on a project at work together. Though we didn't end up using Flutter in our final product, it gave me some initial exposure to it, which allowed me to dive much deeper in this project. Nick, you must really have your ear to the ground, because this was an excellent find.</p> <p></p> Each screen in the app began as a wireframe (left). Through many small tweaks, these rough ideas morphed into an actual user interface (right).","tags":["design","flutter","language"]},{"location":"boom-1.0/#backend","title":"Backend","text":"<p>I used an API-only Ruby-on-Rails application for the backend. I hosted it on my own server in the cloud.</p> <p>The upfront design of use cases allowed me to use Test Driven Development (TDD) for almost all of the code I wrote on the backend.</p> <p>I was very strict at first, making myself write the failing test before actually touching any implementation code. As I neared the end, I loosened up a bit, skipping a few functions here and there that were particularly hard to test. For the most part though, any code changes began by writing or changing tests. This gave me much more confidence when making any sorts of changes, and seemed to result in a fairly robust result.</p> <p>From what I read online, using a strongly typed language might have significantly cut down on the number of tests that I needed to write. However, until they come up with Rails for Rust or something like that, I'm sticking with Rails because it works great.</p> <p></p> Nothing like testing your entire server-side with just 5 keystrokes!","tags":["design","flutter","language"]},{"location":"boom-1.0/#successes","title":"Successes","text":"<p>My biggest success so far for this project is that it is done, I shipped it, it's out the door! Too many of my past ideas have turned into messy prototypes that I shoved into a digital drawer, never again to see the light of day. And those are the times that I've actually gotten to the code-writing stage; I've had tons of app ideas that I never took action on.</p> <p>Overall, most of these projects were never finished due to lack of clarity, lack of interest, or getting stumped on some technical details. The upfront design of Boom! played a huge part in mitigating these issues.</p> <p>The first version of this app isn't particularly mind-blowing, but it does work. For now, that's good enough!</p> <p></p> The only thing that's missing is a way to access it from a browser. Coming soon!","tags":["design","flutter","language"]},{"location":"boom-1.0/#lessons-learned","title":"Lessons Learned","text":"<p>It's a lot harder to reach back and remember the lessons learned when I haven't been keeping notes to that effect. So, the first lesson learned is to keep notes and write things up as you go!</p> <p>The second takeaway I had was to respect the non-technical details. If I had a specific date to complete this app, I surely would have been derailed by the unplanned hours I had to spend making accounts, starting a business, and jumping through hoops for the Apple Developer program, among other things. There were many, many extra steps to these tasks that I didn't anticipate. Luckily, I was on a completely self-imposed schedule, so a few extra days getting the app to market didn't really cost anything.</p> <p>Design first pays off. As mentioned above, carefully considering the design upfront, before starting any coding, was a huge boon to getting this put together on time with only a few hiccups along the way.</p> <p>Git is for software developers. I originally thought that having everyone contribute to a single Git repository of language data was the perfect solution. You get line-by-line diffing, you can see exactly who contributed what and exactly when they did it, and you can use branches to work on lessons that aren't ready for the main app yet. However, Git is not easy to jump into if you have no experience with it. While the Git workflow for managing source code works incredibly well, it's not a great tool for allowing people who don't code to collaborate. Down the line, I'd like to scrap the current Git-based contribution design in favor of a fully integrated in-app workflow.</p> <p>I'm still disappointed, though, because I keep wanting to apply Git's effortless beauty to new things. It sounded like a great idea to use Git to manage the open-source language data, but for any linguists with no software experience who may want to contribute, it's a pretty steep learning curve.</p> <p>Currently, the language data is written by hand (using a code editor) into a single JSON file, <code>dataset.json</code>, and there is code on the Rails side to ingest this file and insert the appropriate records into the DB to match the JSON file's structure. The downsides of this became clear immediately: the JSON file is hard to edit, it's easy to make mistakes, and worst, I have to dump the previous \"language data set\" in favor of the new one, even if it's a tiny change. Currently, this clears any \"memory\" the app had of which lessons you completed, which is a huge design flaw. I could get around this by including an ID for everything in <code>dataset.json</code>, but that would make it even harder to edit.</p> <p>In the future, I want to go in the other direction; the app will store the most up-to-date copy of all language data in the database, and the data will remain publicly available by way of an Export-As feature. This is more flexible - download it as JSON, sure, but maybe you prefer CSV, or even something wacky like PowerPoint! Anything is possible at that point, since all of the data is readily accessible in the database, where it can be easily ingested by scripts. It will also be fairly easy to back up the data - I better not forget that part!</p>","tags":["design","flutter","language"]},{"location":"boom-1.0/#next-steps","title":"Next Steps","text":"<p>I am going to take a break from this project. I'm in grad school, and there's not much time to work on things like this during the semester. I may pick it up again during the summer.</p> <p>As I mentioned above, the next major update I'll focus on will be to add a way to contribute new language data from within the app.</p> <p>A small change I may make soon is to add a little \"alpha\" tag to the logo, to indicate that the app is in a very early stage of development and may have issues (or just lack features).</p> <p>Monetization would be nice, but realistically, I'd probably need thousands of users to make it worthwhile, which I don't think will be possible until it's a bit higher quality. For now, I'd rather focus on improving what I already have.</p> <p>Transparency about monetization and how it is done would be a great goal. It's well known that \"if it's free, you're the product.\" But the application that is making money off of showing you ads or something of that nature rarely explicitly spells it out.</p> <p>I feel that if something involves using people's attention, which is an increasingly valuable, and scarce, resource in our world, then we should make it abundantly clear what is happening. Apps that use addictive techniques to waste our time viewing ads for their profit are potentially stealing moments from people's lives that could be used to interact with people that they love or to advance society with meaningful work. It's not necessarily bad if the app serves a good purpose, such as education, but we still have to acknowledge that we have something to gain from drawing people in.</p> <p>That being said, maybe I'm a bit of a hypocrite for engaging in such a system, but at least I'm being open about it! Do you have ideas for better business models for the internet? Let me know!</p>","tags":["design","flutter","language"]},{"location":"boom-1.0/#get-involved","title":"Get Involved","text":"<p>You made it all the way to the end? Thanks for that!</p> <p>Please download the app and try it out if you haven't already. I am very open to feedback and ideas for new features. Just send your thoughts over to info@pagekeysolutions.com.</p> <p>Also, if you want to read more tech articles like this, consider subscribing to our Line by Line Code mailing list using the form below this article.</p>","tags":["design","flutter","language"]},{"location":"getting-started-scikit-learn/","title":"How to Get Up and Running with Scikit-Learn","text":"<p>Machine learning is fascinating, but it can be overwhelming if you're just getting started. Luckily, scikit-learn is an open-source machine learning library that allows you to jump in and gain hands-on experience immediately, harnessing the power of almost 2,000 contributors without reading a single scientific paper.</p> <p>If this sounds interesting to you, read on. In this article, we're going to learn what scikit-learn is, how to install it, and how to run it using Python and Jupyter Notebooks.</p> <p>Photo by Meruyert Gonullu</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#what-is-scikit-learn","title":"What is scikit-learn?","text":"<p>In 2007, David Cournapeau started a project during Google's Summer of Code that would have an impact for years to come. His project eventually morphed into scikit-learn, a collection of open-source machine learning libraries used by countless people across the globe.</p> <p>Thanks to the hard work of Cournapeau, along with 1,952 other contributors (at the time of writing), we now have a library that drastically lowers the barrier of entry for learning the basics of machine learning and beginning to harness its power in our careers, or even our everyday lives.</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#core-installation","title":"Core Installation","text":"","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#1-install-python","title":"1) Install Python","text":"<p>You'll need Python installed before you can use scikit-learn. There are plenty of guides online that will tell you how to install Python, but it's a very straightforward process anyway. You can probably just go to the Python Downloads page and figure it out yourself.</p> <p>If you'd like to get it done in 90 seconds or less, I made videos for just that purpose! Click here to get started on Windows, or here if you use Ubuntu.</p> <p>Note that the instructions below are tailored to Linux users. You may need to make a few tweaks to the shell commands to get them working on Mac/Windows, but it probably won't be anything wildly different.</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#2-create-a-virtual-environment","title":"2) Create a virtual environment","text":"<p>This step is technically optional, but it's good practice to use virtual environments based on what you're working on. This way, if you need one version of a package for one project, and a different version for another, you can just switch virtual environments instead of reinstalling everything every time you switch from working on one project to another.</p> <p>If you've never created a virtual environment before, you'll want to create a folder to hold all of them. I prefer to use the <code>venv</code> folder in my home directory, but feel free to change this if you' like to put them somewhere else.</p> <pre><code>cd ~\nmkdir venv\ncd venv\npython3 -m venv sklearn\n</code></pre> <p>This will create a new virtual environment named <code>sklearn</code>. Now that you've created it, you'll need to activate it. Remember to activate your virtual environment every time you want to use scikit-learn.</p> <pre><code>source ~/venv/sklearn/bin/activate\n</code></pre> <p>Your shell should now have \"<code>(sklearn)</code>\" at the beginning of each line in your terminal. If you want to quit the virtual environment at any point, you can just type <code>deactivate</code>.</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#3-install-the-scikit-learn-package","title":"3) Install the scikit-learn package","text":"<p>Installing scikit-learn is as simple as typing in a pip command:</p> <pre><code>pip install -U scikit-learn\n</code></pre>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#4-check-your-installation","title":"4) Check your installation","text":"<p>The scikit-learn website provides a few snippets to check if everything is working as expected. Copy-and-paste the one below to try it out yourself.</p> <pre><code>python -c \"import sklearn; sklearn.show_versions()\"\necho $?\n</code></pre> <p>You should see a lot of information printed about your <code>scikit-learn</code> installation and the system you're running on. If you get a <code>0</code> as output after <code>echo $?</code>, then it means the command exited successfully - you're good to go!</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#development-environment","title":"Development Environment","text":"<p>Almost as important as having the software installed is how will you use it? Getting your development environment situated can be the hardest part.</p> <p>There are an infinite number of ways that you can customize your development environment. For our purposes today, we'll focus on (1) using Python without any extra IDEs to help us out, and (2) how to use my preferred IDE, Visual Studio Code, which has plenty of helpful extensions to make our work with scikit-learn move more smoothly.</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#pure-python","title":"Pure Python","text":"<p>Working with scikit-learn in pure Python is always an option. It may not be the best for learning, because the only way to explain what's happening with each line is to add comments, which can get messy. It's also up to you to figure out how to download others' code and get it running. However, knowing how to set these things up will be required if you want to integrate machine learning into a real application that others can use.</p> <p>Using scikit-learn in this way doesn't require any additional software. You can open up a <code>test.py</code> file in your favorite text editor, <code>import sklearn</code>, and go to town! Then, just run the script with <code>python test.py</code>.</p> <p>If you want to get more advanced, you can distribute your package using a <code>setup.py</code> file and distutils, or get fancy with something like Poetry.</p> <p>If you're just getting started with learning or you're only interested in data analytics, then read on - the next option may be more your speed.</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>If you haven't tried them already, Jupyter Notebooks are an amazing way of presenting information and code. You're able to mix Markdown and interactive Python code blocks in a single document, allowing you to easily walk through code, executing a single block at a time with a clear understanding of what is happening every step of the way.</p> <p>Getting started with Jupyter is as easy as typing the following:</p> <pre><code>pip install notebook\njupyter notebook\n</code></pre> <p>This will install the required pip package and start a Jupyter Notebook server. This server will be accessible in your web browser, allowing you to create, view, and edit <code>.ipynb</code> files. <code>ipynb</code> stands for Interactive Python Notebook, which is so named because Jupyter Notebooks was previously named IPython Notebooks [1].</p> <p>As an example, here is the output when I run <code>jupyter notebook</code>:</p> <pre><code> [I 16:31:31.879 NotebookApp] Serving notebooks from local directory: /home/steve\n [I 16:31:31.882 NotebookApp] Jupyter Notebook 6.1.4 is running at:\n [I 16:31:31.882 NotebookApp] http://localhost:8888/?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n [I 16:31:31.883 NotebookApp]  or http://127.0.0.1:8888/?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n [I 16:31:31.883 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).\n</code></pre> <p>As you can see, the server is running at <code>http://localhost:8888</code>. To start using Jupyter, simply open this link in a web browser.</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#vscode-extension","title":"VSCode Extension","text":"<p>I'll briefly note that if you already use Visual Studio Code, there is a Jupyter Notebooks extension that you can use to edit and run <code>.ipynb</code> notebooks right in your IDE. No need to leave, start a server, open a browser, any of that - it's all integrated into a single window. I guess that's why they call it an integrated development environment!</p> <p>I've tried both approaches, and I find this one to be much easier. But it's up to you to choose your favorite!</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#next-steps","title":"Next Steps","text":"<p>With any luck, you've just installed scikit-learn (and maybe Jupyter Notebooks too). Your computer should be revved up and ready to roll with some machine learning! Stay tuned for more tutorials like this one that will build on this knowledge.</p>","tags":["machine-learning"]},{"location":"getting-started-scikit-learn/#references","title":"References","text":"<p>[1] https://jupyter.org/about</p>","tags":["machine-learning"]},{"location":"linear-regression/","title":"Snap the Line! Understanding Linear Regression and Scikit-Learn","text":"<p>Where do we start with something as complex as scikit-learn? At the beginning, of course!</p> <p>The Linear Regression module in scikit-learn provides an excellent first step into the world of machine learning. Rather than having to read a 90 page paper, we can instead make use of the knowledge that we gained in our stats class to form a model that will make some predictions for us.</p> <p>If this sounds like a lot, don\u2019t worry. We\u2019ll briefly review the math concepts you need to know to fully understand what\u2019s going on, and also touch on an example with real-world data that will put things in perspective.</p> <p>Photo by NOHK</p>","tags":["machine-learning"]},{"location":"linear-regression/#disclaimer-and-sources","title":"Disclaimer and Sources","text":"<p>I am simultaneously learning and teaching this topic. I've been watching various videos across the web to fill in my own personal knowledge gaps in statistics. The article below is my attempt to explain what I've learned so far. If you're like me, you may want to try to figure out the answers yourself before reading my solution. To follow the same path that I did, check the sources at the end of this article. Each link contains some information that I cited somewhere in this article.</p>","tags":["machine-learning"]},{"location":"linear-regression/#a-real-world-example","title":"A Real World Example","text":"<p>Let's start with the problem that we're trying to solve, and then we can work our way back to a solution.</p> <p>Khan Academy [1] provides what may be the simplest problem we could attempt to solve with linear regression. Suppose you collect the height and weight of many individuals in your hometown and would like to find the relation between height and weight. To do so, you can create a scatter plot by plotting height along the x-axis and weight along the y-axis. In doing so, we are assuming that height is the independent variable and weight is the dependent variable.</p> <p>Looking at a scatter plot, we can come up with a line ourselves. Just hold your finger up to the graph and you can approximate a \"line of best fit.\" But this is machine learning, not people learning, so we'll need to automate the process of finding that fit line somehow.</p> <p>To do so, we'll need to think about how the data would relate to the fit line and apply some statistics that we'll learn in the next section.</p>","tags":["machine-learning"]},{"location":"linear-regression/#the-math","title":"The Math","text":"","tags":["machine-learning"]},{"location":"linear-regression/#population-vs-sample-statistics","title":"Population vs. Sample Statistics","text":"<p>In statistics, a population contains all members of a specific group, whereas a sample consists of a subset of that group [8]. For example, if you're trying to draw conclusions about people living in the United States, the population you're working with will be upwards of 300 million people. This makes it obvious why we would want to work with samples - there's no way you'll be able to gather reasonable, accurate data for 300 million people! Instead, you need to sample the population of 300 million to get a subset of people that represent the larger group.</p> <p>It seems in the world of statistics that you often have a choice between using formulas for the population or for the sample. In our case, we'll pretty much always be using the formula for sample. I believe I know why this is (though I could be wrong): We're working to form a linear regression model based on training data (which is a sample). Then we apply our model to other members of the population that were not part of the training data set.</p> <p>If we used every single member of the population as training data, then we'd just be calculating it outright, wouldn't we? There would be nothing left to use the model on after training! For this reason, it makes sense to me that we're using the formulas for sample rather than for population.</p>","tags":["machine-learning"]},{"location":"linear-regression/#residuals-and-error","title":"Residuals and Error","text":"<p>In the context of the last problem, we are trying to find a line that most closely matches the dataset. Before we can come up with an entire continuous line to represent the dataset, we first have to figure out how to determine whether a single data point is any good or not. To do so, we'll use the concept of a residual.</p>","tags":["machine-learning"]},{"location":"linear-regression/#whats-a-residual","title":"What's a Residual?","text":"<p>A residual is \"the difference between the observed value of the dependent variable (\\(y\\)) and the predicted value (\\(\\hat{y}\\)) is called the residual (\\(e\\))\" [2]. As an equation, that would be:</p> \\[ \\large e=y-\\hat{y} \\] <p>Notice that we use \\(\\hat{y}\\) (prounounced \"y hat\") to represent our predicted value. All in all, the goal of linear regression is to find an equation for \\(\\hat{y}\\). First though, let's use the above equation to find the residual of a real-world example.</p> <p>Consider someone who is 5'8 and weighs 160 pounds. When all's said and done, we'll have an equation where we plug in the x-value, 5'8, and get a weight as a result. If the result is 170 pounds, then we have a residual of 160-170=-10 pounds. In math terms, \\(y=160\\) and \\(\\hat{y}=170\\), meaning that residual \\(e=-10\\) for this particular point.</p> <p>Another example is someone who is 6'0 and 200 lbs. If our model predicted that they would weight 190, the residual e=200-190=10.</p>","tags":["machine-learning"]},{"location":"linear-regression/#how-is-residual-different-from-error","title":"How is residual different from error?","text":"<p>Since the variable used for residual is \\(e\\), you may think that it's the same thing as error. It's similar, but not quite the same. As it turns out, the residual is the exact difference between the actual and predicted value for a given sample, as we've already seen; the error is the same thing, but for an entire population [3][4]. This means that the error can be hard or impossible to calculate exactly, so it's usually just theoretical.</p>","tags":["machine-learning"]},{"location":"linear-regression/#understanding-correlation-coefficients","title":"Understanding Correlation Coefficients","text":"<p>Another key part of calculating the regression line is to correlation coefficients. Khan Academy concisely summarizes the concept: \"Correlation coefficients are trying to measure how well a linear model can describe the relationship between two variables\" (emphasis mine) [5]. See [5] for a video to build intuition, so that you can match the given correlation coefficient to a dataset based on how well it is correlated and whether the correlation is positive or negative.</p> <p>The ability to calculate a correlation coefficient \\(r\\) will play a key role in determining the slope \\(m\\) of our regression line \\(\\hat{y}\\).</p> <p>In order to actually calculate the correlation coefficient, we'll need two more concepts in our toolkit: sample mean and standard deviation.</p>","tags":["machine-learning"]},{"location":"linear-regression/#sample-mean","title":"Sample Mean","text":"<p>The sample mean is just the mean, or average, of a given set of samples. Because our model will be bivariate, involving two variables, we'll calculate the sample mean for both x, the independent variable, and y, the dependent variable.</p> <p>Calculating the sample mean is as easy as adding up all the values and dividing by the total number of values, just like any other average. Mathematically, it would be</p> \\[ \\large \\bar{x}=\\frac{\\sum_{x \\in X}{x}}{|X|} \\] <p>for all points x in the domain X and </p> \\[ \\large \\bar{x}=\\frac{\\sum_{x \\in X}{x}}{|X|} \\] <p>for points y in codomain Y.</p>","tags":["machine-learning"]},{"location":"linear-regression/#standard-deviation","title":"Standard Deviation","text":"<p>The standard deviation of a set of number is just a measure of how spread out the numbers are [6]. To calculate it, you take the square root of the variance. The variance is the average of squared distances from the mean. In math, this would be:</p> \\[ \\large s=\\sqrt{\\frac{\\sum_{i=1}^{N}{(x_i-\\bar{x})^2}}{N-1}} \\] <p>Note that you use Greek sigma (\\(\\sigma\\)) to represent population standard deviation, which is when you are calculating for all possible points you could be interested in. However, in our case, we only have some of the data (training data), so we need the sample standard deviation, represented with letter \\(s\\). The only difference in the calculation is that we divide by \\(n-1\\) instead of by \\(n\\) when calculating the average of squared distances from the mean (the variance).</p>","tags":["machine-learning"]},{"location":"linear-regression/#z-scores","title":"z-scores","text":"<p>The z-score, or \"standard score,\" tells you how many standard deviations above or below the population mean a given sample is [7]. This number will give you an idea of how far off that data point is from the mean. To calculate the z-score, we use this formula:</p> \\[ \\large z=\\frac{x_i-\\bar{x}}{s} \\] <p>In the above, \\(z\\) represents the final z-score, while \\(x_i\\) is the sample, \\(\\bar{x}\\) is the sample mean, and of course \\(s\\) is the sample standard deviation.</p>","tags":["machine-learning"]},{"location":"linear-regression/#calculating-correlation-coefficients","title":"Calculating Correlation Coefficients","text":"<p>Given the sample mean and sample standard deviation, the correlation coefficient can be calculated using the following formula:</p> \\[ \\large r=\\frac{1}{n-1}\\sum(\\frac{x_i-\\bar{x}}{s_x})(\\frac{y_i-\\bar{y}}{s_y}) \\] <p>There are three parts to this. In the first part, we have \\(\\frac{1}{n-1}\\), which is a number that will get smaller as more points are added. We are multiplying this by a sum of all points, so as more points are added, each individual point affects the outcome less.</p> <p>What about the summation? It looks complicated at first, but you're really just doing something for every sample, or (x, y) point, in your data set. Notice that the first term, \\(\\frac{x_i-\\bar{x}}{s_x}\\), is actually just the z-score for x, or the residual for x divided by the standard deviation for x. The same is the case in the next term, except it's for y.</p> <p>So this means that we multiply the z-score of each variable, x and y, together for every point, and then add all of these values together. This is scaled by our first term, which keeps r from getting excessively large or small. We know that r will always be between 1 and negative 1 thanks to that initial term.</p>","tags":["machine-learning"]},{"location":"linear-regression/#ordinary-least-squares","title":"Ordinary Least Squares","text":"<p>Remember when we calculated an example residual of -10? That's great for one point, but how to we get a feel for how all of the points fit our line?</p> <p>One way would be to sum all of the residuals. However, this won't work, because a large negative residual, say -1,000, could be added to a large positive residual, 1,000, and you'd end up with a difference of 0. That makes no sense - if the points are off by a thousand, it's not a great line!</p> <p>One thought could be to use <code>math.abs</code> to take the absolute value of each point. However, there's an easier way. How about squaring the numbers? That takes care of the sign, and as an added bonus, makes the numbers much larger, which further highlights the extend to which they differ from the line.</p> <p>Credit to Khan for this explanation, building this up step-by-step.</p>","tags":["machine-learning"]},{"location":"linear-regression/#the-fun-part-using-scikit-learn","title":"The Fun Part - Using scikit-learn","text":"<p>Now that we've put all that effort into learning the math behind it, let's sit back and let scikit-learn do it all for us!</p> <p>We'll start out by using the Diabetes dataset, one of several \"Toy Datasets\" built into scikit-learn. This way, we don't have to worry about doing any preprocessing, which is the sometimes tedious process of getting data into the right format for our algorithm to ingest. Instead, we just call the handy-dandy <code>load_diabetes</code> method and wham! We've got X and Y samples loaded up into variables.</p> <p>Here's the code to load all of the samples:</p> <pre><code>from sklearn.datasets import load_diabetes\nX, y = load_diabetes(return_X_y=True)\n</code></pre> <p>The dataset itself consists of data for 442 diabetes patients. There are 10 predictive variable columns and the 11th column indicates the extent to which the disease progressed in the last year. Our goal is to use these predictive variables to form a model, which in this case takes the form of a regression line, so that we can predict someone's disease progression based on one or more of these variables.</p> <p>If we want to use this to do real lienar regression, things get a bit more complicated. We'll have to split the data into training data and test data. This way, we'll have a way to check how well the model we come up with actually reflects the remaining real-world data that we have to test with.</p> <p>I would recommend trying out the example provided by scikit-learn, which does just this and allows you to form a prediction based on one of the features in this dataset.</p>","tags":["machine-learning"]},{"location":"linear-regression/#references","title":"References","text":"<p>[1] https://www.khanacademy.org/math/statistics-probability/describing-relationships-quantitative-data/regression-library/v/introduction-to-residuals-and-least-squares-regression</p> <p>[2] https://www.khanacademy.org/math/statistics-probability/describing-relationships-quantitative-data/regression-library/v/introduction-to-residuals-and-least-squares-regression</p> <p>[3] https://www.khanacademy.org/math/statistics-probability/describing-relationships-quantitative-data/regression-library/a/introduction-to-residuals</p> <p>[4] http://www.askanalytics.in/2015/09/difference-between-error-and-residual.html</p> <p>[5] https://www.khanacademy.org/math/statistics-probability/describing-relationships-quantitative-data/scatterplots-and-correlation/v/correlation-coefficient-intuition-examples</p> <p>[6] https://www.mathsisfun.com/data/standard-deviation.html</p> <p>[7] https://www.statisticshowto.com/probability-and-statistics/z-score/</p> <p>[8] https://statsandr.com/blog/what-is-the-difference-between-population-and-sample/</p> <p>[9] https://scikit-learn.org/stable/datasets/toy_dataset.html#diabetes-dataset</p> <p>[10] http://scikit-learn.org/stable/auto_examples/linear_model/plot_ols.html</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/","title":"The Nuanced Truth: Exploring Differences Between ML and AI","text":"<p>Everyone has heard of machine learning and artificial intelligence at this point, right?</p> <p>There is an insane amount of buzz around ML and AI, and for good reason. The techniques available to us today allow for mind-blowing applications that would have seemed like magic just a few years ago.</p> <p>I've researched all that I can across the web, and I've come up with an analogy: Machine learning is a kind of tool that we can use to make our computers do what we want. Every time you learn a new machine learning technique, you add another tool to you toolbelt.</p> <p>When you have an assortment of tools at your disposal, you might try your hand at building something rather complex with them, something that requires all of those tools to work together in unison. It's likely that you'd try to build something that exhibits artificial intelligence. In this way, machine learning techniques are the tools, artificial intelligence is the house, and you are the carpenter!</p> <p>Let's dive in a bit deeper and see if this analogy holds true.</p> <p>Photo by Alex Knight</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#artificial-intelligence","title":"Artificial Intelligence","text":"<p>Artificial Intelligence is the top of the hierarchy, encompassing all other topics that we'll discuss today. The broad definition provided by IBM is \"any human-like intelligence exhibited by a computer, robot, or other machine\" [1]. This encompassing a lot, from the facial recognition software your phone uses to make you look like a cat, to expert systems that help doctors and surgeons make more effective decisions [2].</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#weak-ai-vs-strong-ai","title":"Weak AI vs. Strong AI","text":"<p>Weak, or Narrow, Artificial Intelligence is an AI application that is \"trained and focused to perform specific tasks\" [1]. This is the technology that drives pretty much everything we see today, including Google Assistant, Siri, Alexa, and IBM's Watson (which won Jeopardy that one time - remember?). This is why \"weak\" is not necessarily the best way to describe it; there are plenty of things that have been accomplished with Weak/Narrow AI.</p> <p>Strong AI, or Artificial General Intelligence, is something that \"can solve many types or classes of problems and even choose the problems it wants to solve without human intervention\" [1]. There is still no real-world example of Strong AI - it's only a concept. There are plenty of science fiction examples though, but not all of them present a favorable view. Skynet, anyone?</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#machine-learning","title":"Machine Learning","text":"<p>IBM defines machine learning as software that is \"focused on building applications that learn from data and improve their accuracy over time without being programmed to do so\" [3]. This means that you can train your computer to make decisions without having to specify every single possible case with an <code>if/else</code> or <code>switch</code> statement. Imagine trying to find a way to tell your computer to recognize a cat based on pixels. Just getting one image right would take hundreds, or perhaps thousands, of statements, and then that would only work for a single image! Instead, machine learning enables pattern recognition so that you can train your computer to get the gist of what you're looking for, and then let it make the calls.</p> <p>Though closely related, ML and AI are distinct topics that must be considered and understood separately. Gary Sims from Android Authority sums it up quite well in his YouTube video on the topic [4]: Machine learning is a process by which a machine learns from its experience, and generally involves recognizing patterns and doing something useful with them. On the other hand, artificial intelligence involves creativity, abstract thinking, and analysis within a specific context. While achieving artificial intelligence will almost certainly require the use of ML techniques, it is clear that AI refers to a high-level concept of a computer's abilities, whereas ML generally describes techniques for pattern-matching and extracting specific insights from a dataset.</p> <p>So why is this so confusing? Gary hints at an answer: \"artificial intelligence\" tends to double as a marketing technique. When you hear a company claim that they use \"artificial intelligence\" without explaining how, they're usually trying to sell you something.</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#types-of-machine-learning","title":"Types of Machine Learning","text":"<p>The machine learning technique that you apply depends on what you're using it for. In particular, there are three main considerations [3]:</p> <ul> <li>Is your data labeled or unlabeled?</li> <li>How much data will be available?</li> <li>What type of problem are you trying to solve?</li> </ul> <p>Some algorithms can be used both for labeled and unlabeled data. For example, \"Nearest Neighbors\" is a broad category of algorithms. Scikit-learn, one of the most popular open-source libraries for machine learning, says that their <code>neighbors</code> package \"provides functionality for unsupervised and supervised neighbors-based learning methods\" [5].</p> <p>However, focusing on whether the data at hand is labeled provides a starting point for divvying up the algorithms into their most common uses.</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#supervised-learning-when-data-is-labeled","title":"Supervised Learning: When Data is Labeled","text":"<p>When labels are provided for data, it's like having the answers to the exam for all of your training data. We use these answers when teaching the model how to make decisions. This is referred to as supervised learning.</p> <p>A few examples of supervised learning include regression algorithms, decision trees, and instance-based algorithms.</p> <p>Linear and logistic regression algorithms are some of the simplest ML algorithms that we have. They are essentially trying to fit your training data to a curve, one that either looks something like <code>y=mx+b</code> or something involving logarithms. As long as your data can actually be modeled by these curves, it could be a great choice.</p> <p>Decision trees and instance-based algorithms are some other choices for supervised learning.</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#unsupervised-learning","title":"Unsupervised Learning","text":"<p>Unsupervised learning means that we just have the data, with no answers provided. It's up to the program to figure out how to categorize the data. Within this category, we typically find clustering algorithms, association algorithms, and neural networks[3].</p> <p>Clustering algorithms are aimed at forming groups of data points. They try to find some kind of similarity between points, then it will form a group containing those similar points.</p> <p>Association algorithms attempt to uncover how data points are related to one another [6]. Such algorithms can automatically find correlations that may not otherwise be obvious. This is the kind of algorithm that may find out that you're pregnant before you do based on your shopping list.</p> <p>Neural networks attempt to model the neurons in the human brain to process data in successive \"hidden layers\" of calculations. Depending on how many hidden layers are involved, the use of neural networks could be considered deep learning.</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#reinforcement-learning","title":"Reinforcement Learning","text":"<p>Reinforcement learning is similar to supervised learning, but instead of getting trained by sample data, it learns as it goes. This means that you may have to run the \"agent,\" or program acting on your behalf, through hundreds or even thousands of situations so that it can figure out what works best. Reinforcement learning defines ways to reward or penalize the agent's actions, and based on whether it is rewarded or punished, the agent learns to seek out the best path.</p> <p>This awesome video shows an example of reinforcement learning in action - someone trained their computer to play Super Mario!</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#conclusion","title":"Conclusion","text":"<p>So, what do you think? Would you agree that the key to building a useful artificial intelligence application involves applying specific ML applications? Is ML the toolkit that lets us build a \"house\" of AI?</p> <p>I hope you learned something new from this article about these topics. Please let me know if you have any thoughts on these topics (or corrections if I made any mistakes).</p> <p>If you're excited about these topics and want to get your hands dirty, check out my next post about how to install scikit-learn!</p>","tags":["machine-learning"]},{"location":"ml-vs-ai/#references","title":"References","text":"<p>[1] https://www.ibm.com/cloud/learn/what-is-artificial-intelligence</p> <p>[2] https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1307157/</p> <p>[3] https://www.ibm.com/cloud/learn/machine-learning</p> <p>[4] https://www.youtube.com/watch?v=whlODvf-SVk</p> <p>[5] https://scikit-learn.org/stable/modules/neighbors.html</p> <p>[6] https://www.kdnuggets.com/2016/04/association-rules-apriori-algorithm-tutorial.html</p>","tags":["machine-learning"]},{"location":"21-programming-terms-for-beginners/","title":"21 Programming Terms for Absolute Beginners","text":"<p>If you're just getting started in the world of programming, it can be hard to wrap your head around all of the technical terms that come flying your way. In this video, Eric walks us through what he's learned in his first few months of coding, breaking down the concepts in an easy-to-understand way.</p> <p></p> <p>Eric's GitHub: https://github.com/ericthomaseaton</p>","tags":["tutorial"]},{"location":"boom-devlog-5/","title":"Language Logging as the \"One Thing\" | Boom DevLog 5","text":"<p>I am starting a new take on an old project.</p> <p></p> <p>At boomlanguages.com, you can currently see the project I did in 2020-2021. I was determined to make this work, but the tech debt spun out of control and it became impossible to maintain. When this happened, I lost interest.</p> <p>Two things are different this time around - first, I'm starting a completely new codebase using React Native. Second, I'm focusing on exactly one feature first, one that I will be able to use every day, myself. Until I can get this right, no new features! The core needs to be there before I move onto the rest. The existing Boom Languages has a ton of features, but none of them are well-implemented or useful. While I learned a ton creating the Flutter/Rails version of Boom, I need a fresh start with a new perspective - and a lot more focus.</p> <p>Let's see how far this goes!</p>","tags":["javascript","language"]},{"location":"boom-devlog-6/","title":"React Native Redesign | Boom Dev Log 6","text":"<p>Let's take a look at the big plans for switching over the Boom Languages client from Flutter to React Native. It'll be a complete re-implementation, so it'll be a fair amount of work, but hopefully I can knock it out one tiny piece at at time.</p> <p></p> <p>You can try the current version of the Boom Languages app at https://boomlanguages.com. You can also find it on Android and iOS stores.</p>","tags":["javascript","language"]},{"location":"boom-devlog-7/","title":"Version, Registration Info in React Native | Boom Dev Log 7","text":"<p>In this video, we get our hands dirty and implement the \"version\" and \"registration info\" endpoints in the new React Native client for Boom Languages.</p> <p></p> <p>You can try the current version of the Boom Languages app at https://boomlanguages.com/. You can also find it on Android and iOS stores.</p>","tags":["javascript","language"]},{"location":"docker-101/","title":"Docker 101: Basics and Containerizing a Web App","text":"<p>Let's jump into how Docker works. We'll learn the absolute basics - the what, the why, and the how - and then we'll apply this knowledge to containerize a simple, real-world web application.</p> <p></p>","tags":["docker","tutorial"]},{"location":"docker-101/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Snazzy Intro</li> <li>0:36 Overview</li> <li>1:05 What is Docker?</li> <li>2:10 What We'll Be Able to Do</li> <li>2:22 Why Docker?</li> <li>3:34 How To Use Docker (Slides)</li> <li>4:31 Command-Line Docker</li> <li>9:07 Building Custom Images (slides)</li> <li>10:00 Building Custom Images (terminal/code)</li> <li>15:27 Containerizing a Flask App</li> <li>19:04 Outro</li> </ul>","tags":["docker","tutorial"]},{"location":"duobot-open-source/","title":"I spent dozens of hours to save 5 minutes on DuoLingo","text":"<p>I finally released the DuoBot source code! Thanks Zigfrid for asking.</p> <p></p> <p>View the original \"showoff\" post from a few years ago here.</p> <p>Check out our Docker 101 tutorial: here</p>","tags":["language","python"]},{"location":"ftp-1/","title":"Get your feet wet | First Time Programmer 1","text":"<p>Coding is not scary! It's really easy to get started.</p> <p>Send this video to anyone you know who wants to get started with programming, but doesn't know how.</p> <p></p>","tags":["javascript","tutorial"]},{"location":"ftp-1/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Coding is not scary</li> <li>1:24 Enter REPL.IT</li> <li>2:35 First line</li> <li>2:57 Break things (Errors)</li> <li>3:37 First Loop</li> <li>4:11 Make a design (Challenge)</li> <li>4:28 Recap</li> </ul>","tags":["javascript","tutorial"]},{"location":"ftp-1/#summary","title":"Summary","text":"<p>This video sets us up on the REPL.IT website and gets us to the point where we have an interactive Python terminal. In a little over two minutes, we see how to write our first line of code:</p> <pre><code>print(\"Hello world\")\n</code></pre> <p>Get used to this message - it's usually the first thing you do to break ground in a new programming language. Now that we know we can print something to the screen, let's try adding some more messages:</p> <pre><code>print(\"Hello world\")\nprint(\"Hello world\")\nprint(\"Hello world\")\nprint(\"Hello world\")\n</code></pre> <p>Copy-pasting is great and all, but there's a better way. The true power of code comes from our ability to automate mundane tasks like this in an efficient way. With the following loop, we can execute our first line of code 20 times:</p> <pre><code>for i in range(20):\n    print(\"Hello world\")\n</code></pre> <p>Notice how easy it would be to change the 20 to something larger or smaller. Just a few keystrokes and you can go from 20 to 100,000. Imagine how much time (and space in your computer's memory) it would take to copy and paste that line 100,00 times!</p> <p>To close, we'll make a little design to solidify what we've learned. This is a challenge for you - try to use the <code>print</code> statement to make something cool on the screen. As a bonus, see if you can incorporate a loop in your design. I'm not much of an artist, so what I came up with is pretty underwhelming:</p> <pre><code>print(\"  o  \")\nprint(\" ooo \")\nprint(\"ooooo\")\nprint(\" ooo \")\nprint(\"  o  \")\n</code></pre> <p>The Sims, anyone?</p> <p>Hope you enjoyed and learned something from this first lesson! Even if this was a piece of cake for you, consider sending it to someone who may benefit from a quick intro to coding - let's show people that it's not as hard as it sounds!</p>","tags":["javascript","tutorial"]},{"location":"ftp-2/","title":"New coders: Instantly apply concepts with JavaScript (FTP2)","text":"<p>In this video, we go through web programming for the absolute beginner and get our hands dirty with HTML, CSS, and JavaScript.</p> <p></p>","tags":["javascript","tutorial"]},{"location":"ftp-2/#quick-notes","title":"Quick Notes","text":"<ul> <li>Intro<ul> <li>If you're brand new to programming, make a website<ul> <li>You use websites every day</li> </ul> </li> </ul> </li> <li>Concepts<ul> <li>HTML, CSS, JS are all linked together - you learn them all at the same time</li> <li>Websites are trees<ul> <li>DOM: The logical tree representation of a website</li> </ul> </li> <li>HTML: The content - text, images, etc.</li> <li>CSS: How it looks, styling</li> <li>JavaScript: Behavior</li> </ul> </li> <li>Follow Along<ul> <li>Go to pagekey.io or any website</li> <li>Right click, press \"Inspect\" to open developer tools</li> </ul> </li> <li>Top: HTML<ul> <li>Can change content in any of the elements (hack the school website trick)</li> </ul> </li> <li>Middle: CSS<ul> <li>Can see each rule and the styles applied by that rule</li> <li>The dot in CSS selects elements with \"class=NAME\"<ul> <li>Example: <code>.myClass</code> selects elements such as <code>&lt;div class=\"myClass\"&gt;&lt;/div&gt;</code></li> </ul> </li> </ul> </li> <li>Bottom: JavaScript console<ul> <li><code>console.log(\"Hello World\")</code></li> <li>Get reference to footer:<ul> <li><code>var footer = document.querySelector(\".FooterClassName\")</code></li> </ul> </li> </ul> </li> </ul>","tags":["javascript","tutorial"]},{"location":"ftp-2/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro </li> <li>0:30 Concepts </li> <li>2:15 Follow Along: Open Dev Tools </li> <li>3:15 Hack the school website (HTML) </li> <li>3:42 Style Rules (CSS) </li> <li>4:35 Behavior (JavaScript) </li> <li>6:16 Outro</li> </ul>","tags":["javascript","tutorial"]},{"location":"ftp-3/","title":"VSCode, Emmet Coding, Serving Static Files | FTP3","text":"<p>In this video, we talk about VSCode, Emmet Coding, and Serving Static Files.</p> <p></p> <p>Yeah, that's it. No timestamps this week.</p>","tags":["tutorial"]},{"location":"ftp-4/","title":"Git: Your Foundation | FTP4","text":"<p>Git is the foundation to your advancement as a programming. Let's figure out how to use it.</p> <p></p>","tags":["javascript","tutorial"]},{"location":"ftp-5/","title":"Collaborating with Git | FTP5","text":"<p>In this video, we discuss how to collaborate with Git.</p> <p></p>","tags":["tutorial"]},{"location":"ftp-6/","title":"Using Other People's Code - NPM and Node | FTP6","text":"<p>In this video, we learn how we can build on code that others have written using NPM and Node.js.</p> <p></p>","tags":["javascript","tutorial"]},{"location":"ftp-7/","title":"Create a Simple API - Express.js | First Time Programmer","text":"<p>In this video, we write a simple API with Express.js.</p> <p></p>","tags":["javascript","tutorial"]},{"location":"kr-1/","title":"Can we build our own Kindle, with a twist? | KR1","text":"<p>Have you ever wanted to READ and LISTEN to a book at the same time? If so, watch on while I show you the pitch, plan, and design for KeyReader, a proposed app that gives you the option to listen and read the same book, switching between these two activities seamlessly.</p> <p></p>","tags":["design"]},{"location":"kr-1/#links","title":"Links","text":"<ul> <li>KeyReader repo: https://gitlab.com/pagekeytech/keyreader</li> <li>MR for this video: https://gitlab.com/pagekeytech/keyreader/-/merge_requests/1</li> <li>See repo README for link to slides</li> </ul>","tags":["design"]},{"location":"kr-1/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:21 The Pitch (Take Back Tech)</li> <li>1:30 The Story</li> <li>2:19 The Problem</li> <li>3:09 KeyReader to the Rescue</li> <li>4:31 The Plan</li> <li>4:35 MVP1: Text Only</li> <li>5:15 MVP2: Audiobook Reader</li> <li>6:26 Other Ideas</li> <li>7:05 Implementation Plan</li> <li>7:38 Approach</li> <li>8:24 Coding Video Format</li> <li>8:45 Issues Plan of Attack (MVP1)</li> <li>9:40 The Design</li> <li>9:51 System Architecture</li> <li>10:29 UI Flow / State Model</li> <li>11:16 Made with Mermaid</li> <li>11:31 Screens</li> <li>11:58 Components</li> <li>12:32 Listener/Reader Wireframes</li> <li>12:38 Long-Winded Outro</li> <li>13:03 Merging the MR</li> </ul>","tags":["design"]},{"location":"kr-2/","title":"Generating the Project and Adding Screens | KR2","text":"<p>In this video, we generate the React Native project for KeyReader and add placeholders for all of the screens we defined in the previous video.</p> <p></p> <p>See the merge request here: https://gitlab.com/pagekeytech/keyreader/-/merge_requests/2</p>","tags":["javascript"]},{"location":"kr-3/","title":"Eric Adds Components | KR3","text":"<p>In this video, Eric adds basic components to our KeyReader app.</p> <p></p> <p>MR: https://gitlab.com/pagekeytech/keyreader/-/merge_requests/3</p>","tags":["javascript"]},{"location":"onenote-to-markdown-python/","title":"Python Update - Convert OneNote to Markdown","text":"<p>The last post walked us through a PowerShell script to convert OneNote to Markdown. A lot of people (including me) ran into issues with that script, so this video introduces a Python version, which should be less buggy.</p> <p></p>","tags":["productivity","python"]},{"location":"onenote-to-markdown-python/#resources","title":"Resources","text":"<p>Source code: https://github.com/pagekeysolutions/onenote-to-markdown/</p> <p>Obsidian: https://obsidian.md/</p> <p>Table converter: https://jmalarcon.github.io/markdowntables/</p>","tags":["productivity","python"]},{"location":"onenote-to-markdown-python/#timestamps","title":"Timestamps","text":"<p>0:00 Intro</p> <p>0:30 How to run the script</p> <p>1:42 A few caveats</p> <p>2:00 How it works / code explanation</p>","tags":["productivity","python"]},{"location":"onenote-to-markdown/","title":"Convert OneNote to Markdown (and Obsidian.md)","text":"<p>Do you have all of your notes in OneNote? Want to move your notes out, but not sure where to start? In this video, we'll convert all of your OneNote notes to Markdown with an easy-to-use script. Then, you can open it in a different application, like Obsidian.</p> <p></p>","tags":["powershell","productivity"]},{"location":"onenote-to-markdown/#resources","title":"Resources","text":"<p>Source code: https://github.com/pagekeysolutions/onenote-to-markdown/</p> <p>Obsidian: https://obsidian.md/</p> <p>Table converter: https://jmalarcon.github.io/markdowntables/</p>","tags":["powershell","productivity"]},{"location":"onenote-to-markdown/#timestamps","title":"Timestamps","text":"<p>0:00 Intro - Why plaintext? What is Obsidian?</p> <p>1:08 The Problem: our notes are stuck in OneNote</p> <p>1:35 Required Software - Pandoc and Git</p> <p>1:56 Enable PowerShell Scripts</p> <p>2:28 Run the script!</p> <p>2:50 Open your notes in Obsidian</p> <p>3:35 How to fix tables with line breaks</p> <p>4:35 Outro - PRs welcome!</p>","tags":["powershell","productivity"]},{"location":"pagekey-fit-1/","title":"Coding a Workout App from Scratch - #1 Initial Setup","text":"<p>Let's code a workout app from scratch. Why? Watch the video and find out.</p> <p></p> <p>Source code is available at: https://github.com/pagekey/pfl</p>","tags":["flutter"]},{"location":"pagekey-fit-1/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 The idea and why bother?</li> <li>1:22 Today's progress</li> <li>3:36 Existing Python scripts/data</li> </ul>","tags":["flutter"]},{"location":"pagekey-fit-1/#summary","title":"Summary","text":"<p>Here's a quick recap on what I did to get this far. It's not much!</p> <ol> <li>Generate a new flutter project.</li> </ol> <pre><code>flutter create\n</code></pre> <ol> <li> <p>Update the application ID, which must be unique</p> <ul> <li>Ctl-Shift-F to search the entire project in Android Studio </li> <li>Find instances of <code>com.example</code></li> <li>Replace with <code>com.pagekeysolutions</code></li> </ul> </li> <li> <p>Start getting Google API set up</p> <ul> <li>I followed (part of) this article: https://betterprogramming.pub/the-minimum-guide-for-using-google-drive-api-with-flutter-9207e4cb05ba</li> <li>Most of the work for this video was setting up Firebase. Just follow this article for this.</li> <li>I was able to get \"Login with Google\" working on Android (though there were some warnings about it not being a verified app - we can worry about this later)</li> </ul> </li> <li> <p>I set up the repo, made it public, and made a video.</p> </li> </ol> <p>If you're trying to re-create my results exactly, note that I committed the \"Initial commit\" directly after running <code>flutter create</code>. Hopefully this makes my changes easier to follow.</p>","tags":["flutter"]},{"location":"getting-started-react/","title":"Getting Started with React (Create React App)","text":"<p>In this lesson, we learn about how to quickly get started with React (JavaScript framework) using Facebook's Create React App project generator.</p> <p></p>","tags":["javascript"]},{"location":"getting-started-react/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:48 Setup - nvm, npm, node</li> <li>1:47 Generate the project</li> <li>2:15 Code changes</li> <li>4:55 Outro</li> </ul>","tags":["javascript"]},{"location":"getting-started-react/#steps","title":"Steps","text":"","tags":["javascript"]},{"location":"getting-started-react/#1-install-nvm","title":"1. Install NVM","text":"<p>If you don't already have <code>npm</code> and <code>node</code> installed, use <code>nvm</code> to get going quickly. Run the following to install:</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nbash # or restart your terminal\nnvm install 16\n</code></pre>","tags":["javascript"]},{"location":"getting-started-react/#2-generate-the-project","title":"2. Generate the project.","text":"<pre><code>npx create-react-app exampleapp\ncd exampleapp\n</code></pre>","tags":["javascript"]},{"location":"getting-started-react/#3-start-the-app-in-your-browser","title":"3. Start the app in your browser.","text":"<pre><code>npm start\n</code></pre>","tags":["javascript"]},{"location":"getting-started-react/#4-edit-the-source","title":"4. Edit the Source","text":"<p>Edit the source code as desired! See the video for live edits.</p>","tags":["javascript"]},{"location":"webgl-1/","title":"WebGL Experiment 1: Draw a Square in 30 Minutes","text":"<p>That was easy!</p> <p></p>","tags":["javascript","live-coding","webgl"]},{"location":"webgl-2/","title":"WebGL Live Coding 2","text":"<p>Surprising success at the very end. But I put it less than two minutes into the video instead of the end since I know you won't watch that whole way</p> <p></p>","tags":["javascript","live-coding","webgl"]},{"location":"wilr-1/","title":"WILR1: React Native Basics","text":"<p>Here's a brain dump of everything I learned this week about React Native.</p> <p>I'm trying out a new format where I ramble and don't edit anything.</p> <p></p> <p>Code: https://github.com/pagekeysolutions/example-react-native</p>","tags":["javascript"]},{"location":"wilr-1/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro </li> <li>2:40 Installing Dependencies - npm, yarn, expo </li> <li>3:25 Generating the project - expo init </li> <li>4:55 Looking at template app </li> <li>6:16 Blank typescript app </li> <li>6:40 Adding a button </li> <li>7:50 Watch out for Divs and Raw Text </li> <li>11:00 Implementing Navigation </li> <li>17:50 Managing State with React Hooks </li> <li>18:30 useState hook </li> <li>20:45 Async Storage for Persistence / Saving Data </li> <li>22:33 AsyncStorage setItem </li> <li>23:50 AsyncStorage getItem with useEffect hook </li> <li>27:20 How to specify styles</li> </ul>","tags":["javascript"]},{"location":"wilr-2/","title":"WILR2: Rust Beginnings (minigrep)","text":"<p>I learned some basic Rust by following the Rust Book's Chapter 12, where they show us how to build a <code>minigrep</code> command-line application.</p> <p></p> <p>What you see below are very rough notes I took as I went through this for the first time. Hopefully this, along with the video walkthrough, is helpful to you in some way.</p>","tags":["rust"]},{"location":"wilr-2/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:32 Installation</li> <li>0:45 Discussing the Rust Book</li> <li>2:13 The finished code</li> <li>2:44 What it does</li> <li>3:56 Code walkthrough</li> </ul>","tags":["rust"]},{"location":"wilr-2/#installing-rust","title":"Installing Rust","text":"<p>https://www.rust-lang.org/tools/install</p> <ul> <li>Just use script: <pre><code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n</code></pre></li> <li>If having trouble on proxy, use minimal installation<ul> <li>(I was having trouble with rust-docs)</li> </ul> </li> </ul>","tags":["rust"]},{"location":"wilr-2/#rust-book-ch-12","title":"Rust Book Ch. 12","text":"<p>https://doc.rust-lang.org/book/ch12-00-an-io-project.html</p> <ul> <li>Importing standard libraries: you can import <code>std::env::args</code> if you want, but it's not recommended. Better to import <code>std::env</code> to prevent name conflicts<ul> <li>Either way, <code>use</code> seems to take the last thing and make it accessable. <code>use std::env</code> makes <code>env</code> accessible, <code>use std::error::Error</code> makes <code>Error</code> accessible</li> </ul> </li> <li><code>env::args()</code> returns an iterator, and <code>collect()</code> turns it into a vector (basically a list) so that we can use it</li> <li><code>expect()</code> fails out and prints a rust backtrace (ugly)</li> <li>First: Can simply return a tuple</li> <li>Then, abstract the tuple to <code>struct Config</code> - this way, you can name your fields </li> <li>Adding <code>impl Config</code>, and <code>new</code> method: Allows you to \"instantiate\" the Config object using <code>args</code></li> <li>Checking for errors: Can <code>panic!()</code>, which is like <code>expect!</code> in that it prints a backtrace (ugly)</li> <li>Alternative: Return a <code>Result</code> and let the caller handle it. <code>Ok()</code> with return value or <code>Err()</code> with message<ul> <li>What is <code>&amp;'static</code> ?? something to do with reference/memory ownership I think</li> <li>It says to see Chapter 10 on \"Lifetimes\": https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html</li> </ul> </li> <li><code>unwrap_or_else</code>: Alternative to <code>expect()</code><ul> <li><code>expect()</code> gives you the return value in <code>Result</code>, or panics</li> <li><code>unwrap_or_else</code> gives you the return value if ok, otherwise lets you handle it in a block of code</li> <li>\"custom, non-panic error handling\"</li> <li>Uses a Closure, or anonymous function</li> </ul> </li> <li><code>std::process</code> lets you exit with error code, much like python's <code>sys.exit</code></li> <li><code>Box&lt;dyn Error&gt;</code> is a trait object<ul> <li>Basically means what it returns must be a subclass of Error</li> <li>Ending a line with <code>?</code> instead of <code>expect()</code>: Returns the error automatically instead of panicking</li> </ul> </li> <li><code>if let</code> syntax?? Similar to <code>unwrap_or_else</code>?</li> <li>We move our code to separate <code>lib.rs</code> file - it calls this a separate crate? This way, it can be tested. Added <code>pub</code> everywhere</li> <li>Tutorial uses TDD! My heart!</li> <li>Lifetime <code>'a</code> marks the argument with matching lifetime of return value. So return value will live as long as the <code>contents</code> variable<ul> <li>Again, see Chapter 10 on \"Lifetimes\": https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html</li> </ul> </li> <li>Topics covered: file input and output, lifetimes, testing, and command line parsing.</li> <li>Env to add case sensitivity</li> <li>Print to stderr with <code>eprintln!</code></li> </ul>","tags":["rust"]},{"location":"logic-analyzer/","title":"How and Why to Use a Logic Analyzer","text":"<p>A logic analyzer lets us look at the digital data coming out of ports on various devices, in much the same way an oscilloscope lets us look at analog signals. In this lesson, we plug our logic analyzer into an Arduino's serial port to show how we can record and analyze digital data.</p> <p></p>","tags":["hardware"]},{"location":"logic-analyzer/#parts-list","title":"Parts List","text":"<ol> <li> <p>KeeYees Logic Analyzer (~$14)</p> </li> <li> <p>Arduino UNO (~$30)</p> </li> <li> <p>Jumper Cables (~$7)</p> </li> </ol> <p>As an Amazon associate I earn from qualifying purchases.</p>","tags":["hardware"]},{"location":"logic-analyzer/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:28 Parts list</li> <li>1:06 Arduino code</li> <li>1:59 Arduino wiring</li> <li>2:24 Logic analyzer in action</li> <li>3:27 Outro</li> </ul>","tags":["hardware"]},{"location":"logic-analyzer/#arduino-code","title":"Arduino Code","text":"<p>We use the following simple program on our Arduino, which outputs a message via serial every 2 seconds:</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  Serial.println(\"Hello world!\");\n  delay(2000);\n}\n</code></pre>","tags":["hardware"]},{"location":"logic-analyzer/#arduino-wiring","title":"Arduino Wiring","text":"<p>We wire channel 1 of the logic analyzer to the TX port of the Arduino. To do this, we use a female-to-female jumper (which should come with the logic analyzer) and a (more common) male-to-male jumper to complete the connection.</p> <p></p> <p>With this wiring in place, we can launch the software that came with the logic analyzer and perform a capture, which will show us the \"Hello World\" message coming through Channel 1!</p> <p>This same technique can be applied to a variety of protocols, such as I2C, SPI, PS2 Keyboard/Mouse, and USB (low- and full-speed only).</p>","tags":["hardware"]},{"location":"pkos-13/","title":"OS13: Docker Dev Environment","text":"<p>This video shows off our shiny new Docker development environment, and this new PageKey Solutions website!</p> <p></p>","tags":["assembly","c","docker","tutorial"]},{"location":"pkos-13/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["assembly","c","docker","tutorial"]},{"location":"pkos-14/","title":"OS14: Organizing Our OS Code","text":"<p>In this video, we reorganize the entire project, taking it from cluttered to modular in less than 10 minutes.</p> <p></p>","tags":["assembly","c","tutorial"]},{"location":"pkos-14/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro, Overview</li> <li>0:25 Running the OS</li> <li>0:43 The Main Changes</li> <li>1:16 Other Minor Changes</li> <li>1:34 Lessons Learned</li> <li>2:40 The (New!) File Tree</li> <li>3:42 Code Diff Walkthrough</li> <li>7:06 Outro</li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-14/#references","title":"References","text":"<ul> <li>Recursive Make Considered Harmful paper<ul> <li>Goes into detail about why you shouldn't use separate <code>Makefile</code>s for each submodule in your project</li> </ul> </li> <li>GNU Make Include docs<ul> <li>Tell you how to use <code>include</code> in GNU Make, which we use in this video</li> </ul> </li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-14/#other-resources","title":"Other Resources","text":"<ul> <li>Implementing Non-Recursive Make<ul> <li>A helpful article</li> </ul> </li> <li>boilermake<ul> <li>Seems to be a boilerplate for Make projects using <code>include</code></li> <li>Definitely too complicated for me to understand/use, but a helpful reference</li> </ul> </li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-14/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-16/","title":"OS16: Integration Test with QEMU in CI/CD Using Pytest","text":"<p>In this video, we implement a simple integration test in GitLab CI/CD to automate our input to QEMU using <code>pytest</code> and Python's <code>subprocess</code> package.</p> <p></p>","tags":["assembly","c","ci/cd","python","testing","tutorial"]},{"location":"pkos-17/","title":"OS17: Unit Testing C Code with Gtest, LCOV, Genhtml","text":"<p>In this video, we set up unit testing for our C code using Gtest, generate coverage data with gcov and LCOV, and finally generate a nice HTML coverage report for us to browse with genhtml.</p> <p></p>","tags":["assembly","c","ci/cd","testing","tutorial"]},{"location":"pkos-18/","title":"OS18: Shredding the Makefile","text":"<p>So long, old friend</p> <p></p> <p>MR for this video: https://gitlab.com/pagekeytech/pkos/-/merge_requests/3</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-19/","title":"OS19: More VGA + stdlib/memory improvements","text":"<p>In this video, we make massive improvements to stdlib, add memset and memcpy, and most importantly, allow ourselves to get out of VGA (graphics) mode once we enter it.</p> <p>MR for this video: https://gitlab.com/pagekeytech/pkos/-/merge_requests/4</p> <p></p>","tags":["assembly","c","tutorial"]},{"location":"pkos-19/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Debugging Walkthrough</li> <li>2:23 Full System Demo</li> <li>2:27 Demo on Real Hardware</li> <li>3:00 Slides: Major Changes</li> <li>6:06 Notes Walkthrough</li> <li>7:28 Merge Request Walkthrough</li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-19/#notes","title":"Notes","text":"<ul> <li>Only waste multiple lifetimes if you want hi res! Low res VGA is not too hard  </li> <li>VGA resources osdev  <ul> <li>http://www.osdever.net/FreeVGA/vga/vga.htm</li> </ul> </li> <li>Can fix up the cursor:  <ul> <li>http://www.osdever.net/FreeVGA/vga/textcur.htm</li> </ul> </li> <li>Absolutely need a better way of analyzing memory - VGA and regular mem</li> <li>Installed ghex for exploring <code>dump-guest-memory</code><ul> <li>In qemu: <ul> <li><code>dump-guest-memory mem.bin</code></li> <li><code>ghex mem.bin</code>, CTL-F for stuff</li> </ul> </li> </ul> </li> <li>https://qemu-project.gitlab.io/qemu/system/monitor.html<ul> <li><code>info ramblock</code><ul> <li>Has a vga ramblock etc</li> </ul> </li> <li><code>memsave\u00a0addr\u00a0size\u00a0file</code></li> <li><code>pmemsave addr size file</code></li> <li><code>info mtree</code></li> </ul> </li> <li>https://www.qemu.org/docs/master/devel/memory.html<ul> <li>QEMU models:<ul> <li>Regular RAM</li> <li>Memory-mapped IO (MMIO)</li> <li>Rerouting physical memory</li> </ul> </li> </ul> </li> <li>Acyclic graph of MemoryRegion objects</li> <li>Types of regions<ul> <li>RAM</li> <li>MMIO</li> <li>ROM</li> <li>ROM device</li> <li>IOMMU</li> <li>container (of other memory regions, for grouping)</li> <li>alias</li> <li>reservation</li> </ul> </li> <li>https://www.qemu.org/2018/02/09/understanding-qemu-devices/<ul> <li>Understanding QEMU Devices</li> <li>\"Most bare-metal machines are basically giant memory maps, where software poking at a particular address will have a particular side effect\"</li> <li>x86 has two memory spaces - main and I/O</li> <li>Relevant to future video:<ul> <li>\"how to manage an IDE disk - the driver is merely software that is programmed to make specific I/O requests to a specific subset of the memory map (wherever the IDE bus lives, which is specific to the hardware board).\"</li> </ul> </li> </ul> </li> <li>http://www.osdever.net/FreeVGA/vga/vgamem.htm<ul> <li>Accessing VGA memory</li> <li>RAM Enable: Do we listen to the CPU?</li> <li>Memory Map Select: Where do we read from?</li> <li>00 -- A0000h-BFFFFh -- 128K<ul> <li><code>pmemsave 0xa0000 128000 00.bin</code></li> </ul> </li> <li>01 -- A0000h-AFFFFh -- 64K<ul> <li><code>pmemsave 0xa0000 64000 01.bin</code></li> </ul> </li> <li>10 -- B0000h-B7FFFh -- 32K<ul> <li><code>pmemsave 0xa0000 32000 10.bin</code></li> </ul> </li> <li>11 -- B8000h-BFFFFh -- 32K<ul> <li><code>pmemsave 0xa0000 32000 11.bin</code></li> </ul> </li> </ul> </li> <li>https://www.kraxel.org/blog/2019/09/display-devices-in-qemu/<ul> <li>Display Devices in QEMU</li> </ul> </li> <li>https://blog.reds.ch/?p=1379<ul> <li>Accessing the RAM of a QEMU Emulated System from another Process</li> <li>Can map qemu to /dev/shm file</li> </ul> </li> <li>How do we check RAM enable, Memory Map Select fields on VGA?</li> <li>Which parts of memory can we save stuff in without breaking everything?</li> <li>https://wiki.osdev.org/Memory_Map_(x86)<ul> <li>Memory Map (x86)</li> <li>\"The region of RAM above 1 MiB is not standardized, well-defined, or contiguous.\"</li> <li>I guess that means we just go for it??</li> <li>0x00100000-0x00EFFFFF: RAM - free for use if it exists</li> </ul> </li> <li><code>info mtree</code> seems to have various named regions (a DAG) <pre><code>(qemu) info mtree\naddress-space: memory\n  0000000000000000-ffffffffffffffff (prio 0, i/o): system\n    0000000000000000-0000000007ffffff (prio 0, i/o): alias ram-below-4g @pc.ram 0000000000000000-0000000007ffffff\n</code></pre></li> <li>Trying to access fields</li> <li>http://www.osdever.net/FreeVGA/vga/graphreg.htm#06<ul> <li>Graphics Address Register, Graphics Data Register</li> <li>Address reg: 0x3CE</li> <li>Data reg: 0x3CF</li> <li>Misc graphics reg: Index 0x06</li> </ul> </li> <li>http://www.osdever.net/FreeVGA/vga/vgareg.htm<ul> <li>Accessing Graphics Registers: each have two unique read/write ports<ul> <li>First: Address Register. Second: Data Register</li> <li>Best to save/restore address register (in case you're in an ISR)</li> <li>Steps<ul> <li> <ol> <li>Input the value of address register, save it (inb)</li> </ol> </li> <li> <ol> <li>Output index of desired data reg to addr reg</li> </ol> </li> <li> <ol> <li>Read value of data reg, save if needed</li> </ol> </li> <li>4-5 only apply if writing</li> <li> <ol> <li>Restore addr reg value</li> </ol> </li> </ul> </li> </ul> </li> <li>Accessing external registers<ul> <li>Simpler - just read/write to their ports</li> </ul> </li> </ul> </li> <li>So for us that looks like:<ul> <li>RAM Enable - External Register / General Register<ul> <li>Read port 0x3CC</li> </ul> </li> <li>Memory Map Select - Graphics Register<ul> <li>Read port 0x3CE, save this value</li> <li>Write 0x06 to 0x3CE</li> <li>Read 0x3CF - this is misc graphics reg value</li> <li>Write 0x3CE with original value</li> </ul> </li> </ul> </li> <li>Okay - RAM Enable is 1, Memory Select is 11, which is 0xB8000 - MAKES SENSE!</li> <li>http://www.osdever.net/FreeVGA/vga/seqreg.htm<ul> <li>Can select various character sets</li> </ul> </li> <li>https://wiki.osdev.org/VGA_Hardware#The_Sequencer<ul> <li>\"The Sequencer either operates in text (alphanumeric) mode or graphics mode\"</li> </ul> </li> <li>https://www.ardent-tool.com/video/VGA_Video_Modes.html <p>There are five tasks you must perform to coordinate the different components of the VGA subsystem: - Program the CRTC. - Program the sequencer. - Select a dot-clock frequency. - Specify the displayed character height. - Update relevant ROM BIOS variables.</p> </li> <li>Control components<ul> <li>CRT controller (CRTC)</li> <li>Sequencer</li> <li>Attribute controller</li> <li>Graphics controller</li> </ul> </li> <li>Create your own video modes!</li> <li>Video mode characteristics<ul> <li>Vertical resolution: rows of pixels (scan lines) on screen</li> <li>Horizontal resolution: number of characters or pixels per row</li> <li>Data representation in buffer</li> <li>Attribute decoding: colors, blinking, etc.</li> </ul> </li> <li>Horizontal/vertical resolution is flexible; data rep/attributes are constrained by hardware</li> <li>Resolution is a matter of timing<ul> <li>VGA output signal timing controls electron beam in video monitor</li> </ul> </li> <li>Character clock = unit of time. Corresponds to 8 pixels in graphics mode, 8 or 9 in alphanumeric mode</li> <li>Three rates to consider<ul> <li>Dot rate: rate at which video subsystem displays pixels. Established by dot clock</li> <li>Horizontal scan rate: number of scan lines displayed per second</li> <li>Vertical scan rate: refresh rate. Number of times per second screen refreshes</li> </ul> </li> <li>Bits 0 through 4 of CRTC register 0x09 control displayed height of alphanum chars</li> <li>http://www.osdever.net/FreeVGA/vga/vgaseq.htm<ul> <li>\"When the Alphanumeric Mode Disable field is set to 1, the sequencer operates in graphics mode where data in memory references pixel values, as opposed to the character map based operation used for alphanumeric mode.\"</li> </ul> </li> <li>https://files.osdev.org/mirrors/geezer/osd/graphics/modes.c<ul> <li>(copied code for writing regs, etc)</li> </ul> </li> <li>https://forum.osdev.org/viewtopic.php?f=1&amp;t=10910<ul> <li>Discussion about how to implement memcpy</li> </ul> </li> <li>https://sites.google.com/site/microprocessorsbits/string-instructions/rep<ul> <li>Explanation of REP assembly</li> </ul> </li> <li>https://docs.oracle.com/cd/E19620-01/805-4693/instructionset-64/index.html<ul> <li>Explanation of variations of REP</li> <li>rep movsb: Copy byte from esi to edi</li> <li>repz stosl: copy eax to edl</li> </ul> </li> <li>https://medium.com/@ophirharpaz/a-summary-of-x86-string-instructions-87566a28c20c<ul> <li>Has a nice cheat sheet of x86 string instructions</li> <li>rep<ul> <li><code>movsb</code>: move byte from <code>*ESI</code> to <code>*EDI</code></li> <li><code>lodsb</code>: load a byte from <code>*ESI</code> to <code>EAx</code></li> <li>stosb: store a byte from EAx into *EDI</li> </ul> </li> </ul> </li> <li>https://members.tripod.com/vitaly_filatov/ng/asm/asm_000.115.html<ul> <li>stosb: copy al to di</li> </ul> </li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/","title":"OS15: Writing a Simple VGA Driver (Bare-Metal Graphics)","text":"<p>Our OS just got a lot more colorful. In this post, we figure out how to draw on the screen by switching to VGA mode and manually editing the video memory.</p> <p></p> <p>Thanks to Scott Spitler for suggesting this topic.</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:35 Demo (Emulated)</li> <li>1:04 Demo (Real hardware)</li> <li>2:04 VGA Background</li> <li>2:34 QEMU Hardware</li> <li>3:27 VGA Hardware</li> <li>4:52 Setting the Graphics Mode</li> <li>5:57 CODE WALKTHROUGH</li> <li>9:28 Stuck in VGA Mode</li> <li>11:30 Other lessons learned</li> <li>12:17 Outro</li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li> <p>Clone the repo: <code>git clone https://github.com/pagekeysolutions/pkos</code></p> </li> <li> <p>Enter the repo: <code>cd pkos</code></p> </li> <li> <p>Check out the code snapshot for this post: <code>git checkout vid/015</code></p> </li> <li> <p>Enable X connections: <code>xhost local:root</code></p> </li> <li> <p>Run the OS on QEMU: <code>docker-compose up</code></p> </li> </ol>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#code","title":"Code","text":"<ul> <li>Link to tag</li> <li>Diff from previous video</li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#background","title":"Background","text":"<p>VGA stands for Video Graphics Array [1]. Designed for use with CRT monitors, this old-fashioned video display chipset uses an analog signal. It has been replaced by DVI, or Digital Video Interface [2]. As it turns out, the HDMI standard is just DVI with better color support and audio bundled into the same (smaller) connector [3].</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#qemu-hardware","title":"QEMU Hardware","text":"<p>I thought it may be helpful to look into what hardware is being simulated in our beloved i386 QEMU emulator. Thankfully, the man page for <code>qemu-system-i386</code> tells us exactly what to expect. For VGA, emulator uses the \"Cirrus CLGD 5446 PCI VGA card or dummy VGA card with Bochs VESA extensions\" [4].  This card connects via the PCI bus [5].  It seems to be old enough that it's hard to purchase anywhere. I am wondering how modern computers, like the laptop I've tried this OS out on in OS10, support VGA mode for x86. I can't seem to find any sources on it, but I thought that I read somewhere (maybe on the OSDev Wiki) that the external VGA chipsets were replaced with a smaller version included directly on the motherboard.</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#vga-hardware","title":"VGA Hardware","text":"<p>As always, the OS Dev Wiki has our back on this topic. Their page on VGA hardware greets me with an encouraging quote:</p> <p>While the VGA chip is quite a simple piece of hardware ... it is possibly one of the most complicated devices to program for</p> <p>Wonderful! However, it goes on to mention that there are many shortcuts you can take to make it easier, and it's still a good place to get your start developing video drivers [6]. With this in mind, I found some code in the public domain that I was able to make heavy use of to get something working, even if that something isn't the most elegant graphics code ever written. The OS Dev post [6] goes into great depth about which ports are used to control VGA. It seems that a combination of I/O ports are used to program the chipset into the right mode, and then you can use memory-mapped I/O once everything is set up. The code that I \"borrowed\" took care of the hard part of writing very specific values to VGA I/O ports, and then I was able to quite simply modify the right memory locations to draw on the screen.</p> <p>One other tidbit that I learned from [6] is that VGA uses a \"sequencer,\" among other devices in its rendering pipeline (if you could call it that). The sequencer is connected to the VGA memory space, reading it and generating colors that are fed to subsequent stages. Also, it's worth noting that there are 4 planes of VGA memory, each 64 KB in size, for a total of 256 KB.</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#settings-the-graphics-mode-without-the-bios","title":"Settings the Graphics Mode (without the BIOS)","text":"<p>How do you set the graphics mode in protected mode? The sage answer comes again from OSDev [7]:</p> <p>You don't. Graphics programming is fun, but graphics are hardly essential for an OS. Don't get side-tracked</p> <p>In fact, it's recommended that you avoid getting too deep into this topic unless you have \"more than one life to waste\" [8]. Apparently, you can make VGA work without the BIOS and still get some low-resolution graphics working, but to move beyond it, you'll hit some serious barriers. Graphics cards would each, separately require their own graphics driver implementation, and there often isn't sufficient documentation on these cards [8], meaning that you'd be reverse engineering it. That being said, at some point far down the line, I'm sure there's a way to obtain implementations of graphics drivers for popular cards and compile them specifically for our OS. But this is all besides the point - let's jump into the actual code of writing the VGA driver.</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#writing-the-code","title":"Writing the Code","text":"<p>The code that helped me get this working was found at [9]. It's an actual example of techniques for changing the graphics mode without the BIOS. The file itself is huge, and I made no effort to build or run it. Instead, I searched for relevant code snippets that I could use in PKOS. I found <code>write_regs</code> to be a key function. This, paired with a character array named <code>g_320x200x256</code>, representing register values required to enter 320x200 VGA resolution with a color-depth of 256, allowed me to change the graphics mode. I added a command to <code>kernel.c</code> so that whenever you type <code>vga</code>, it runs the <code>vga_test()</code> function in <code>vga.c</code>, which in turn runs <code>write_regs(g_320x200x256)</code>. When we do this, our text-based interface goes away, and we see something cool!</p> <p></p> Our first glimpse of VGA mode <p>Beautiful! The coolest part of this is that we seem to be unintentionally visualizing a section of memory as VGA. The little dots of yellow and stripes of gray must have had some other meaning to the computer before we entered this mode, though I'm not sure what. Maybe the buffer for our text interface that just disappeared is represented here.</p> <p>Our next step is to figure out how to clear the screen. Again, I borrow some code from [9], modifying it to compile with our OS. Specifically, I got rid of the <code>far</code> keyword - I wasn't sure what this was, and neither was our compiler! This gave us the following function to plot a pixel:</p> <pre><code>void vga_plot_pixel(int x, int y, unsigned short color) {\n    unsigned short offset = x + 320 * y;\n    unsigned char *VGA = (unsigned char*) VGA_ADDRESS;\n    VGA[offset] = color;\n}\n</code></pre> <p>We simply calculate the address of the color we'd like to update based on <code>x</code> and <code>y</code>, and then change it in memory! I originally had the wrong address for <code>VGA_ADDRESS</code>, and so this code didn't seem to do anything. The correct value is <code>0xA0000</code>.</p> <p>We're now free to clear the screen by plotting color 0 (black) on every pixel from 0,0 to 320,200. From that point on, we can have some fun with our <code>vga_plot_pixel</code> function. We're basically free to draw whatever we want! As for me, I drew some happy faces, a rectangle, and a pallete of colors <code>0x0</code> through <code>0xF</code>.</p> <p></p> The output of our custom drawing code <p>While we apparently have 256 colors available in this mode, I did not explore past color <code>0xF</code>.</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#were-stuck-in-vga-mode","title":"We're Stuck in VGA Mode","text":"<p>Unfortunately, I was not able to find a way out of this mode. I left my various unsuccessful attempts on the <code>vga-text-mode</code> branch in the repo. Though [9] provides <code>g_80x25_text</code> register values, writing this with <code>write_regs</code> when the user hits ESC was not enough. The actual code also writes 4096-byte font into a specific place in virtual memory. Unfortunately, this makes use of external dependencies to calculate, and I wasn't able to get it to work. Depending on your compiler, this would either be a <code>memcpy</code>, include some variables from <code>dos.h</code>, or something like that. Since we're running on bare-metal, we don't have <code>dos.h</code> and we'd have to roll our own <code>memcpy</code>. I took a quick-and-dirty attempt at <code>memcpy</code>:</p> <pre><code>// Famous last words - how hard can memcpy be\nvoid memcpy(void *dest, const void* src, int n) {\n    for (int i = 0; i &lt; n; i++) {\n        *(int*)dest = ((int*)src)[i];\n    }\n}\n</code></pre> <p>Sadly, this didn't seem to help, so I gave up on it for now. The only way out of this mode is a reboot!</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#other-lessons-learned","title":"Other Lessons Learned","text":"<p>I was having trouble getting into the debugger, so I added a script for debugging named <code>scripts/docker_run_debug</code> which allows easy access to the existing debugging functionality with QEMU and GDB. It was poking around in memory and checking values that made me realize I had the wrong VGA address.</p> <p>I also found out about how global variables work in C. Apparently, you should declare the global as <code>extern</code> in your header file, and then actually give it a value in your implementation file. Otherwise, you'll get yelled at for having multiple definitions of the same variable, even if you use header guards [10].</p> <p>Speaking of which, I added header guards! Without these lovely <code>#ifndef __HEADER_H</code>,  <code>#define __HEADER_H</code>, <code>#endif</code> combos, you'll get all sorts of errors for mutliple definitions of the same variable or function.</p>","tags":["assembly","c","tutorial"]},{"location":"pkos-15/#references","title":"References","text":"<p>[1] https://www.britannica.com/technology/VGA</p> <p>[2] https://computer.howstuffworks.com/monitor3.htm</p> <p>[3] https://www.toptenreviews.com/how-hdmi-cables-work</p> <p>[4] https://manpages.debian.org/stretch/qemu-system-x86/qemu-system-i386.1.en.html</p> <p>[5] http://www.vgamuseum.info/index.php/cpu/item/147-cirrus-logic-cl-gd5446</p> <p>[6] https://wiki.osdev.org/VGA_Hardware</p> <p>[7] https://files.osdev.org/mirrors/geezer/osd/graphics/index.htm</p> <p>[8] https://wiki.osdev.org/How_do_I_set_a_graphics_mode</p> <p>[9] https://files.osdev.org/mirrors/geezer/osd/graphics/modes.c</p> <p>[10] https://stackoverflow.com/questions/8201944/multiple-definition-and-header-only-libraries</p>","tags":["assembly","c","tutorial"]},{"location":"boom-devlog-10/","title":"MEASURE - The Secret to Language Learning","text":"<p>Here's the video I'd show you if you were investing money in Boom Languages!</p> <p></p>","tags":["design","language"]},{"location":"boom-devlog-10/#summary","title":"Summary","text":"<p>This is all about</p> <ul> <li>The Problem: Why language learners struggle</li> <li>The Solution: How Boom can fix it, and</li> <li>The Plan: How I plan to implement Boom</li> </ul> <p>It provides a plan for the next four weeks - from now until November 19.</p> <p>Check back soon to see what's new! I plan to post weekly status for the next four weeks.</p> <p>Slides used in this video are here.</p>","tags":["design","language"]},{"location":"boom-devlog-11/","title":"boom devlog 11","text":"<p>This video documents the first week working on the Measure feature for Boom Languages.</p> <p></p>","tags":["design","javascript","mongodb","postgres"]},{"location":"boom-devlog-11/#summary","title":"Summary","text":"","tags":["design","javascript","mongodb","postgres"]},{"location":"boom-devlog-11/#feedback","title":"Feedback","text":"<p>Investors would want to see more on:</p> <ul> <li>Expected returns</li> <li>ICP: Ideal Customer Profile</li> <li>Marketing plans</li> <li>Empirical results: research, benchmarks, etc.</li> <li>What's done, not what's planned</li> <li>User growth</li> </ul> <p>Presentation:</p> <ul> <li>Clarify audience</li> <li>Have an agenda</li> <li>Emphasize uniqueness of solution</li> <li>More about features/skills of language learning</li> <li>Better format / production quality</li> <li>Multiple videos</li> </ul> <p>Other:</p> <ul> <li>Sprints, not weekly tasks</li> </ul>","tags":["design","javascript","mongodb","postgres"]},{"location":"boom-devlog-11/#demo","title":"Demo","text":"<p>See video</p>","tags":["design","javascript","mongodb","postgres"]},{"location":"boom-devlog-11/#schedule-update","title":"Schedule Update","text":"<p>All tasks complete for W1 and W2! Ahead of schedule.</p>","tags":["design","javascript","mongodb","postgres"]},{"location":"boom-devlog-11/#reflection","title":"Reflection","text":"<p>Challenges:</p> <ul> <li>Mostly just technical challenges</li> </ul> <p>Successes:</p> <ul> <li>Kubernetes maturation</li> <li>Login/register</li> <li>Log features</li> <li>Mongo to postgres migration</li> </ul> <p>Lessons learned:</p> <ul> <li>Helm: DIY is better</li> <li>The simplicity of NoSQL is not free</li> <li>Make sure you <code>await someCall()</code> if you want to <code>try</code>/<code>catch</code> its exceptions!</li> </ul> <p>New tech debt:</p> <ul> <li>Fix log edit on mobile (too long)</li> <li>Validate edit log form</li> </ul> <p>Dev plan</p> <ul> <li>S1: MVP</li> <li>S2: Users, UX</li> <li>S3: Video Translator</li> <li>S4: ?</li> </ul>","tags":["design","javascript","mongodb","postgres"]},{"location":"boom-devlog-11/#slides","title":"Slides","text":"<p>Slides used in this video are here.</p>","tags":["design","javascript","mongodb","postgres"]},{"location":"boom-devlog-8/","title":"rejected \u274c | boom devlog 8","text":"<p>A N G E R Y </p> <p></p>","tags":["javascript","language"]},{"location":"boom-devlog-9/","title":"5 Lessons from Rewriting My App FOUR TIMES | boom devlog 9","text":"<p>Four times, from scratch.</p> <p>That's how many times I've re-written my app, called Boom Languages. Every time I did, I learned a ton, and in this post, I'm going to tell you the 5 top lessons I've learned along the way.</p> <p></p> <p>Be sure to sign up to get notified when the latest version of Boom is available!</p>","tags":["javascript","language"]},{"location":"boom-devlog-9/#1-just-start","title":"1. Just start.","text":"<p>Any article focused on innovation or entrepreneurship will tell you this - start today, because if you put it off until tomorrow, then tomorrow will never come. I've read this advice many times, and when I finally applied it to my language app idea, it rang true.</p> <p>You can spend your whole life getting ready, but the truth is, many of the lessons you need can only be learned as you go. You have to jump in, even if you're woefully unprepared and lacking key skills. You'll learn them as you go.</p> <p>For me, this entailed creating a rough plan for my app, opening up a code editor, and typing those fateful keystrokes: <code>git init</code>. If I hadn't finally made that initial commit on November 28, 2020, the hundreds that followed may never have come to pass.</p> <p>I've built four versions of this app so far:</p> <ul> <li>Version 1 was just to show that I could get an app on the iOS and Android app stores. There was nothing special about it - it had a quiz feature, but so does every other major language learning app.</li> <li>Version 2 added a feature that would become key - the Article Translator. It's a tool that helps you break down a big, intimidating, dense body of text written in a foreign language into manageable pieces - sentences - so that you can work your way through it without getting overwhelmed.</li> <li>Version 3 was the exact same app, but re-written from scratch (using React Native instead of Flutter).</li> <li>And now I'm working on Version 4, which is yet another complete rewrite from scratch.</li> </ul> <p>But if I had never just gone for it, I'd still be loafing around thinking about the next big idea.</p> <p>Curious to try the new version? Sign up here to get notified when it's available. There's even a chance you'll be selected as an exclusive private tester!</p>","tags":["javascript","language"]},{"location":"boom-devlog-9/#2-its-not-just-about-the-idea","title":"2. It's not just about the idea.","text":"<p>Another classic piece of entrepreneurial advice comes from Derek Sivers, who introduced the thought that ideas are a multiplier of execution. Basically, it means that the way you execute an idea has far more leverage on whether you're successful than the idea itself. That's not to mention the fact that practicing your skills at executing ideas makes you better at it, so that when another \"million-dollar idea\" comes floating into your head, you'll be ready and able to turn it into reality.</p>","tags":["javascript","language"]},{"location":"boom-devlog-9/#3-dont-just-ship-it","title":"3. Don't just ship it.","text":"<p>I was deeply inspired by Seth Godin's book Linchpin. One of my key takeaways from that book was the concept of \"shipping it\" - he makes the point that if you don't \"ship\" your ideas and make them available to the world, then all the work you put into them is essentially wasted. The ideas need to interact with the world to grow and become something worthwhile - and they can't do that until you actually hit the publish button. At first, I embraced this fully, but with time, I've realized the truth is a bit more nuanced than it seemed.</p> <p>Growing up, I was a bit of a perfectionist - taking things slow and steady when writing an essay for school or working on homework, and checking everything over to make sure it was right before turning it in. Reading Linchpin made me change my habits - from careful checks to just sending it.</p> <p>At first, it made me uncomfortable, but eventually, I was shipping things with wild abandon, left and right, without giving it too much thought. Hit a rough spot in a video? Can't find the right wording? No problem, just ship it and move onto the next one. Stuck on a programming problem? Go for the easy, messy solution and move onto the next problem.</p> <p>I took to setting goals that were focused on completion rather than effort or quality. Some examples included working on Boom for a certain amount of time each day, or producing a YouTube video every week about a technical topic.</p> <p>Taking it to the next extreme, in January 2023, I challenged myself to make a YouTube video every single day. I was able to keep it up for over a month, but by the end of it, I was completely burnt out, and confused as to why I was spending so much time making such low quality videos. I was cutting corners just to meet my daily \"shipping\" quota.</p> <p>It was at this point that I vowed to return to an earlier time, before metrics, before \"grindset\" culture, before \"shipping,\" before quantity - and I realized that I needed to focus on quality. When you're just getting started, it can be great to flail wildly, test the waters, and blow up a few spaceships along the way. But this approach has its limits, and I've decided to swing the pendulum in the other direction, at least for me, for now.</p>","tags":["javascript","language"]},{"location":"boom-devlog-9/#4-start-with-whats-most-important","title":"4. Start with what's most important.","text":"<p>When an app has a server, it's a lot more complicated than if everything is happening locally. You have to worry about migrating your database, maintaining a schema, and keeping the API synced between the client and the server. Even more headaches abound when you're trying to deploy to mobile - you have to appease Apple (as we saw in the last devlog).</p> <p>And on top of it all, I was adding features that didn't matter - like user logins and leaderboards - before finding a set of core features that effectively taught foreign languages and were fun and easy to use. When I tried to implement features that actually mattered, I found myself buried by a mountain of technical debt, and decided to start over.</p> <p>This time, however, I would concentrate on the features that mattered first, and eschew everything that wasn't directly related to them. If there was a corner that I could cut, I'd cut it to be able to build the core features faster and better. If it wasn't a core feature, I was going to ignore it.</p> <p>This led to the somewhat radical approach of building the app as a simple website that uses the browser's built-in <code>localStorage</code> instead of relying on a server. With this lean approach, I was able to prototype all the important features from the main app (that took me months to build) in a single weekend.</p> <p>The limitations to this are immense, but the speed with which I was able to iterate was priceless. Dozens of times, I cleared the <code>localStorage</code> on my browser and started fresh with a new schema. If I had to make these changes to a production app, I would have had to worry about migrating user data and a slew of other nit-picky concerns.</p> <p>When I'm the only user and I start from scratch, I don't have to worry about screwing anything up - I can just do it.</p> <p>This fast-and-loose approach seems to contradict my point about \"quality over quantity,\" but I don't think it does. The key here is that I'm not publishing this unpolished prototype for everyone to use. Instead, I'm using it as a way to discover the features and app design that are most effective, while investing the smallest possible amount of time doing it. I'll probably discard this messy prototype code at some point, but for now, it's getting the job done.</p>","tags":["javascript","language"]},{"location":"boom-devlog-9/#5-do-a-proper-launch","title":"5. Do a proper launch.","text":"<p>Iteration is great, but the average person trying to use an app will click away after 2 seconds if they're not engaged, and they'll never come back. And that's just if the design is ugly - if a button doesn't do what it's supposed to, or if an error box pops up and there's no obvious way to fix it, forget it - they're gone, and they won't be coming back.</p> <p>In the past, I wanted to have the latest, bleeding edge version of my app available to the whole world - I was basically saying, \"Look, everyone, I'm building something! It's not done, but try it out and see how not done it is!\" I thought that it was a waste of time and effort to build a brand for a product that wasn't ready yet.</p> <p>Building a list of people ready to use something that didn't exist yet seemed pretentious to me; I just wanted to show what was done so far and get feedback. No need to hide anything, right? From the perspective of an engineer, this is logical, but it's terrible marketing. The message that gets sent is that we have no problem putting something out there that doesn't work.</p> <p>That's why I'm going to severely limit the number of people who have access to the latest version of Boom this time around. I may even take the old version off the app store. I'll still document the process and share what I learn, but until I have something that I'm confident is impressive and useful to language learners, I'm keeping it under wraps.</p> <p>I always learn a ton from shoulder-surfing when family or friends try my app. That's why I'm going to allow that shoulder-surfing to happen when I can watch, and otherwise, I'll save peope the pain of trying to use something that spontaneously implodes without warning, usually right when things are getting good.</p>","tags":["javascript","language"]},{"location":"boom-devlog-9/#demo-prototype-of-version-4","title":"Demo: Prototype of Version 4","text":"<p>If you want to check out a demonstration of the prototype I built for Boom v4, you can check out the video that accompanies this article. The demonstration starts at 7:16.</p>","tags":["javascript","language"]},{"location":"boom-devlog-9/#whats-next","title":"What's Next","text":"<p>There are four simple elements to my plan as I move forward with this app:</p> <ol> <li>Build something that I personally want to use every single day to learn languages. This will be focused on adding features that I find useful, and that I find myself doing anyway through other means. I want Boom to be an integrated solution, so you don't have to hop between Google Translate tabs, Anki review sessions, and random YouTube videos to make progress on your language journey.</li> <li>Involve others. Get some people to use it, and make it so that they want to use it every day. This can happen in tandem with the previous step. I'll work with a select few to see how they respond to the app. This will help me uncover usability blindspots that arise from being the one who wrote all the code. When you can't just pop open \"Inspect Element\" to figure out what's going on, things certainly look different!</li> <li>Scale! When the previous two steps are complete, I'll have a reasonably high-quality proof-of-concept of a working, useful learning system. Then it will be time to take that potentially useful product and get it into the hands of as many people as I can. I'm not skilled at sales or marketing, but I'm hoping that if I just get started, I can fail my way to success like I did while building this app. Of course, this would be a lot easier if I had someone with business savvy to work with - if you're interested, send me an email!</li> <li>Monetize. Once enough people are using the app and the features are stable, we can look into ways to make money with this app and make it a sustainable business. I've done research into in-app purchases, subscription models, and licensing, but I have a lot more to learn. This is another place where I'll probably need help from some smart folks with good business acumen - and good character.</li> </ol> <p>So, that's all for this Boom Languages brain dump. I hope you got something out of the lessons that I shared. If you want updates as I make progress, you can sign up for the mailing list to get notified when new versions are available, and subscribe to the PageKey YouTube channel to stay in-the-know when we publish new videos. Thanks for reading!</p>","tags":["javascript","language"]},{"location":"python-cli/","title":"How to Make a CLI in Python","text":"<p>Want to use your Python program as its own executable? It's pretty easy to do - watch on!</p> <p></p>","tags":["python","tutorial"]},{"location":"python-cli/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:13 Overview</li> <li>0:40 Step 1: Add project skeleton</li> <li>1:58 IMPORTANT: adding entry_points</li> <li>2:54 Step 2: Add source code</li> <li>3:20 Step 3: Make sure it works</li> <li>4:01 Step 4: BONUS: Set up argparse</li> <li>4:15 Writing sample lib code</li> <li>5:00 Setting up parser</li> <li>5:33 Adding subparser</li> <li>6:14 Handling the args</li> <li>7:11 Showing off the finished product</li> <li>7:45 Wrap-up</li> </ul>","tags":["python","tutorial"]},{"location":"material-for-mkdocs/","title":"FINALLY! The Blog SSG I've Been Looking For","text":"<p>I've tried at least 8 solutions for how to host my tech blog online, and Material for Mkdocs takes the cake. It has everything I need and more, and it all comes working out of the box.</p> <p>This post is about briefly documenting some of the solutions I've tried in the past, along with their pros and cons, and how they compare to Material for Mkdocs.</p> <p></p>","tags":["productivity"]},{"location":"material-for-mkdocs/#getting-started-with-material-for-mkdocs","title":"Getting Started with Material for Mkdocs","text":"<p>It couldn't be easier to get started. Just do this:</p> <pre><code>pip install mkdocs-material\nmkdir my-site\ncd my-site\nmkdocs new .\n</code></pre> <p>Then apply the Material theme by editing <code>mkdocs.yml</code> to be:</p> <pre><code>site_name: My Docs\ntheme:\n  name: material\n</code></pre> <p>If you want to get started with a blog, you can steal the configuration from the documentation.</p> <p>Now try out your site:</p> <pre><code>mkdocs serve\n</code></pre> <p>Finally, you can build a static version of your site to host on the internet:</p> <pre><code>mkdocs build\n</code></pre>","tags":["productivity"]},{"location":"material-for-mkdocs/#past-solutions","title":"Past Solutions","text":"<p>This is by no means a comprehensive review, but to give you an idea of how many times I've messed with this problem, here's a list of other blog solutions I've tried out (in no particular order):</p> <ul> <li>Wordpress (Yikes)</li> <li>Ghost</li> <li>Docusaurus</li> <li>Hugo</li> <li>Flutter (an ambitious attempt to build a custom blog)</li> <li>Jekyll</li> <li>Markdown Sitegen (Another attempt at building a custom blog)</li> <li>Custom Next.js site (Again with the DIY blog!)</li> </ul>","tags":["productivity"]},{"location":"material-for-mkdocs/#code-tour-current-solution","title":"Code Tour - Current Solution","text":"<p>Check out the video for this part!</p>","tags":["productivity"]},{"location":"material-for-mkdocs/#material-for-mkdocs-it-just-works","title":"Material for Mkdocs - It Just Works","text":"<p>Check out the video for this part!</p>","tags":["productivity"]},{"location":"material-for-mkdocs/#side-note-squidfunk","title":"Side Note: SquidFunk","text":"<p>Check out the video for this part!</p>","tags":["productivity"]},{"location":"pkos-20/","title":"OS20: Researching PCI (Peripheral Component Interconnect)","text":"<p>In this video, we make massive improvements to stdlib, add memset and memcpy, and most importantly, allow ourselves to get out of VGA (graphics) mode once we enter it.</p> <p></p>","tags":["assembly","c","tutorial"]},{"location":"pkos-20/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Debugging Walkthrough</li> <li>2:23 Full System Demo</li> <li>2:27 Demo on Real Hardware</li> <li>3:00 Slides: Major Changes</li> <li>6:06 Notes Walkthrough</li> <li>7:28 Merge Request Walkthrough</li> </ul>","tags":["assembly","c","tutorial"]},{"location":"pkos-20/#notes","title":"Notes","text":"<ul> <li>Only waste multiple lifetimes if you want hi res! Low res VGA is not too hard  </li> <li>VGA resources osdev  <ul> <li>http://www.osdever.net/FreeVGA/vga/vga.htm</li> </ul> </li> <li>Can fix up the cursor:  <ul> <li>http://www.osdever.net/FreeVGA/vga/textcur.htm</li> </ul> </li> <li>Absolutely need a better way of analyzing memory - VGA and regular mem</li> <li>Installed ghex for exploring <code>dump-guest-memory</code><ul> <li>In qemu: <ul> <li><code>dump-guest-memory mem.bin</code></li> <li><code>ghex mem.bin</code>, CTL-F for stuff</li> </ul> </li> </ul> </li> <li>https://qemu.readthedocs.io/en/latest/system/monitor.html<ul> <li><code>info ramblock</code><ul> <li>Has a vga ramblock etc</li> </ul> </li> <li><code>memsave\u00a0addr\u00a0size\u00a0file</code></li> <li><code>pmemsave addr size file</code></li> <li><code>info mtree</code></li> </ul> </li> <li>https://qemu.readthedocs.io/en/latest/devel/memory.html<ul> <li>QEMU models:<ul> <li>Regular RAM</li> <li>Memory-mapped IO (MMIO)</li> <li>Rerouting physical memory</li> </ul> </li> </ul> </li> <li>Acyclic graph of MemoryRegion objects</li> <li>Types of regions<ul> <li>RAM</li> <li>MMIO</li> <li>ROM</li> <li>ROM device</li> <li>IOMMU</li> <li>container (of other memory regions, for grouping)</li> <li>alias</li> <li>reservation</li> </ul> </li> <li>https://www.qemu.org/2018/02/09/understanding-qemu-devices/<ul> <li>Understanding QEMU Devices</li> <li>\"Most bare-metal machines are basically giant memory maps, where software poking at a particular address will have a particular side effect\"</li> <li>x86 has two memory spaces - main and I/O</li> <li>Relevant to future video:<ul> <li>\"how to manage an IDE disk - the driver is merely software that is programmed to make specific I/O requests to a specific subset of the memory map (wherever the IDE bus lives, which is specific to the hardware board).\"</li> </ul> </li> </ul> </li> <li>http://www.osdever.net/FreeVGA/vga/vgamem.htm<ul> <li>Accessing VGA memory</li> <li>RAM Enable: Do we listen to the CPU?</li> <li>Memory Map Select: Where do we read from?</li> <li>00 -- A0000h-BFFFFh -- 128K<ul> <li><code>pmemsave 0xa0000 128000 00.bin</code></li> </ul> </li> <li>01 -- A0000h-AFFFFh -- 64K<ul> <li><code>pmemsave 0xa0000 64000 01.bin</code></li> </ul> </li> <li>10 -- B0000h-B7FFFh -- 32K<ul> <li><code>pmemsave 0xa0000 32000 10.bin</code></li> </ul> </li> <li>11 -- B8000h-BFFFFh -- 32K<ul> <li><code>pmemsave 0xa0000 32000 11.bin</code></li> </ul> </li> </ul> </li> <li>https://www.kraxel.org/blog/2019/09/display-devices-in-qemu/<ul> <li>Display Devices in QEMU</li> </ul> </li> <li>https://blog.reds.ch/?p=1379<ul> <li>Accessing the RAM of a QEMU Emulated System from another Process</li> <li>Can map qemu to /dev/shm file</li> </ul> </li> <li>How do we check RAM enable, Memory Map Select fields on VGA?</li> <li>Which parts of memory can we save stuff in without breaking everything?</li> <li>https://wiki.osdev.org/Memory_Map_(x86)<ul> <li>Memory Map (x86)</li> <li>\"The region of RAM above 1 MiB is not standardized, well-defined, or contiguous.\"</li> <li>I guess that means we just go for it??</li> <li>0x00100000-0x00EFFFFF: RAM - free for use if it exists</li> </ul> </li> <li><code>info mtree</code> seems to have various named regions (a DAG) <pre><code>(qemu) info mtree\naddress-space: memory\n  0000000000000000-ffffffffffffffff (prio 0, i/o): system\n    0000000000000000-0000000007ffffff (prio 0, i/o): alias ram-below-4g @pc.ram 0000000000000000-0000000007ffffff\n</code></pre></li> <li>Trying to access fields</li> <li>http://www.osdever.net/FreeVGA/vga/graphreg.htm#06<ul> <li>Graphics Address Register, Graphics Data Register</li> <li>Address reg: 0x3CE</li> <li>Data reg: 0x3CF</li> <li>Misc graphics reg: Index 0x06</li> </ul> </li> <li>http://www.osdever.net/FreeVGA/vga/vgareg.htm<ul> <li>Accessing Graphics Registers: each have two unique read/write ports<ul> <li>First: Address Register. Second: Data Register</li> <li>Best to save/restore address register (in case you're in an ISR)</li> <li>Steps<ul> <li> <ol> <li>Input the value of address register, save it (inb)</li> </ol> </li> <li> <ol> <li>Output index of desired data reg to addr reg</li> </ol> </li> <li> <ol> <li>Read value of data reg, save if needed</li> </ol> </li> <li>4-5 only apply if writing</li> <li> <ol> <li>Restore addr reg value</li> </ol> </li> </ul> </li> </ul> </li> <li>Accessing external registers<ul> <li>Simpler - just read/write to their ports</li> </ul> </li> </ul> </li> <li>So for us that looks like:<ul> <li>RAM Enable - External Register / General Register<ul> <li>Read port 0x3CC</li> </ul> </li> <li>Memory Map Select - Graphics Register<ul> <li>Read port 0x3CE, save this value</li> <li>Write 0x06 to 0x3CE</li> <li>Read 0x3CF - this is misc graphics reg value</li> <li>Write 0x3CE with original value</li> </ul> </li> </ul> </li> <li>Okay - RAM Enable is 1, Memory Select is 11, which is 0xB8000 - MAKES SENSE!</li> <li>http://www.osdever.net/FreeVGA/vga/seqreg.htm<ul> <li>Can select various character sets</li> </ul> </li> <li>https://wiki.osdev.org/VGA_Hardware#The_Sequencer<ul> <li>\"The Sequencer either operates in text (alphanumeric) mode or graphics mode\"</li> </ul> </li> <li>https://www.ardent-tool.com/video/VGA_Video_Modes.html <p>There are five tasks you must perform to coordinate the different components of the VGA subsystem: - Program the CRTC. - Program the sequencer. - Select a dot-clock frequency. - Specify the displayed character height. - Update relevant ROM BIOS variables.</p> </li> <li>Control components<ul> <li>CRT controller (CRTC)</li> <li>Sequencer</li> <li>Attribute controller</li> <li>Graphics controller</li> </ul> </li> <li>Create your own video modes!</li> <li>Video mode characteristics<ul> <li>Vertical resolution: rows of pixels (scan lines) on screen</li> <li>Horizontal resolution: number of characters or pixels per row</li> <li>Data representation in buffer</li> <li>Attribute decoding: colors, blinking, etc.</li> </ul> </li> <li>Horizontal/vertical resolution is flexible; data rep/attributes are constrained by hardware</li> <li>Resolution is a matter of timing<ul> <li>VGA output signal timing controls electron beam in video monitor</li> </ul> </li> <li>Character clock = unit of time. Corresponds to 8 pixels in graphics mode, 8 or 9 in alphanumeric mode</li> <li>Three rates to consider<ul> <li>Dot rate: rate at which video subsystem displays pixels. Established by dot clock</li> <li>Horizontal scan rate: number of scan lines displayed per second</li> <li>Vertical scan rate: refresh rate. Number of times per second screen refreshes</li> </ul> </li> <li>Bits 0 through 4 of CRTC register 0x09 control displayed height of alphanum chars</li> <li>http://www.osdever.net/FreeVGA/vga/vgaseq.htm<ul> <li>\"When the Alphanumeric Mode Disable field is set to 1, the sequencer operates in graphics mode where data in memory references pixel values, as opposed to the character map based operation used for alphanumeric mode.\"</li> </ul> </li> <li>https://files.osdev.org/mirrors/geezer/osd/graphics/modes.c<ul> <li>(copied code for writing regs, etc)</li> </ul> </li> <li>https://forum.osdev.org/viewtopic.php?f=1&amp;t=10910<ul> <li>Discussion about how to implement memcpy</li> </ul> </li> <li>https://sites.google.com/site/microprocessorsbits/string-instructions/rep<ul> <li>Explanation of REP assembly</li> </ul> </li> <li>https://docs.oracle.com/cd/E19620-01/805-4693/instructionset-64/index.html<ul> <li>Explanation of variations of REP</li> <li>rep movsb: Copy byte from esi to edi</li> <li>repz stosl: copy eax to edl</li> </ul> </li> <li>https://medium.com/@ophirharpaz/a-summary-of-x86-string-instructions-87566a28c20c<ul> <li>Has a nice cheat sheet of x86 string instructions</li> <li>rep<ul> <li><code>movsb</code>: move byte from <code>*ESI</code> to <code>*EDI</code></li> <li><code>lodsb</code>: load a byte from <code>*ESI</code> to <code>EAx</code></li> <li>stosb: store a byte from EAx into *EDI</li> </ul> </li> </ul> </li> <li>https://members.tripod.com/vitaly_filatov/ng/asm/asm_000.115.html<ul> <li>stosb: copy al to di</li> </ul> </li> </ul>","tags":["assembly","c","tutorial"]},{"location":"daw-1/","title":"DAW1: Let's change music FOREVER","text":"<p>I pitch an idea, I write some code... what else could you ask for?</p> <p></p>","tags":["design","python"]},{"location":"daw-10/","title":"DAW10: ResourceManager is DONE","text":"<p>At last, we've finished refactoring all the code into a single, well-tested ResourceManager class and updated the CLI to call this new code. All tests are passing; we have some new code debt, but that's okay for now.</p> <p></p>","tags":["python"]},{"location":"daw-10/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Merging #11 by LTstrange</li> <li>1:27 Debugging test failure</li> <li>2:04 Writing test_get_instrument from Git</li> <li>5:40 Mocking get_clip calls</li> <li>7:16 Tip: How to check what is being called</li> <li>7:59 How to patch external dependencies</li> <li>9:10 clone_git_repo implementation</li> <li>12:23 Catching a mistake with the tests!</li> <li>13:33 FULL TEST of new architecture</li> <li>15:14 Why the config loader method is good</li> <li>15:40 Finally working</li> <li>16:02 What's next / outro</li> </ul>","tags":["python"]},{"location":"daw-11/","title":"DAW11: Generating a Tauri Project","text":"<p>In this video, we generate a Tauri project and get it running. Nothing crazy, we just add a new button to print something to the console. Also, a look at the roadmap, what's next, and how Tauri can interact with our existing Python CLI.</p> <p></p>","tags":["python"]},{"location":"daw-11/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Organized Roadmap</li> <li>1:20 Merging #9</li> <li>1:29 Quick research: PyO3 and Tauri</li> <li>2:02 Tauri Quickstart</li> <li>3:39 It works!</li> <li>4:13 First change</li> <li>4:44 First thoughts, next steps</li> <li>5:14 Adding a custom button with a println</li> <li>5:51 Wrap-up</li> </ul>","tags":["python"]},{"location":"daw-12/","title":"DAW12: Tauri filepicker","text":"<p>Wow, who knew how easy it was to pick files using Tauri! Not only do we pick a file, but we pick a plaintext-daw song file AND invoke Python from Tauri, all in just a few lines of code.</p> <p></p>","tags":["python"]},{"location":"daw-12/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Momentum</li> <li>0:30 Merging Create Tauri App</li> <li>0:38 Intro</li> <li>1:20 Simplest possible test</li> <li>1:53 Using Command to make shell call</li> <li>2:01 Open Project button</li> <li>2:22 Failing at the JavaScript API</li> <li>2:51 Message dialog using Rust (via Tauri)</li> <li>3:29 File picker working!</li> <li>4:27 Render working!</li> <li>5:07 Outro, what's next</li> </ul>","tags":["python"]},{"location":"daw-13/","title":"DAW13: 3 ways to create a window in Tauri","text":"<p>Along with a number of other little fixes, we find three ways to create a new window in Tauri. This lets us launch a new \"editor\" window after the \"open project\" window has done its job.</p> <p></p>","tags":["python"]},{"location":"daw-13/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:20 Merging #14</li> <li>0:27 Deleting demo code</li> <li>0:47 Changing window size</li> <li>1:00 Looking at Yuuki's parsing code</li> <li>1:34 Filepicker filters, default dir</li> <li>2:20 Opening a new window: game plan</li> <li>2:42 Method 1: Static config</li> <li>3:13 Method 2: JavaScript page change</li> <li>3:46 Method 3: Dynamic Window via Rust</li> <li>4:38 Changing the dynamic window's label</li> <li>4:45 Refactoring</li> <li>5:08 How do we store state?</li> <li>5:46 Outro</li> </ul>","tags":["python"]},{"location":"daw-14/","title":"DAW14: Deciphering State Management in Tauri","text":"<p>Through trial and error, I discover how Tauri manages state - and how NOT to manage state in Rust (using mutable global variables).</p> <p></p>","tags":["python"]},{"location":"daw-14/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro/Summary</li> <li>0:46 Merging #13 (LTstrange)</li> <li>2:02 Where we left off with Tauri</li> <li>2:20 Researching global mutable state (don't do it)</li> <li>3:23 Simple Tauri State Management article (thank you!)</li> <li>3:56 Strange Mutex, manage, Default syntax</li> <li>4:17 Set state working</li> <li>4:35 Tauri hot reload rocks</li> <li>4:47 New files</li> <li>5:11 How to get Rust state into JavaScript</li> <li>6:52 Wrapping up</li> </ul>","tags":["python"]},{"location":"daw-2/","title":"DAW2: Config Magic with Python Dataclasses","text":"<p>Researching SoundFonts and MIDI, parsing the config, and more</p> <p></p>","tags":["design","python","research"]},{"location":"daw-2/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:26 Research: Soundfont, MIDI</li> <li>2:50 Design: Config</li> <li>5:29 Future Idea: Performances, Takes</li> <li>5:52 Next Actions</li> <li>7:25 Coding</li> </ul>","tags":["design","python","research"]},{"location":"daw-3/","title":"DAW3: Rendering Two Notes","text":"<p>In this video, we parse the config for our first song and render two separate sound files into a single output file. Not quite useful yet, but it's getting better. Baby steps!</p> <p></p>","tags":["python"]},{"location":"daw-4/","title":"DAW4: Chords? Tempo? SYNTH??","text":"<p>Music to my ears! Chords, tempo, GUI, synthesizer - buckle up!</p> <p></p>","tags":["python"]},{"location":"daw-4/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Demo 1: Chords + Tempo</li> <li>0:18 Demo 1 Timing Issues</li> <li>1:04 Demo 2: Synth by LTstrange</li> <li>1:39 Join the Discord!</li> <li>2:04 Overview</li> <li>2:31 Roadmap, New ideas</li> <li>2:48 Demo: GUI</li> <li>3:06 Code: GUI</li> <li>3:31 Code: Render Tempo/Chords</li> </ul>","tags":["python"]},{"location":"daw-5/","title":"DAW5: Loading Piano from Git","text":"<p>In this video, we fix BPM calculation, write a ton of messy code, and end up loading some piano samples from a remote Git repository.</p> <p>Also, I show how to translate note pitch in Audacity.</p> <p></p>","tags":["python"]},{"location":"daw-6/","title":"DAW6: Integrating Synth Code","text":"<p>In this video, we merge LTstrange's awesome synth MR and get the main CLI tool to generate music from nothing but the numpy sine function.</p> <p></p>","tags":["python"]},{"location":"daw-6/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Synth demo</li> <li>0:05 Roadmap</li> <li>0:16 Merging #5</li> <li>0:36 Modifications to #3</li> <li>1:36 Merging #3</li> <li>1:38 Plan for Integrating Synth with CLI</li> <li>2:33 Adding the MIT License</li> <li>3:13 Parsing/adding note frequencies</li> <li>4:17 Explanation of working code</li> <li>4:47 Demo (again)</li> <li>4:55 The problem with the demo</li> <li>5:36 Join us</li> </ul>","tags":["python"]},{"location":"daw-7/","title":"DAW7: What's wrong with timing??","text":"<p>This video is a wild goose chase to figure out why I can't seem to calculate the start/end sample of notes properly. </p> <p></p>","tags":["python"]},{"location":"daw-7/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro / Working demo</li> <li>0:44 Feeling defeated (late at night)</li> <li>1:28 A fresh start (in the morning)</li> <li>2:18 Plenty of print statements</li> <li>2:44 Calculating it by hand, on paper</li> <li>3:06 Refactored: still wrong, but closer</li> <li>4:22 BPM driving me insane</li> <li>4:46 Fixed BPM equation (again)</li> <li>6:40 More print statements &amp; hair pulling</li> <li>7:12 THE FIX! 8 CHARACTERS</li> <li>7:33 How it should sound</li> <li>7:54 Piano demo</li> <li>8:05 Visualizing note addition in Audacity</li> <li>9:19 Attempting to fix clipping, Roadmap</li> <li>10:01 New architecture idea</li> <li>10:50 Outro</li> </ul>","tags":["python"]},{"location":"daw-8/","title":"DAW8: New arch, new me","text":"<p>In this video, we review/merge some PRs, then get started implementing a new architecture. The first order of business is to add a ResourceManager to handle all the complex things we do to load wav/mp3 files and generate sounds using our Synth.</p> <p></p>","tags":["python"]},{"location":"daw-8/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Wild Intro</li> <li>0:24 MP3 to NP Code Review/Merge (#7)</li> <li>0:59 Merging Support Synth Instruments (#6)</li> <li>2:04 New Branch for Re-Arch</li> <li>2:17 Creating Test Files for TDD</li> <li>2:50 Smoke Test, Other Failures</li> <li>3:02 ResourceManager: The Big Idea</li> <li>4:07 ResourceManager TDD</li> <li>4:40 Breaking everything because I can</li> <li>5:54 MERGE CONFLICT?!?</li> <li>5:58 Synth clips</li> <li>7:05 Validating fields</li> <li>7:19 Coverage report with pytest-cov</li> <li>7:39 Recap</li> </ul>","tags":["python"]},{"location":"daw-9/","title":"DAW9: Advanced TDD with Pytest","text":"<p>In this video, we use patch.object to test that other methods in the class are called while keeping the test scoped to a single unit - true unit tests!</p> <p>We also continue to apply Test Driven Development (TDD) to create our ResourceManager class, which will serve as a great foundation for the application when it's complete.</p> <p></p>","tags":["python"]},{"location":"daw-9/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Lessons Learned</li> <li>0:54 Merging PR  #10 from LTstrange</li> <li>1:44 Figuring out next steps</li> <li>2:11 Starting get_song</li> <li>2:21 Implementing check_types and refactor</li> <li>3:38 Implementing get_song</li> <li>3:52 Adding patch.object</li> <li>4:16 WARNING! False test pass with called_with method</li> <li>5:11 Changing the Song class</li> <li>5:36 Getting fancy with assert_has_calls</li> <li>6:08 Implementing get_pattern</li> <li>6:10 TIP! Argument order for patch decorators</li> <li>6:43 Finishing up get_song</li> <li>7:09 Reordering methods in both files</li> <li>8:06 Implementing get_instrument</li> <li>8:17 Implementing get_pattern</li> <li>8:36 Implementing get_note</li> </ul>","tags":["python"]},{"location":"nextauth/","title":"NextAuth Tutorial - Google & Apple Social Login","text":"<p>Login with Google. Login with Apple. How many times have you seen that button?</p> <p>It should be easy to get social login working with your app, because these things are EVERYWHERE.</p> <p>However, it's not as easy as you would think. There are plenty of little details that are easy to miss along the way.</p> <p>In this tutorial, we'll generate a Next.JS app from scratch and configure login with Google and login with Apple.</p> <p></p> <p>In case you're curious, I only figured all this out because I'm building an app called Boom Languages. You can check it out at boomlanguages.com.</p>","tags":["javascript","tutorial"]},{"location":"nextauth/#project-generation","title":"Project Generation","text":"<p>We'll start by generating the NextJS project. You can pop open the docs if you want to know how I figured it out, or just follow along and trust me on this one.</p> <p>Run the following to generate the app:</p> <pre><code>npx create-next-app@latest pagekey-auth-example\n</code></pre> <p>It's going to ask you a bunch of questions. You can answer them all with the default choice, except for one!. Be sure to not use the App Router. It doesn't seem like NextAuth.js has particularly good support for this new router, because it's not mentioned in any of their docs.</p> <pre><code>&gt; TS: yes\n&gt; ESLint: yes\n&gt; Tailwind: Yes\n&gt; src: No\n&gt; App Router: No  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Very important! next-auth docs are for NOT updated for the app router\n&gt; Import alias: No\n</code></pre> <p>Now jump into the directory it created and start up the dev server.</p> <pre><code>cd pagekey-auth-example\nnpm run dev\n</code></pre> <p>If you visit localhost:3000 in your browser, you'll see a fresh Next.js app waiting for you.</p>","tags":["javascript","tutorial"]},{"location":"nextauth/#creating-the-buttons","title":"Creating the Buttons","text":"<p>Let's create the most basic possible setup - two buttons on a page, one for Google and one for Apple.</p> <p>Keep in mind that we won't be styling the buttons in this tutorial. Google and Apple do this work for us. You can download pre-made buttons and logos from the following links:</p> <ul> <li> <p>Google branding guidelines (click \"Download files\" under Image Files)</p> </li> <li> <p>Apple Button Generator / downloader</p> </li> </ul> <p>For reference, here's what they look like in the Boom Languages app:</p> <p></p> <p>Start by clearing out everything in <code>styles/globals.css</code> except for the tailwind imports. It'll look like this when you're done:</p> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <p>Replace <code>pages/index.tsx</code> with the following, a simple page with a couple of buttons:</p> <pre><code>export default function Home() {\n  const handleLoginWithGoogle = () =&gt; {\n    console.log('Ouch')\n  };\n  const handleLoginWithApple = () =&gt; {\n    console.log('Ouch')\n  };\n  return (\n    &lt;&gt;\n      &lt;div className=\"text-2xl font-bold my-4\"&gt;My App&lt;/div&gt;\n      &lt;button className=\"my-2 p-3 bg-blue-600 text-white font-bold rounded\" onClick={() =&gt; handleLoginWithGoogle()}&gt;Login with Google&lt;/button&gt;\n      &lt;button className=\"my-2 p-3 bg-blue-600 text-white font-bold rounded\" onClick={() =&gt; handleLoginWithApple()}&gt;Login with Apple&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre> <p>Create <code>components/Layout.tsx</code> and add the following to make it look a little better:</p> <pre><code>export default function Layout({ children }: { children: React.ReactNode }) {\n    return (\n        &lt;&gt;\n            &lt;main className='flex flex-col items-center'&gt;\n                {children}\n            &lt;/main&gt;\n        &lt;/&gt;\n    );\n}\n</code></pre> <p>Next, replace the contents of <code>_app.tsx</code> with:</p> <pre><code>import Layout from '@/components/Layout';\nimport '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    &lt;&gt;\n      &lt;Layout&gt;\n        &lt;Component {...pageProps} /&gt;\n      &lt;/Layout&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>","tags":["javascript","tutorial"]},{"location":"nextauth/#adding-nextauth-package","title":"Adding NextAuth Package","text":"<p>Time to add the essential dependency: NextAuth. The docs are here, but again trust me - I'll get us there all in one tutorial.</p> <p>Run the following to install NextAuth:</p> <pre><code>npm i next-auth\n</code></pre> <p>Then, create <code>pages/api/auth/[...nextauth].js</code> and paste the following:</p> <pre><code>import NextAuth from \"next-auth\";\nimport AppleProvider from \"next-auth/providers/apple\";\nimport GoogleProvider from \"next-auth/providers/google\";\n\n\nexport const authOptions = {\n  providers: [\n    AppleProvider({\n      clientId: process.env.APPLE_CLIENT_ID,\n      clientSecret: process.env.APPLE_SECRET\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  cookies: {\n    pkceCodeVerifier: {\n      name: \"next-auth.pkce.code_verifier\",\n      options: {\n        httpOnly: true,\n        sameSite: \"none\",\n        path: \"/\",\n        secure: true,\n      },\n    },\n  },\n  callbacks: {\n    session: async ({ session }) =&gt; {\n      session.customValue = new Date().toISOString();\n      return Promise.resolve(session);\n    },\n  },\n}\nexport default NextAuth(authOptions)\n</code></pre> <p>Create the <code>.env-sample</code> file to let anyone who clones this repo know which environment variables our app is expecting to use:</p> <pre><code>APPLE_CLIENT_ID=\nAPPLE_SECRET=\nGOOGLE_CLIENT_ID=\nGOOGLE_CLIENT_SECRET=\n</code></pre> <p>And then copy that file into the real <code>.env</code> file:</p> <pre><code>cp .env-sample .env\n</code></pre> <p>Be sure to add <code>.env</code> to <code>.gitignore</code> - it will contain credentials that we don't want to commit to Git!</p> <pre><code>echo .env &gt;&gt; .gitignore\n</code></pre>","tags":["javascript","tutorial"]},{"location":"nextauth/#configuring-login-with-google","title":"Configuring Login with Google","text":"<p>Okay, here's where it gets fun. We actually need to register our app with Google now. In exchange, they'll give us the OAuth credentials that NextAuth needs to work.</p> <p>For this part, if you get stuck, consider checking out the video that accompanies this article, which can be found at the top of the page.</p> <p>The steps are roughly as follow:</p> <ol> <li> <p>Go to https://console.cloud.google.com/. Login with whatever Google account you want to use to manage your app. Agree to the Terms of Service if prompted.</p> </li> <li> <p>Click Create Project.</p> </li> <li> <p>Give it a name. In our case: <code>PageKey Auth Example</code></p> </li> <li> <p>Leave organization blank for now. Click Create.</p> </li> <li> <p>Go to APIs &amp; Services.</p> </li> <li> <p>Go to Credentials.</p> </li> <li> <p>Click Configure Consent Screen.</p> </li> <li> <p>Click Create Credentials &gt; OAuth Client ID.</p> </li> <li> <p>Click configure consent screen</p> </li> <li> <p>Click External, then click Create.</p> </li> <li> <p>For App name, enter something like: <code>PageKey Auth Example</code></p> </li> <li> <p>Choose a logo file for your app.</p> </li> <li> <p>Enter a homepage, privacy policy, and terms of service links. Example:</p> <pre><code>https://pagekey.io\nhttps://pagekey.io/privacy\nhttps://pagekey.io/tos\n</code></pre> </li> <li> <p>Add an authorized domain for your site. In our case: <code>pagekey.io</code></p> </li> <li> <p>Add your email for developer contact info.</p> </li> <li> <p>Save and continue.</p> </li> <li> <p>Click \"Add or remove scopes.\"</p> </li> <li> <p>Add the following scopes:</p> <ul> <li><code>.../auth/userinfo.email</code></li> <li><code>.../auth/userinfo.profile</code></li> </ul> </li> <li> <p>Click Save and Continue.</p> </li> <li> <p>Add your email to the list of test users.</p> </li> <li> <p>Go back to the dashboard.</p> </li> <li> <p>Click Credentials.</p> </li> <li> <p>Click Create Credentials &gt; OAuth Client ID.</p> </li> <li> <p>For App type, choose Web application.</p> </li> <li> <p>Enter a name. For example: <code>PageKey Auth Example (Web)</code></p> </li> <li> <p>For Authorized JavaScript origins, enter the following, replacing <code>pagekey.io</code> with your domain:</p> <pre><code>http://localhost:3000\nhttps://pagekey.io (put your domain here)\n</code></pre> </li> <li> <p>For Authorized redirect URIs, enter the following, replacing <code>pagekey.io</code> with your domain:</p> <pre><code>http://localhost:3000/api/auth/callback/google\nhttps://pagekey.io/api/auth/callback/google\n</code></pre> </li> <li> <p>Click Create</p> </li> <li> <p>Copy the Client ID and paste it into <code>.env</code> as the value for <code>GOOGLE_CLIENT_ID</code>.</p> </li> <li> <p>Copy the Client secret and paste it into <code>.env</code> as the value for <code>GOOGLE_CLIENT_SECRET</code>.</p> </li> </ol>","tags":["javascript","tutorial"]},{"location":"nextauth/#testing-login-with-google","title":"Testing Login with Google","text":"<p>Let's make sure this thing is working. We just need to update our Google button handler:</p> <pre><code>import { signIn } from 'next-auth/react';\n\nconst handleLoginWithGoogle = () =&gt; {\n  signIn(\"google\");\n};\n</code></pre> <p>Then, we'll reconfigure the logic a bit:</p> <pre><code>  import { signIn, signOut, useSession } from 'next-auth/react';\n  const { data: session } = useSession();\n\n  ...\n\n  let loginElem = (\n    &lt;&gt;\n      &lt;button className=\"m-4p-3 bg-blue-600 text-white font-bold rounded\" onClick={() =&gt; handleLoginWithGoogle()}&gt;Login with Google&lt;/button&gt;\n      &lt;button className=\"m-4 p-3 bg-blue-600 text-white font-bold rounded\" onClick={() =&gt; handleLoginWithApple()}&gt;Login with Apple&lt;/button&gt;\n    &lt;/&gt;\n  );\n\n  if (session &amp;&amp; session.user) {\n    loginElem = (\n      &lt;div&gt;\n        &lt;div&gt;\n          Logged in as {session.user.email}\n        &lt;/div&gt;\n        &lt;button onClick={() =&gt; signOut()}&gt;Logout&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  return (\n    &lt;&gt;\n      &lt;div className=\"text-2xl font-bold my-4\"&gt;My App&lt;/div&gt;\n      {loginElem}\n    &lt;/&gt;\n  );\n</code></pre> <p>Oops! Looks like we need a SessionProvider</p> <p></p> <p>This is a quick fix. We'll just update <code>_app.tsx</code> like this:</p> <pre><code>import { SessionProvider } from 'next-auth/react';\n...\n      &lt;SessionProvider&gt;\n        &lt;Layout&gt;\n          &lt;Component {...pageProps} /&gt;\n        &lt;/Layout&gt;\n      &lt;/SessionProvider&gt;\n...\n</code></pre> <p>Now try logging in with Google.</p> <p>It should work!</p> <p></p>","tags":["javascript","tutorial"]},{"location":"nextauth/#configuring-login-with-apple","title":"Configuring Login with Apple","text":"<p>Of course this is going to be a pain.</p> <ol> <li> <p>Login to developer.apple.com</p> </li> <li> <p>Go to Account</p> </li> <li> <p>Click Identifiers</p> </li> <li> <p>In the top right, click App IDs and change it to Services IDs. (Ridiculously tricky step)</p> </li> </ol> <p></p> <ol> <li> <p>Click the plus to register a new Services ID.</p> </li> <li> <p>Click continue. Ad a description and identifier.</p> </li> </ol> <p></p> <ol> <li> <p>Click your new service id.</p> </li> <li> <p>Click \"Enabled' next to \"Sign in with Apple\".</p> </li> <li> <p>Click \"Configure\"</p> </li> <li> <p>Select your primary app id - assumption is that you have already created this elsewhere</p> </li> <li> <p>For domains, put your web domain - <code>boom.pagekey.io</code> for me.</p> </li> <li> <p>In return URLs, put something like <code>https://boom.pagekey.io/api/auth/callback/apple</code>. Replace <code>boom.pagekey.io</code> with the domain where you'll host your app.</p> </li> <li> <p>Click Done.</p> </li> </ol>","tags":["javascript","tutorial"]},{"location":"nextauth/#generating-the-key-getting-the-secret","title":"Generating the Key, Getting the Secret","text":"<p>Now we have to get the <code>APPLE_CLIENT_ID</code> and <code>APPLE_SECRET</code> environment variables. Unfortunately, Apple makes this pretty complicated. We'll start by generating a key.</p> <ol> <li> <p>Go to Keys on Apple Developer.</p> </li> <li> <p>Click the plus to create a new key. Give it a name. Click Sign in with Apple. Click Configure. Select your app from the list. Click Save. Click Continue. Click Register.</p> </li> <li> <p>Note the Key ID - copy it into a note, you'll need it later. Then press Download.</p> </li> <li> <p>Open the private key file that just downloaded in a text editor. It should look something like this:</p> <pre><code>-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49tgEGCCqGSM49AwEHBHkwdSIBAQQg6XgE1Gh6AOA6ShuR\nPomi8sUETCJ7jxBL154Ud+a2OgCgYIKoZIzj0DArehRANCAARF4FKAbPdpTvR5\nQ5fGoR2tKBYmV4HX/uOkPVu3CIL4lwKaAqOqop5FQ3I4lV7JKQ0tgAytx8JKn9NL\nNgQlPaby\n-----END PRIVATE KEY-----\n</code></pre> </li> <li> <p>Paste the key into your terminal like this:</p> <pre><code>export APPLE_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\nMIGTAgEAMBMGByqGSM49tgEGCCqGSM49AwEHBHkwdSIBAQQg6XgE1Gh6AOA6ShuR\nPomi8sUETCJ7jxBL154Ud+a2OgCgYIKoZIzj0DArehRANCAARF4FKAbPdpTvR5\nQ5fGoR2tKBYmV4HX/uOkPVu3CIL4lwKaAqOqop5FQ3I4lV7JKQ0tgAytx8JKn9NL\nNgQlPaby\n-----END PRIVATE KEY-----\"\n</code></pre> <p>Note: If you have problems with this, you can also try replacing all line breaks with <code>\\\\n</code> and see if that helps.</p> </li> <li> <p>Look in the top right corner of Apple Developer to locate your Team ID.</p> <p></p> </li> <li> <p>Copy this script into the <code>scripts</code> folder of your project and run it like this:</p> <pre><code>chmod +x ./scripts/apple-gen-secret.mjs\nexport APPLE_KEY_ID=paste-your-key-id-from-above\nexport APPLE_TEAM_ID=paste-your-team-id\nexport APPLE_CLIENT_ID=io.pagekey.boom # replace with your domain\n# note that APPLE_PRIVATE_KEY has already been set above\n./scripts/apple-gen-secret.mjs --kid $APPLE_KEY_ID --iss $APPLE_TEAM_ID --private_key $APPLE_PRIVATE_KEY --client-id $APPLE_CLIENT_ID\n</code></pre> <p>It should generate something like this:</p> <pre><code>Apple client secret generated. Valid until: Thu Feb 15 2024 07:51:54 GMT-0500 (Eastern Standard Time)\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlBsZWFzZSBkb24ndCBoYWNrIG1lIDopIiwiaWF0IjoxNTE2MjM5MDIyfQ.yNMm_loH6ybgHaRkKlPlbPf6pPoYH3ajvDLpBjUdYNk\n</code></pre> </li> <li> <p>Copy that entire token starting with <code>ey</code>. Now we have all the data we need to fill out our .env file!</p> <pre><code>APPLE_CLIENT_ID=io.pagekey.boom # replace with your domain\nAPPLE_SECRET=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlBsZWFzZSBkb24ndCBoYWNrIG1lIDopIiwiaWF0IjoxNTE2MjM5MDIyfQ.yNMm_loH6ybgHaRkKlPlbPf6pPoYH3ajvDLpBjUdYNk\n</code></pre> </li> </ol> <p>That's pretty much all we need to do for Apple login.</p> <p>There are fancy ways to test this using <code>localhost</code>, but I didn't bother because I find Apple really annoying. I don't want to generate certs, etc. So I just deploy and test on my production app. Try it out at boomlanguages.com to see it in action.</p>","tags":["javascript","tutorial"]},{"location":"nextauth/#conclusion","title":"Conclusion","text":"<p>Thanks for following along. If you enjoyed this post, consider signing up for the PageKey mailing list to stay up-to-date with all the latest happenings of PageKey.</p>","tags":["javascript","tutorial"]},{"location":"pkos-21/","title":"OS21: More PCI + Getting Started with Storage (IDE, SATA)","text":"<p>Our entire world runs on computers, but few understand how they work at the lowest level. Everything, from your phone and laptop to the flight controllers on an airliner, has at least one computer chip in it called the CPU, which tells it what to do.</p> <p></p> <p>The operating system is supposed to handle all of the low-level operations, including interfacing with hardware. But what does that interface actually look like? It's easy enough to write a file using <code>file.write()</code> in Python, but this is just an abstraction for what's really happening. Somewhere, under the covers of layers and layers of abstraction, there's a metal disk spinning, or an solid state drive, and you're rearranging zeros and ones on that drive.</p> <p>In this series, we throw away all of those comfortable abstractions that are provided to us and do bare-metal programming. Our code runs directly on the processor - there's no standard library, there are no system calls, there's no API other than the processor itself. If figuring out how to make things happen with only the processor and nothing else sounds exciting to you, then this series is for you.</p> <p>PKOS stands for PageKey Operating System, which is an operating system built from scratch, on video, with each lesson learned along the way explained so that you can easily understand it and apply it to your own projects.</p> <p>In this lesson, we continue our exploration of PCI, clean up the codebase a bit, attempt (unsuccessfully) to use Rust, and begin researching how to write a storage device driver.</p>","tags":["c"]},{"location":"pkos-21/#what-we-did","title":"What We Did","text":"<p>Here's a quick summary of what was accomplished since the last video. The most important additions will be expanded upon in the Deep Dives section below.</p> <ul> <li>Significantly refined <code>pci.c</code><ul> <li>Added <code>struct PCI_Device</code></li> </ul> </li> <li>Code improvements<ul> <li>Easier int-to-string calls</li> <li>Screen wrap</li> </ul> </li> <li>Rust sidequest: unsuccessful</li> <li>Researched IDE drivers</li> <li>Researched SATA drivers</li> <li>Attached SATA device to QEMU</li> </ul>","tags":["c"]},{"location":"pkos-21/#lessons-learned","title":"Lessons Learned","text":"<p>Working through the code for this video yielded a ton of great lessons. Here's what I found:</p>","tags":["c"]},{"location":"pkos-21/#structs-are-wonderful","title":"Structs are wonderful","text":"<p>I was dragging my feet on implementing a struct to hold the PCI device data I was grabbing from the configuration memory, but I was amazed at how easy it was to do and how much cleaner the code got when I did. Just look at this lovely little struct:</p> <pre><code>struct PCI_Device {\n    u16 vendor_id;\n    u16 device_id;\n    u8 base_class;\n    u8 sub_class;\n    u8 prog_interface;\n    u16 command;\n    u16 status;\n};\n</code></pre> <p>With this in place, I was able to abstract away all of the bitshifting that was required to get this data from the PCI configuration memory and just return the finished object. This made the implementation of <code>lspci()</code> much cleaner and easier to read, and it will avoid duplicating code when we write the storage device driver.</p>","tags":["c"]},{"location":"pkos-21/#pci-class-and-subclass-identify-device-function","title":"PCI Class and Subclass: Identify device function","text":"<p>Every PCI device has a Vendor ID and a Device ID, and you can use these two numbers to look up exactly what that device is - just type it in on pcilookup.com and see what you come up with!</p>","tags":["c"]},{"location":"pkos-21/#rust-bare-metal-i686-support-is-dodgy","title":"Rust bare-metal i686 support is dodgy","text":"<p>I was sad to find that 32-bit x86, also known is i386 or i686, does not have the best support in Rust for bare-metal programming. There is no default <code>i686-unknown-none</code> toolchain, which means that you have to define your own based off of the <code>i686-unknown-linux-gnu</code>. I tried my best, but couldn't seem to get a multiboot kernel to compile.</p> <p>I'd love to use Rust if I could figure it out, but it wasn't in the cards for this episode - we'll stick to the simplicity of C for now.</p>","tags":["c"]},{"location":"pkos-21/#storage-drivers-ide-pata-and-ahci-sata-are-very-different","title":"Storage Drivers: IDE (PATA) and AHCI (SATA) are very different","text":"<p>I spent a fair amount of time trying to get the IDE controller that was attached to QEMU by default working. I'm not sure if it's actually what I need - it seemed to be a cdrom drive.</p> <p>From what I gathered, IDE/PATA is no longer used for hard drives, but may still be used for CDs. SATA/AHCI, on the other hand, are still very much relevant. See the deep dives below for more information on these technologies.</p>","tags":["c"]},{"location":"pkos-21/#deep-dives","title":"Deep Dives","text":"<p>Let's dive into the details of the code for this episode.</p>","tags":["c"]},{"location":"pkos-21/#parsing-pci-fields-into-struct","title":"Parsing PCI Fields into Struct","text":"<p>The PCI configuration memory layout was essential in figuring out how to parse the fields:</p> <p></p> <p>Recall that we have a working <code>read_pci_port</code> function at our disposal, and it takes four single-byte arguments: <code>bus</code>, <code>slot</code>, <code>function</code>, and <code>offset</code>. For a given PCI device, we can make multiple calls to this function, changing the <code>offset</code> field to grab the variables we want out of the structure above. For example, here's a snippet of how we get the vendor and device ID:</p> <pre><code>struct PCI_Device device;\nu32 pci_data = read_pci_port(bus, slot, function, 0);\ndevice.vendor_id = pci_data &amp; 0xffff;\ndevice.device_id = (pci_data &gt;&gt; 16) &amp; 0xffff;\n</code></pre> <p>As you can see, we grab 32-bits at offset 0, then bitshift/AND the result until we isolate the fields that we need.</p> <p>Check out this early look at the lspci method:</p> <p></p> <p>It looks great! The only problem is that there are quite a few devices with Vendor ID \"pppp.\" That can't be right - so what's going on here? Well...</p>","tags":["c"]},{"location":"pkos-21/#ignoring-non-existent-pci-devices","title":"Ignoring Non-Existent PCI Devices","text":"<p>The Linux kernel finds non-existent PCI devices by checking if the PCI class field is set to <code>0xFFFFFFFF</code> [1]. OSDev mentions that you can also check whether the Vendor ID field is set to <code>0xFFFF</code> [2]. Though both probably work, I went with the latter technique. Applying this knowledge will save our <code>lspci()</code> function some work by skipping any further processing when it detects a nonexistent device:</p> <pre><code>struct PCI_Device device = get_pci_device(i, j, k);\nif (device.vendor_id == 0xFFFF) {\n    continue;\n}\n</code></pre> <p>Now we only see a few devices, and none of them have invalid fields for Vendor ID anymore!</p> <p></p>","tags":["c"]},{"location":"pkos-21/#looking-up-pci-devices","title":"Looking Up PCI Devices","text":"<p>Looking at the above screenshot, how much can you tell about the devices listed? At first, I had no clue where to start with deciphering these fields. However, a quick search showed me that I can use pcilookup.com to find out what each of these devices are. For example, looking up Vendor ID 8086 and Device 7010 yields:</p> <p></p> <p>This matches up with the QEMU documentation, and with the output of <code>info qtree</code>, so it seems like our <code>lspci()</code> method is accurate.</p>","tags":["c"]},{"location":"pkos-21/#pci-base-class-subclass-and-programming-interface","title":"PCI Base Class, Subclass, and Programming Interface","text":"<p>The PCI fields list above shows one big 3-byte chunk for \"Class Code,\" but documentation sometimes referred to the \"subclass\" field, which I couldn't seem to find anywhere. However, it did seem to be a powerful way to tell what type of device you were dealing with - as an example, class 1 indicates a mass storage device, and class 1 subclass 1 indicates an IDE interface [3].</p> <p>The specification documents for PCI don't seem to be freely available online - you have to login to PCI-SIG's website to download any of them. However, someone hosted the \"PCI Local Bus Specification\" from 2004 on their website [4], so I was able to take a look. On page 217, we see:</p> <p>The Class Code register is read-only and is used to identify the generic function of the device and, in some cases, a specific registerlevel programming interface. The register is broken into three bytesize fields. The upper byte (at offset 0Bh) is a base class code which broadly classifies the type of function the device performs. The middle byte (at offset 0Ah) is a sub-class code which identifies more specifically the function of the device. The lower byte (at offset 09h) identifies a specific register-level programming interface (if any) so that device independent software can interact with the device. Encodings for base class, sub-class, and programming interface are provided in Appendix D. All unspecified encodings are reserved.</p> <p>So, this just means that the three bytes allocated for \"Class Code\" are one byte each, representing base class at <code>0x0b</code>, subclass at <code>0x0a</code>, and programming interface at <code>0x09</code>. Simple enough! We can parse those fields with this snippet:</p> <pre><code>pci_data = read_pci_port(bus, slot, function, 0x09);\ndevice.base_class = (pci_data &gt;&gt; 16) &amp; 0xff;\ndevice.sub_class = (pci_data &gt;&gt; 8) &amp; 0xff;\ndevice.prog_interface = pci_data &amp; 0xff;\n</code></pre> <p>I cheated a little bit by reading with offset <code>0x09</code> to save some bitshifting. I'm not sure if there is some kind of performance impact for not reading at 4-byte boundaries. There probably is, but for our purposes, does it really matter?</p>","tags":["c"]},{"location":"pkos-21/#attempts-to-use-rust","title":"Attempts to use Rust","text":"<p>I attempted to create a multiboot i386 kernel using Rust. If I had been successful, I could have linked in all of the existing C and assembly code into that executable, and any new development could have been in Rust! Unfortunately, I hit some roadblocks.</p> <p>A StackOverflow answer by phip1611 [5] informed me that while there's no built-in target for bare-metal 32-bit x86 code, you can define a custom target by putting a JSON file at the root of the project and pointing to it in <code>.cargo/config.toml</code>. Using the <code>#![no_std]</code> and <code>#![no_main]</code> macros turn off the standard library and main method, which enable bare-metal execution.</p> <p>I also found an awesome tutorial called \"Writing an OS in Rust\" [6] which explained each piece of the puzzle very clearly. However, the whole tutorial was written for x86_64. Maybe the time to upgrade PKOS is coming, but I'm not ready to let go of 32-bit yet.</p> <p>After messing with <code>xargo</code> for cross compiling for quite a while, I finally gave up on this path - for now.</p>","tags":["c"]},{"location":"pkos-21/#what-is-ide","title":"What is IDE?","text":"<p>IDE stands for Integrated Drive Electronics. It's an electrical standard for disk storage devices released in 1990. It was originally referred to as Advanced Technology Attachment (ATA), but after the introduction of Serial ATA (SATA), it was renamed to Parallel ATA (PATA) [7].</p> <p>We can identify IDE devices using the Class Code field in the PCI configuration space. OSDev wiki [8] tells us:</p> <p>If the class code is 0x01 (Mass Storage Controller) and the subclass code is 0x01 (IDE), the device is an IDE controller.</p> <p>This takes care of the first two fields, but what about that pesky Programming Interface byte? I found something that says it's used to indicate whether the primary and secondary storage devices are programmable, as well as their operating mode [9].</p> <p></p> Photo credits: [9] <p>I was able to find the specification for a PCI IDE card online, and I particularly enjoyed seeing that the class codes matched up with what I had seen so far from other sources:</p> <p></p> Photo credits: [11] <p>Another potentially helpful resource was a guide for writing an IDE driver from the RTEMS real time operating system's documentation [12]. I was also able to find the source code on GitHub [13]. It seems like the ATA driver in <code>ata.c</code> uses the (perhaps) lower-level functions in <code>ide_controller.c</code>, but I'm not quite sure.</p> <p>RTEMS provides a separate guide for writing an ATA driver [16]. OSDev has one too [17]. This is confusing, because the TechTarget article [7] seems to indicate that ATA and IDE are basically interchangeable.</p>","tags":["c"]},{"location":"pkos-21/#what-is-sata","title":"What is SATA?","text":"<p>SATA stands for Serial Advanced Technology Attachment, defined, as noted above, in contrast to IDE/PATA. AHCI stands for Advanced Host Controller Interface. I've seen these two acronyms used interchangeably in some of the drivers I saw online. However, Dell indicates that it may be more complicated to support an AHCI device than a SATA device [11]. </p> <p></p> Photo credits: TechTarget [7]","tags":["c"]},{"location":"pkos-21/#adding-sata-to-qemu","title":"Adding SATA to QEMU","text":"<p>A Stack Overflow answer by mwfearnley [14] notes how to explicitly add a SATA device to QEMU:</p> <pre><code>-drive id=disk,file=IMAGE.img,if=none \\\n-device ahci,id=ahci \\\n-device ide-hd,drive=disk,bus=ahci.0\n</code></pre> <p>I appended these lines to the <code>os.py</code> script's <code>run</code> and <code>run_debug</code> methods and, lo and behold, the SATA drive appeared in <code>lspci</code>! It's on Bus 0, Device 4, Function 0 in the image below:</p> <p></p> <p>Ruben Schade highlighted a similar technique for adding the drive in his blog [15]. It also seems like it may have been enough to simply add <code>-hda IMAGE.img</code> to the QEMU run command, but since I did it the complicated way first and it worked, I just stuck with it. </p>","tags":["c"]},{"location":"pkos-21/#wrap-up","title":"Wrap-Up","text":"<p>Even though I didn't quite get as far as I'd hoped in this episode, I still made some progress and learned a lot. I hope you enjoyed it and learned something too!</p> <p>Next steps for this project will likely be trying to get some sort of SATA driver working, though from what I've seen so far, I'm a little intimidated by how complex it can get. We'll see where things go!</p> <p>If you enjoyed this post, consider subscribing to the PageKey YouTube channel.</p>","tags":["c"]},{"location":"pkos-21/#references","title":"References","text":"<p>[1]: Linux kernel \"early_dump_pci_devices\" method checking whether the device exists using the class field. https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/arch/x86/pci/early.c?id=refs/tags/v3.12.7#n96</p> <p>[2]: OSDev PCI page. https://wiki.osdev.org/PCI</p> <p>[3]: Site showing the PCI device classes and subclasses. https://pci-ids.ucw.cz/read/PD/</p> <p>[4]: PCI Local Bus Specification from 2004. https://lekensteyn.nl/files/docs/PCI_SPEV_V3_0.pdf</p> <p>[5]: Bare-metal x86 Rust target, thanks phip1611. https://stackoverflow.com/questions/67902309/how-to-compile-rust-code-to-bare-metal-32-bit-x86-i686-code-what-compile-targ</p> <p>[6]: Writing an OS in Rust: https://os.phil-opp.com/freestanding-rust-binary/</p> <p>[7]: TechTarget high level description of PATA and SATA interfaces. https://www.techtarget.com/searchstorage/definition/IDE</p> <p>[8]: OSDev PCI IDE Controller article. https://wiki.osdev.org/PCI_IDE_Controller</p> <p>[9]: PCI IDE Controller Specification. http://www.isdaman.com/alsos/hardware/hdc/pciide.pdf</p> <p>[10]: Example of a PCI IDE controller card vendor specification. https://pdf.dzsc.com/PC8/PC87410.pdf</p> <p>[11]: Dell article on SATA vs AHCI. https://www.dell.com/support/kbdoc/en-us/000127508/difference-between-ahci-and-sata</p> <p>[12]: RTEMS guide for PCI IDE drivers. https://docs.rtems.org/branches/master/bsp-howto/ide_controller.html</p> <p>[13]: RTEMS PCI IDE driver reference implementation. https://github.com/RTEMS/rtems/tree/master/bsps/shared/dev/ide</p> <p>[14]: Stack Overflow on adding a SATA drive to QEMU. https://stackoverflow.com/questions/48351096/how-to-emulate-a-sata-disk-drive-in-qemu</p> <p>[15]: Ruben Schade on adding a SATA drive to QEMU. https://rubenerd.com/sata-on-qemu/</p> <p>[16]: RTEMS ATA driver guide. https://docs.rtems.org/branches/master/bsp-howto/ata.html</p> <p>[17]: OSDev ATA driver. https://github.com/levex/osdev/blob/master/drivers/ata.c</p>","tags":["c"]},{"location":"rust-sr-1/","title":"It has begun. | Rust Book Speedrun 1","text":"<p>I have no choice. Join me on this journey of speedrunning The Rust Book.</p> <p></p>","tags":["rust"]},{"location":"rust-sr-1/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>2:08 Starting the Rust Book</li> <li>3:23 Guessing Game</li> <li>4:48 Generating a Secret Number</li> <li>8:01 Outro</li> </ul>","tags":["rust"]},{"location":"rust-sr-2/","title":"Variables & Mutability | Rust Book Speedrun 2","text":"<p>The fun intricacies of variables and mutability in Rust</p> <p></p>","tags":["rust"]},{"location":"rust-sr-3/","title":"3.2 Data Types | Rust Book Speedrun 3","text":"<p>Data, data, data types, woohoo</p> <p></p>","tags":["rust"]},{"location":"rust-sr-3/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:34 Datatype subsets </li> <li>0:48 Type annotations</li> <li>1:03 Scalar Types</li> <li>1:17 Integer Types</li> <li>1:49 WHOA Type suffix</li> <li>2:07 Integer overflow</li> <li>2:22 Underscores ALL over the place</li> <li>3:00 Literals of different bases</li> <li>3:19 Handling overflows</li> <li>3:33 Floating-Point Types</li> <li>3:44 Numeric Operations</li> <li>3:58 The Boolean Type</li> <li>4:00 The Character Type</li> <li>4:25 Compound Types</li> <li>4:30 The Tuple Type (Toople?)</li> <li>4:56 Indexing Tuples</li> <li>5:30 Absolute UNIT</li> <li>5:38 The Array Type</li> <li>7:33 Outro</li> </ul>","tags":["rust"]},{"location":"rust-sr-4/","title":"3.3 Functions | Rust Book Speedrun 4","text":"<p>It's all about functions in this one!</p> <p></p>","tags":["rust"]},{"location":"rust-sr-5/","title":"3.4 Comments | Rust Book Speedrun 5","text":"<p>A quick one - comments in Rust!</p> <p></p>","tags":["rust"]},{"location":"rust-sr-6/","title":"3.5 Control Flow | Rust Book Speedrun 6","text":"<p>Control flow - if, while, loop, break, all that cool stuff.</p> <p></p>","tags":["rust"]},{"location":"rust-sr-7/","title":"What is ownership? | Rust Book Speedrun 7","text":"<p>Diving into one of the most important concepts in Rust - ownership.</p> <p></p>","tags":["rust"]},{"location":"rust-sr-8/","title":"4.2 References & Borowing | Rust Book Speedrun 8","text":"<p>References and borrowing. Sharing is caring!</p> <p></p>","tags":["rust"]},{"location":"rust-sr-9/","title":"4.3 Slices | Rust Book Speedrun 9","text":"<p>String slices and array slices - what a lovely topic</p> <p></p>","tags":["rust"]},{"location":"longhorn-k3s/","title":"How to: Kubernetes Storage with Longhorn","text":"<p>Let's wrangle us some Longhorn and install it on our cluster.</p> <p></p> <ul> <li>K3s Storage Docs: https://docs.k3s.io/storage</li> <li>Longhorn Accessing the UI: https://longhorn.io/docs/1.5.1/deploy/accessing-the-ui/</li> </ul>","tags":["kubernetes"]},{"location":"longhorn-k3s/#installing-longhorn","title":"Installing Longhorn","text":"<p>Source: https://docs.k3s.io/storage</p> <p>K3s comes with PVC support out of the box, but we want Longhorn because it's better. It's easy to instlal - just run this:</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.1/deploy/longhorn.yaml\n</code></pre> <p>Then make sure all of the Longhorn pods come up without issue. Make sure they all show \"Running\" as their status.</p> <pre><code>kubectl get pod -n longhorn-system\n</code></pre>","tags":["kubernetes"]},{"location":"longhorn-k3s/#accessing-the-longhorn-ui","title":"Accessing the Longhorn UI","text":"<p>Check the video for exact details on this. To access the Longhorn UI, we have to expose a NodePort for it. Run this to edit the frontend service:</p> <pre><code>kubectl edit service -n longhorn-system longhorn-frontend\n</code></pre> <p>Change the line that says <code>type: ClusterIP</code> to <code>type: NodePort</code>. Then add a <code>nodePort: 30080</code> under the only entry in the <code>ports:</code> list.</p> <p>Finally, access the UI by going to your cluster's public IP on that port. For example, if you cluster is accessible on your network via the IP address 10.0.0.184, you'd visit http://10.0.0.184:30080 in your browser to see the UI.</p>","tags":["kubernetes"]},{"location":"nextjs-k8s/","title":"Self-Host NextJS on Kubernetes (Tutorial)","text":"<p>Let's host a Next.js app on Kubernetes!</p> <p></p>","tags":["javascript","kubernetes"]},{"location":"nuc-setup/","title":"How to NUC the Cloud with your own Linux Server","text":"<p>You don't need a data center - we can setup one server for less than $150 that will work just as well.</p> <p></p> <p>Buy your own NUC (and support the channel): Geekom Air11 NUC</p>","tags":["hardware"]},{"location":"nuc-setup/#notes","title":"Notes","text":"<ul> <li>How to Burn ISO - Ubuntu Docs</li> </ul>","tags":["hardware"]},{"location":"sitegen-1/","title":"Converting Markdown into a Blog (kinda) | markdown-sitegen 1","text":"<p>Getting started with generating a blog website from a bunch of Markdown files in an Obsidian vault.</p> <p>I wrestle between MDX/React/Node.JS and Python, and Python wins.</p> <p></p>","tags":["javascript","python"]},{"location":"sitegen-10/","title":"Footer & Post Summaries | markdown sitegen 10","text":"<p>In this one, we add a footer for the site, as well as a blog feed page with post summaries (instead of dumping the entire post in there).</p> <p></p>","tags":["python"]},{"location":"sitegen-10/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:12 Adding a footer</li> <li>1:35 Adding a blog screen</li> <li>3:17 Adding summaries</li> </ul>","tags":["python"]},{"location":"sitegen-11/","title":"Adding Pagination | markdown sitegen 11","text":"<p>We add pagination to our static site generator.</p> <p></p>","tags":["python"]},{"location":"sitegen-11/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:30 Game plan</li> <li>1:01 First pass</li> <li>1:44 Date bugfix</li> <li>2:02 Fixing page index</li> <li>2:17 Buttons</li> <li>2:47 Fixing pagination</li> </ul>","tags":["python"]},{"location":"sitegen-12/","title":"Logo, Footer, Styling | markdown sitegen 12","text":"<p>We add logo support, fix the footer, and improve the overall appearance - albeit only slightly.</p> <p></p>","tags":["python"]},{"location":"sitegen-12/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>0:25 Today: Adding Logo</li> <li>0:39 Making a logo</li> <li>0:49 Adding the image</li> <li>1:30 Overriding default logo</li> <li>2:24 Adding a theme with one color</li> <li>3:30 Adding buttons to post</li> <li>3:41 Fixing the footer</li> <li>4:42 Native web components??</li> <li>4:49 What's next: Redirects</li> </ul>","tags":["python"]},{"location":"sitegen-13/","title":"Adding redirects | markdown sitegen 13","text":"<p>We add redirects</p> <p></p>","tags":["python"]},{"location":"sitegen-2/","title":"Adding jinja2 templates | markdown-sitegen 2","text":"<p>Quick video about progress on the markdown-sitegen package</p> <p></p>","tags":["python"]},{"location":"sitegen-3/","title":"jumping thru hoops for CSS | markdown sitegen 3","text":"<p>Let's add some basic styling - to do that, we'll need to (1) copy static files and (2) pass in some sort of relative path for the templates to use as a reference point.</p> <p></p>","tags":["python"]},{"location":"sitegen-3/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Intro</li> <li>1:45 Roadmap</li> <li>2:29 Setting up nesting</li> <li>3:13 Explaining relative paths (rambling)</li> <li>4:24 get_root_path implementation/test</li> <li>5:26 Apologetic spaghetti code</li> <li>5:33 Unapologetic spaghetti code</li> <li>5:41 More get_root_path explanation</li> <li>6:19 CSS is working!</li> <li>6:37 Basic site layout</li> <li>7:00 How to add Google fonts to your CSS</li> <li>7:22 One-liner to build and test in browser</li> <li>7:32 What's next</li> </ul>","tags":["python"]},{"location":"sitegen-4/","title":"Adding Posts Index | markdown sitegen 4","text":"<p>Added posts index, added config file for site title, and other cool stuff</p> <p></p>","tags":["python"]},{"location":"sitegen-4/#timestamps","title":"Timestamps","text":"<ul> <li>0:00 Demo</li> <li>0:20 Posts index code walkthrough</li> <li>1:29 Site title / config file walkthrough</li> <li>2:22 Date, code snippets issues</li> <li>3:13 Docs vault / Roadmap (NEW)</li> <li>3:36 What's Next</li> </ul>","tags":["python"]},{"location":"sitegen-5/","title":"Parsing the date, and more | markdown sitegen 5","text":"<p>We fix page titles, parse date, sort by date, and limit to 5 posts on the index page. Then we add a better navbar with links and create the Archive page.</p> <p></p>","tags":["python"]},{"location":"sitegen-6/","title":"Adding prev/next post buttons | markdown sitegen 6","text":"<p>Buckle up, it's time to add next and previous buttons to our posts. We also add a check for multiple posts with the same path AND add year headers to the Archive page.</p> <p></p>","tags":["python"]},{"location":"sitegen-7/","title":"Adding Doodads | markdown sitegen 7","text":"<p>We add (1) a list of authors, if the post specifies it and (2) a YouTube player, if the post specifies a YouTube ID.</p> <p></p>","tags":["python"]},{"location":"sitegen-8/","title":"kidney reveal / Adding images | markdown sitegen 8","text":"<p>In this video, we reveal the true kidney, along with an imposter bean.</p> <p>We add images to our generated blog and make sure there are no name conflicts. We also end up writing an interesting regular expression.</p> <p></p>","tags":["python"]},{"location":"sitegen-9/","title":"Adding colorful codeblocks | markdown sitegen 9","text":"<p>In this video, we add colorful syntax highlighting to our blog's codeblocks! Thankfully it was simple - just had to leverage existing plugins for the Markdown package, and generate CSS using Pygmentize</p> <p></p>","tags":["python"]},{"location":"archive/2023/","title":"2023","text":""},{"location":"archive/2022/","title":"2022","text":""},{"location":"archive/2021/","title":"2021","text":""},{"location":"archive/2020/","title":"2020","text":""},{"location":"archive/2019/","title":"2019","text":""},{"location":"archive/2018/","title":"2018","text":""},{"location":"archive/2017/","title":"2017","text":""},{"location":"category/boom-languages/","title":"Boom Languages","text":""},{"location":"category/self-hosting/","title":"Self-Hosting","text":""},{"location":"category/pagekey-operating-system/","title":"PageKey Operating System","text":""},{"location":"category/plaintext-daw/","title":"Plaintext DAW","text":""},{"location":"category/rust-book-speedrun/","title":"Rust Book Speedrun","text":""},{"location":"category/markdown-sitegen/","title":"Markdown Sitegen","text":""},{"location":"category/keyreader/","title":"KeyReader","text":""},{"location":"category/first-time-programmer/","title":"First Time Programmer","text":""},{"location":"category/what-i-learned-recently/","title":"What I Learned Recently","text":""},{"location":"category/quick-python/","title":"Quick Python","text":""},{"location":"category/90-seconds-or-less/","title":"90 Seconds or Less","text":""},{"location":"category/data-structures-algorithms/","title":"Data Structures &amp; Algorithms","text":""},{"location":"category/linux-kernel-series/","title":"Linux Kernel Series","text":""},{"location":"page/2/","title":"Blog","text":""},{"location":"page/3/","title":"Blog","text":""},{"location":"page/4/","title":"Blog","text":""},{"location":"page/5/","title":"Blog","text":""},{"location":"page/6/","title":"Blog","text":""},{"location":"page/7/","title":"Blog","text":""},{"location":"page/8/","title":"Blog","text":""},{"location":"page/9/","title":"Blog","text":""},{"location":"page/10/","title":"Blog","text":""},{"location":"page/11/","title":"Blog","text":""},{"location":"page/12/","title":"Blog","text":""},{"location":"page/13/","title":"Blog","text":""},{"location":"page/14/","title":"Blog","text":""},{"location":"archive/2023/page/2/","title":"2023","text":""},{"location":"archive/2023/page/3/","title":"2023","text":""},{"location":"archive/2023/page/4/","title":"2023","text":""},{"location":"archive/2023/page/5/","title":"2023","text":""},{"location":"archive/2022/page/2/","title":"2022","text":""},{"location":"archive/2022/page/3/","title":"2022","text":""},{"location":"archive/2022/page/4/","title":"2022","text":""},{"location":"archive/2020/page/2/","title":"2020","text":""},{"location":"archive/2020/page/3/","title":"2020","text":""},{"location":"archive/2018/page/2/","title":"2018","text":""},{"location":"category/boom-languages/page/2/","title":"Boom Languages","text":""},{"location":"category/pagekey-operating-system/page/2/","title":"PageKey Operating System","text":""},{"location":"category/pagekey-operating-system/page/3/","title":"PageKey Operating System","text":""},{"location":"category/plaintext-daw/page/2/","title":"Plaintext DAW","text":""},{"location":"category/markdown-sitegen/page/2/","title":"Markdown Sitegen","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":""},{"location":"tags/#assembly","title":"assembly","text":"<ul> <li>OS10: Running on Real Hardware</li> <li>OS11: Calling Assembly from C</li> <li>OS12: Basic Keyboard Driver (x86 Interrupts)</li> <li>OS2: First Bootloader</li> <li>OS3: Hone the Power of the BIOS!</li> <li>OS4: Deciphering BIOS Challenges</li> <li>OS5: Going Over print_hex</li> <li>OS6: Reading the Disk</li> <li>OS7: Protected Mode - Making the Jump!</li> <li>OS8: Calling C from Assembly</li> <li>OS9: Multiboot (Bootloader Breakup)</li> <li>OS13: Docker Dev Environment</li> <li>OS14: Organizing Our OS Code</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> <li>OS18: Shredding the Makefile</li> <li>OS19: More VGA + stdlib/memory improvements</li> <li>OS15: Writing a Simple VGA Driver (Bare-Metal Graphics)</li> <li>OS20: Researching PCI (Peripheral Component Interconnect)</li> </ul>"},{"location":"tags/#c","title":"c","text":"<ul> <li>OS10: Running on Real Hardware</li> <li>OS11: Calling Assembly from C</li> <li>OS12: Basic Keyboard Driver (x86 Interrupts)</li> <li>OS8: Calling C from Assembly</li> <li>OS9: Multiboot (Bootloader Breakup)</li> <li>OS13: Docker Dev Environment</li> <li>OS14: Organizing Our OS Code</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> <li>OS18: Shredding the Makefile</li> <li>OS19: More VGA + stdlib/memory improvements</li> <li>OS15: Writing a Simple VGA Driver (Bare-Metal Graphics)</li> <li>OS20: Researching PCI (Peripheral Component Interconnect)</li> <li>OS21: More PCI + Getting Started with Storage (IDE, SATA)</li> </ul>"},{"location":"tags/#c_1","title":"c++","text":"<ul> <li>\u226490s: First OpenGL Program with GLUT (Linux)</li> <li>\u226490s: Hello World with Qt Framework (Ubuntu)</li> </ul>"},{"location":"tags/#career","title":"career","text":"<ul> <li>Career, Year One: 8 Lessons Learned</li> </ul>"},{"location":"tags/#cicd","title":"ci/cd","text":"<ul> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> </ul>"},{"location":"tags/#design","title":"design","text":"<ul> <li>Boom! A new app is born.</li> <li>Can we build our own Kindle, with a twist? | KR1</li> <li>MEASURE - The Secret to Language Learning</li> <li>boom devlog 11</li> <li>DAW1: Let's change music FOREVER</li> <li>DAW2: Config Magic with Python Dataclasses</li> </ul>"},{"location":"tags/#docker","title":"docker","text":"<ul> <li>\u226490s: Install Docker on Windows 10 Pro</li> <li>Docker 101: Basics and Containerizing a Web App</li> <li>OS13: Docker Dev Environment</li> </ul>"},{"location":"tags/#flutter","title":"flutter","text":"<ul> <li>Boom! A new app is born.</li> <li>Coding a Workout App from Scratch - #1 Initial Setup</li> </ul>"},{"location":"tags/#hardware","title":"hardware","text":"<ul> <li>How and Why to Use a Logic Analyzer</li> <li>How to NUC the Cloud with your own Linux Server</li> </ul>"},{"location":"tags/#ideas","title":"ideas","text":"<ul> <li>Is creativity the key to language learning?</li> <li>Design vs. Implementation: The Eternal Divide</li> </ul>"},{"location":"tags/#javascript","title":"javascript","text":"<ul> <li>Make Your Site Stand Out with ScrollMagic</li> <li>4 Fun JavaScript Examples for Beginners</li> <li>Language Logging as the \"One Thing\" | Boom DevLog 5</li> <li>React Native Redesign | Boom Dev Log 6</li> <li>Version, Registration Info in React Native | Boom Dev Log 7</li> <li>Get your feet wet | First Time Programmer 1</li> <li>New coders: Instantly apply concepts with JavaScript (FTP2)</li> <li>Git: Your Foundation | FTP4</li> <li>Using Other People's Code - NPM and Node | FTP6</li> <li>Create a Simple API - Express.js | First Time Programmer</li> <li>Generating the Project and Adding Screens | KR2</li> <li>Eric Adds Components | KR3</li> <li>Getting Started with React (Create React App)</li> <li>WebGL Experiment 1: Draw a Square in 30 Minutes</li> <li>WebGL Live Coding 2</li> <li>WILR1: React Native Basics</li> <li>boom devlog 11</li> <li>rejected \u274c | boom devlog 8</li> <li>5 Lessons from Rewriting My App FOUR TIMES | boom devlog 9</li> <li>NextAuth Tutorial - Google &amp; Apple Social Login</li> <li>Self-Host NextJS on Kubernetes (Tutorial)</li> <li>Converting Markdown into a Blog (kinda) | markdown-sitegen 1</li> </ul>"},{"location":"tags/#julia","title":"julia","text":"<ul> <li>\u226490s: Install Julia Programming Language on Windows</li> </ul>"},{"location":"tags/#kubernetes","title":"kubernetes","text":"<ul> <li>How to: Kubernetes Storage with Longhorn</li> <li>Self-Host NextJS on Kubernetes (Tutorial)</li> </ul>"},{"location":"tags/#language","title":"language","text":"<ul> <li>Is creativity the key to language learning?</li> <li>DuoBot: Topping the DuoLingo Charts with Selenium</li> <li>Boom Languages Dev Log 1</li> <li>Boom Languages Dev Log 2</li> <li>Boom Languages Dev Log 3</li> <li>Boom Languages Dev Log 4</li> <li>Boom! A new app is born.</li> <li>Language Logging as the \"One Thing\" | Boom DevLog 5</li> <li>React Native Redesign | Boom Dev Log 6</li> <li>Version, Registration Info in React Native | Boom Dev Log 7</li> <li>I spent dozens of hours to save 5 minutes on DuoLingo</li> <li>MEASURE - The Secret to Language Learning</li> <li>rejected \u274c | boom devlog 8</li> <li>5 Lessons from Rewriting My App FOUR TIMES | boom devlog 9</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>Take Your Linux Workspace Anywhere: Backup for\u00a0Nerds</li> <li>How to Compile the Linux Kernel from Source</li> <li>Making Simple Modifications to the Linux Source</li> <li>Writing Your First Kernel Module</li> <li>10 Minute Linux Crash Course - Everything You Need to Get Started Now</li> <li>\u226490s: Install Python (Ubuntu)</li> <li>\u226490s: Hello World with Qt Framework (Ubuntu)</li> <li>\u226490s: Install Selenium for Python on Ubuntu</li> </ul>"},{"location":"tags/#live-coding","title":"live-coding","text":"<ul> <li>WebGL Experiment 1: Draw a Square in 30 Minutes</li> <li>WebGL Live Coding 2</li> </ul>"},{"location":"tags/#machine-learning","title":"machine-learning","text":"<ul> <li>How to Get Up and Running with Scikit-Learn</li> <li>Snap the Line! Understanding Linear Regression and Scikit-Learn</li> <li>The Nuanced Truth: Exploring Differences Between ML and AI</li> </ul>"},{"location":"tags/#mongodb","title":"mongodb","text":"<ul> <li>boom devlog 11</li> </ul>"},{"location":"tags/#postgres","title":"postgres","text":"<ul> <li>boom devlog 11</li> </ul>"},{"location":"tags/#powershell","title":"powershell","text":"<ul> <li>Convert OneNote to Markdown (and Obsidian.md)</li> </ul>"},{"location":"tags/#productivity","title":"productivity","text":"<ul> <li>5 Steps to Writing Your Next Technical Article</li> <li>Take Your Linux Workspace Anywhere: Backup for\u00a0Nerds</li> <li>How to Create a Kanban Board in OneNote</li> <li>Python Update - Convert OneNote to Markdown</li> <li>Convert OneNote to Markdown (and Obsidian.md)</li> <li>FINALLY! The Blog SSG I've Been Looking For</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>How to Implement a Hash Table in Python</li> <li>How to Implement a Linked List in Python</li> <li>How to Implement a Queue in Python</li> <li>How to Implement a Stack in Python</li> <li>Bubble Sort in Python</li> <li>Insertion Sort in Python</li> <li>Merge Sort in Python</li> <li>Quicksort in Python</li> <li>How to Implement a Binary Search Tree in Python</li> <li>Django: How to Install and Run Your First Web App</li> <li>DuoBot: Topping the DuoLingo Charts with Selenium</li> <li>\u226490s: Install Python (Ubuntu)</li> <li>\u226490s: Install Python (Windows 10)</li> <li>\u226490s: Install Selenium for Python on Ubuntu</li> <li>Quick Python 1: Your First Loop &amp; Data Types</li> <li>Quick Python 2: Easy User Input</li> <li>Quick Python 3: Error Handling (Actually pretty useful!)</li> <li>Quick Python 4: Sipping from a File (Open/Print Contents)</li> <li>Quick Python 5: Writing Files</li> <li>Quick Python 6: Our First Data Pipeline</li> <li>Quick Python 7: Easy Web Request</li> <li>Quick Python 8: Virtual Environments</li> <li>I spent dozens of hours to save 5 minutes on DuoLingo</li> <li>Python Update - Convert OneNote to Markdown</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>How to Make a CLI in Python</li> <li>DAW1: Let's change music FOREVER</li> <li>DAW10: ResourceManager is DONE</li> <li>DAW11: Generating a Tauri Project</li> <li>DAW12: Tauri filepicker</li> <li>DAW13: 3 ways to create a window in Tauri</li> <li>DAW14: Deciphering State Management in Tauri</li> <li>DAW2: Config Magic with Python Dataclasses</li> <li>DAW3: Rendering Two Notes</li> <li>DAW4: Chords? Tempo? SYNTH??</li> <li>DAW5: Loading Piano from Git</li> <li>DAW6: Integrating Synth Code</li> <li>DAW7: What's wrong with timing??</li> <li>DAW8: New arch, new me</li> <li>DAW9: Advanced TDD with Pytest</li> <li>Converting Markdown into a Blog (kinda) | markdown-sitegen 1</li> <li>Footer &amp; Post Summaries | markdown sitegen 10</li> <li>Adding Pagination | markdown sitegen 11</li> <li>Logo, Footer, Styling | markdown sitegen 12</li> <li>Adding redirects | markdown sitegen 13</li> <li>Adding jinja2 templates | markdown-sitegen 2</li> <li>jumping thru hoops for CSS | markdown sitegen 3</li> <li>Adding Posts Index | markdown sitegen 4</li> <li>Parsing the date, and more | markdown sitegen 5</li> <li>Adding prev/next post buttons | markdown sitegen 6</li> <li>Adding Doodads | markdown sitegen 7</li> <li>kidney reveal / Adding images | markdown sitegen 8</li> <li>Adding colorful codeblocks | markdown sitegen 9</li> </ul>"},{"location":"tags/#research","title":"research","text":"<ul> <li>DAW2: Config Magic with Python Dataclasses</li> </ul>"},{"location":"tags/#ruby","title":"ruby","text":"<ul> <li>Making a Command-line Ruby Gem - Write, Build, and Push</li> </ul>"},{"location":"tags/#rust","title":"rust","text":"<ul> <li>WILR2: Rust Beginnings (minigrep)</li> <li>It has begun. | Rust Book Speedrun 1</li> <li>Variables &amp; Mutability | Rust Book Speedrun 2</li> <li>3.2 Data Types | Rust Book Speedrun 3</li> <li>3.3 Functions | Rust Book Speedrun 4</li> <li>3.4 Comments | Rust Book Speedrun 5</li> <li>3.5 Control Flow | Rust Book Speedrun 6</li> <li>What is ownership? | Rust Book Speedrun 7</li> <li>4.2 References &amp; Borowing | Rust Book Speedrun 8</li> <li>4.3 Slices | Rust Book Speedrun 9</li> </ul>"},{"location":"tags/#testing","title":"testing","text":"<ul> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> </ul>"},{"location":"tags/#tutorial","title":"tutorial","text":"<ul> <li>How to Implement a Hash Table in Python</li> <li>How to Implement a Linked List in Python</li> <li>How to Implement a Queue in Python</li> <li>How to Implement a Stack in Python</li> <li>Bubble Sort in Python</li> <li>Insertion Sort in Python</li> <li>Merge Sort in Python</li> <li>Quicksort in Python</li> <li>5 Steps to Writing Your Next Technical Article</li> <li>How to Implement a Binary Search Tree in Python</li> <li>How to Compile the Linux Kernel from Source</li> <li>Making Simple Modifications to the Linux Source</li> <li>Writing Your First Kernel Module</li> <li>Push Out Your SSH Keys - Jump Nodes in a Jiffy!</li> <li>Making a Command-line Ruby Gem - Write, Build, and Push</li> <li>OS1: Installing VirtualBox and Debian</li> <li>Make Your Site Stand Out with ScrollMagic</li> <li>Django: How to Install and Run Your First Web App</li> <li>OS10: Running on Real Hardware</li> <li>OS11: Calling Assembly from C</li> <li>OS12: Basic Keyboard Driver (x86 Interrupts)</li> <li>OS2: First Bootloader</li> <li>OS3: Hone the Power of the BIOS!</li> <li>OS4: Deciphering BIOS Challenges</li> <li>OS5: Going Over print_hex</li> <li>OS6: Reading the Disk</li> <li>OS7: Protected Mode - Making the Jump!</li> <li>OS8: Calling C from Assembly</li> <li>OS9: Multiboot (Bootloader Breakup)</li> <li>Quick Python 1: Your First Loop &amp; Data Types</li> <li>Quick Python 2: Easy User Input</li> <li>Quick Python 3: Error Handling (Actually pretty useful!)</li> <li>Quick Python 4: Sipping from a File (Open/Print Contents)</li> <li>Quick Python 5: Writing Files</li> <li>Quick Python 6: Our First Data Pipeline</li> <li>Quick Python 7: Easy Web Request</li> <li>Quick Python 8: Virtual Environments</li> <li>21 Programming Terms for Absolute Beginners</li> <li>Docker 101: Basics and Containerizing a Web App</li> <li>Get your feet wet | First Time Programmer 1</li> <li>New coders: Instantly apply concepts with JavaScript (FTP2)</li> <li>VSCode, Emmet Coding, Serving Static Files | FTP3</li> <li>Git: Your Foundation | FTP4</li> <li>Collaborating with Git | FTP5</li> <li>Using Other People's Code - NPM and Node | FTP6</li> <li>Create a Simple API - Express.js | First Time Programmer</li> <li>OS13: Docker Dev Environment</li> <li>OS14: Organizing Our OS Code</li> <li>OS16: Integration Test with QEMU in CI/CD Using Pytest</li> <li>OS17: Unit Testing C Code with Gtest, LCOV, Genhtml</li> <li>OS18: Shredding the Makefile</li> <li>OS19: More VGA + stdlib/memory improvements</li> <li>OS15: Writing a Simple VGA Driver (Bare-Metal Graphics)</li> <li>How to Make a CLI in Python</li> <li>OS20: Researching PCI (Peripheral Component Interconnect)</li> <li>NextAuth Tutorial - Google &amp; Apple Social Login</li> </ul>"},{"location":"tags/#ubuntu","title":"ubuntu","text":"<ul> <li>\u226490s: First OpenGL Program with GLUT (Linux)</li> </ul>"},{"location":"tags/#webgl","title":"webgl","text":"<ul> <li>WebGL Experiment 1: Draw a Square in 30 Minutes</li> <li>WebGL Live Coding 2</li> </ul>"},{"location":"tags/#windows","title":"windows","text":"<ul> <li>\u226490s: Install Docker on Windows 10 Pro</li> <li>\u226490s: Install Julia Programming Language on Windows</li> <li>\u226490s: Install Python (Windows 10)</li> </ul>"}]}