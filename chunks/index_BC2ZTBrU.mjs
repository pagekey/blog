const id = "blog/2017/hash-table-python/index.mdx";
						const collection = "post";
						const slug = "blog/2017/hash-table-python";
						const body = "\r\n\r\nThis tutorial will show you how to implement a hash table with **separate chaining**. It's not the most efficient method, but it is the simplest way to get started and create a fully functioning hash table.\r\n\r\nimport BlogYoutubeVideo from '~/components/common/BlogYoutubeVideo.astro';\r\n\r\n<BlogYoutubeVideo videoId=\"zHi5v78W1f0\" />\r\n\r\n## Background\r\n\r\nHash tables are indispensable tools for solving a wide assortment for so many interesting programming problems. I always love to incorporate a hash table into a problem; they can provide a clean solution to an issue that would be a mess otherwise.\r\n\r\nFor the longest time, I wondered how hash tables were created. I wanted to make my own, but I had no clue as to how they worked. Luckily, I found [James Routley's awesome post](https://github.com/jamesroutley/write-a-hash-table) detailing how to implement one in C. For anyone interested, I highly recommend it.\r\n\r\nUsing this knowledge, I ported the hash table to Python. By the end of this tutorial, you will understand the basic ideas behind the hash table. Perhaps more importantly,  you will have implemented your very own!\r\n\r\n## The Basics\r\n\r\nIf you've ever used a dictionary in Python or an associative array in a language like PHP, You've probably used a hash table before. Features such as the dictionary in Python or the associative array in PHP are often implemented using a hash table. Even more straightforward is the HashTable class available in Java.\r\n\r\nWhy would we need such a structure? Well, sometimes a flat area just isn't enough. To make sense of the problem at hand, you may need to store and access your data by a **key**, a definite step up from the rudimentary integer index provided by flat arrays.\r\n\r\nThe hash table we build will be used like this:\r\n\r\n```python\r\n# Create a new HashTable\r\nht = HashTable()\r\n# Create some data to be stored\r\nphone_numbers = [\"555-555-5555\", \"444-444-4444\"]\r\n# Insert our data under the key \"phoneDirectory\"\r\nht.insert(\"phoneDirectory\", phone_numbers)\r\n# Do whatever we need with the phone_numbers variable\r\nphone_numbers = None\r\n... # Later on...\r\n# Retrieve the data we stored in the HashTable\r\nphone_numbers = ht.find(\"phoneDirectory\")\r\n# find() retrieved our list object\r\n# phone_numbers is now equal to [\"555-555-5555\", \"444-444-4444\"]\r\n```\r\n\r\nHow does this really work under the hood? As it turns out, your key (`phoneDirectory` in this example) is converted into an index. This index is used for storing and retrieving the data value from the hash table's internal array. All those messy details are hidden from the user - they just have to worry about `insert()`, `find()`, and `remove()`.\r\n\r\n## Fields\r\n\r\nOur hash table will need a few fields to keep it together. It needs a `size`, which will be the number of elements that have been inserted. It needs a `capacity`, which will determine the size of our internal array. Last, it needs `buckets` - this is the internal array, storing each inserted value in a \"bucket\" based on the provided key.\r\n\r\n```python\r\nclass HashTable:\r\n\tdef __init__(self):\r\n\t\tself.capacity = INITIAL_CAPACITY\r\n\t\tself.size = 0\r\n\t\tself.buckets = [None] * self.capacity\r\n```\r\n\r\nNote the `INITIAL_CAPACITY` variable, arbitrarily set to 50 in my example class. This defines the size of our internal array. In a more complex hash table implementation (i.e. an open-addressed, double-hashed hash table), it's important that the capacity is prime, and that it can be changed. On the other hand, our separate chaining hash table sets the capacity once and never changes it, regardless of how many elements are stored. This is good for simplicity, but bad for scalability.\r\n\r\n## HashTable Node\r\n\r\nIf you thought you were getting a break from the internal Node structure, you were wrong! Our hash table will need its own version of a Node:\r\n\r\n```python\r\nclass Node:\r\n    def __init__(self, key, value):\r\n        self.key = key\r\n        self.value = value\r\n        self.next = None\r\n```\r\n\r\nLook familiar? Node has a `next` field because it's actually part of a [LinkedList](../linked-lists-in-python/index.md). Because the hash table uses **separate chaining**, each bucket will actually contain a LinkedList of nodes containing the objects stored at that index. This is one method of **collision resolution.**\r\n\r\n## Collisions\r\n\r\nWhenever two keys have the same hash value, it is considered a collision. What should our hash table do? If it just wrote the data into the location anyway, we would be losing the object that is already stored under a different key.\r\n\r\nWith separate chaining, we create a Linked List at each index of our `buckets` array, containing all keys for a given index. When we need to look up one of those items, we iterate the list until we find the Node matching the requested key.\r\n\r\nThere are other, far more efficient ways of handling collisions, but separate chaining is likely the simplest method.\r\n\r\n## Methods\r\n\r\nNow we can really get started. Let's jump into our hash table's methods.\r\n\r\n### Hash\r\n\r\nOur hash method needs to take our key, which will be a string of any length, and produce an index for our internal `buckets` array.\r\n\r\nWe will be creating a hash function to convert the string to an index. There are many properties of a good hash function, but for our purposes the most important characteristic for our function to have is **uniformity**. We want our hash values to be as evenly distributed among our buckets as possible, to take full advantage of each bucket and avoid collisions. The ideal case is pictured below:\r\n\r\n![Uniform Bucket Distribution (good)](./buckets_uniform.png)\r\n<figcaption>HashTable Buckets with Uniform Distribution (good)</figcaption>\r\n\r\nOn the other hand, an uneven distribution will defeat the purpose of the hash table altogether, yielding nothing more than a bloated LinkedList.\r\n\r\nConsider an extreme case: Our hash function will be `h(x) = 1`. That's right, each input produces the same constant value. So, what happens? Every time we hash a key, the output is 1, meaning that we assign that node to bucket 1. The result would look something like this:\r\n\r\n![Non-Uniform Bucket Distribution (bad)](./buckets_nonuniform.png)\r\n<figcaption>HashTable Buckets with Non-Uniform Distribution (bad)</figcaption>\r\n\r\nNot pretty! We'll just have to make sure we avoid this bottleneck at all costs.\r\n\r\nHere's the code for our hash function:\r\n\r\n```python\r\ndef hash(self, key):\r\n\thashsum = 0\r\n\t# For each character in the key\r\n\tfor idx, c in enumerate(key):\r\n\t\t# Add (index + length of key) ^ (current char code)\r\n\t\thashsum += (idx + len(key)) ** ord(c)\r\n\t\t# Perform modulus to keep hashsum in range [0, self.capacity - 1]\r\n\t\thashsum = hashsum % self.capacity\r\n\treturn hashsum\r\n```\r\n\r\nWhile fairly arbitrary, this function will provide an acceptable degree of uniformity for our purposes.\r\n\r\n### Insert\r\n\r\nTo insert a key/value pair into our hash table, we will follow these steps:\r\n\r\n1. Increment size of hash table.\r\n\r\n2. Compute `index` of key using hash function.\r\n\r\n3. If the bucket at `index` is empty, create a new node and add it there.\r\n\r\n4. Otherwise, a collision occurred: there is already a linked list of at least one node at this index. Iterate to the end of the list and add a new node there.\r\n\r\nThis is reflected in the following code:\r\n\r\n```python\r\ndef insert(self, key, value):\r\n\t# 1. Increment size\r\n\tself.size += 1\r\n\t# 2. Compute index of key\r\n\tindex = self.hash(key)\r\n\t# Go to the node corresponding to the hash\r\n\tnode = self.buckets[index]\r\n\t# 3. If bucket is empty:\r\n\tif node is None:\r\n\t\t# Create node, add it, return\r\n\t\tself.buckets[index] = Node(key, value)\r\n\t\treturn\r\n\t# 4. Collision! Iterate to the end of the linked list at provided index\r\n\tprev = node\r\n\twhile node is not None:\r\n\t\tprev = node\r\n\t\tnode = node.next\r\n\t# Add a new node at the end of the list with provided key/value\r\n\tprev.next = Node(key, value)\r\n```\r\n\r\n### Find\r\n\r\nAfter storing data in our hash table, we will surely need to retrieve it at some point. To do this, we'll perform the following steps:\r\n\r\n1. Compute the `index` for the provided key using the hash function.\r\n\r\n2. Go to the bucket for that `index`.\r\n\r\n3. Iterate the nodes in that linked list until the key is found, or the end of the list is reached.\r\n\r\n4. Return the value of the found node, or None if not found.\r\n\r\nThis idea would be expressed in code like this:\r\n\r\n```python\r\ndef find(self, key):\r\n\t# 1. Compute hash\r\n\tindex = self.hash(key)\r\n\t# 2. Go to first node in list at bucket\r\n\tnode = self.buckets[index]\r\n\t# 3. Traverse the linked list at this node\r\n\twhile node is not None and node.key != key:\r\n\t\tnode = node.next\r\n\t# 4. Now, node is the requested key/value pair or None\r\n\tif node is None:\r\n\t\t# Not found\r\n\t\treturn None\r\n\telse:\r\n\t\t# Found - return the data value\r\n\t\treturn node.value\r\n```\r\n\r\n### Remove\r\n\r\nRemoving an element from a hash table is similar to removing an element from a linked list. This method will return the data value removed, or None if the requested node was not found.\r\n\r\n1. Compute hash for the key to determine `index`.\r\n\r\n2. Iterate linked list of nodes. Continue until end of list or until key is found.\r\n\r\n3. If the key is not found, return None.\r\n\r\n4. Otherwise, remove the node from the linked list and return the node value.\r\n\r\nThis would be reflected in code as such:\r\n\r\n```python\r\ndef remove(self, key):\r\n\t# 1. Compute hash\r\n\tindex = self.hash(key)\r\n\tnode = self.buckets[index]\r\n\tprev = None\r\n\t# 2. Iterate to the requested node\r\n\twhile node is not None and node.key != key:\r\n\t\tprev = node\r\n\t\tnode = node.next\r\n\t# Now, node is either the requested node or none\r\n\tif node is None:\r\n\t\t# 3. Key not found\r\n\t\treturn None\r\n\telse:\r\n\t\t# 4. The key was found.\r\n\t\tself.size -= 1\r\n\t\tresult = node.value\r\n\t\t# Delete this element in linked list\r\n\t\tif prev is None:\r\n\t\t\tnode = None\r\n\t\telse:\r\n\t\t\tprev.next = prev.next.next\r\n\t\t# Return the deleted language\r\n\t\treturn result\r\n```\r\n\r\nFor more information about removing a node from a linked list, see my [LinkedList article](../linked-lists-in-python/index.md).\r\n\r\n## Applications\r\n\r\nHash tables can be useful in a wide variety of computer science applications. Once you learn how to use them, you won't be able to stop! It seems at every turn there is a new application for the hash table.\r\n\r\nBelow are a few problems you can attempt to solve using your new hash table:\r\n\r\n1. Write a function to determine whether a string contains repeated characters.\r\n\r\n2. Given a string of any length, find the most-used character in the string.\r\n\r\n3. Write a function to determine whether two strings are anagrams.\r\n\r\n## Source\r\n\r\nThank you for reading. Check out the full source code for what we did today below!\r\n\r\n**[Full HashTable source code](https://github.com/pagekeysolutions/education/blob/master/HashTable/hashtable.py)**\r\n\r\n**[HashTable test code](https://github.com/pagekeysolutions/education/blob/master/HashTable/test_hashtable.py)**";
						const data = {publishDate:new Date(1511481600000),title:"How to Implement a Hash Table in Python",image:"/blog/2017/hash-table-python.jpg",category:"Data Structures & Algorithms",tags:["python","tutorial"],author:"Steve Grice"};
						const _internal = {
							type: 'content',
							filePath: "/home/runner/work/website/website/astrowind/src/content/post/blog/2017/hash-table-python/index.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
