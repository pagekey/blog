const id = "blog/2018/linux-kernel-1/index.mdx";
						const collection = "post";
						const slug = "blog/2018/linux-kernel-1";
						const body = "\nLinux is everywhere, and there are plenty of Linux distributions available providing great out-of-the-box features. But what happens when you need to make an intricate, low-level change to system functionality? What if you wanted to get into kernel development and start to understand one of the world's largest open source projects?\n\nThe first step to doing all of these things is compiling the Linux kernel from source. While it may seem tedious or trivial at first, this process will get you down in the weeds of the OS, allowing you to turn modules on or off, search for kernel features, and even examine (and if you're brave, tweak) the raw source code that runs everything on your Linux machine!\n\n**This post is Part 1 of a series on the Linux kernel.**\n\n**Part 1 - [Part 2][part2] - [Part 3][part3]**\n\n## 1. Install all dependencies.\n\nLet's jump right in. The code is nothing without the toolchain that compiles it! We'll make use of our handy package managers to get everything we need.\n\nIf you use `apt-get` (**Debian / Ubuntu**), use the following:\n```bash\nsudo apt-get install git build-essential\n```\nIf you use `yum` (**Centos, RHEL, etc.**):\n```bash\nsudo yum install git rpm-build redhat-rpm-config asciidoc hmaccalc perl-ExtUtils-Embed pesign xmlto\nsudo yum install audit-libs-devel binutils-devel elfutils-devel elfutils-libelf-devel\nsudo yum install ncurses-devel newt-devel numactl-devel pciutils-devel python-devel zlib-devel\n```\n\n## 2. Clone the source.\n\nThe absolute latest, bleeding edge version of the source is found on the Github account of Linus Torvalds himself, the mastermind behind Linux! You can check it out [here](https://www.github.com/torvalds/linux).\n\nTo clone this, find a place to keep it (your home area is fine) and type the following:\n\n```bash\ngit clone https://www.github.com/torvalds/linux.git\n```\n\nThis will create a clone in a `linux` folder wherever you ran the command. Make sure you have a steady connection - this may take a while!\n\nIf you have a spotty connection, or you're in a hurry, you can create a **shallow clone**, which will clone only the **most recent commit**, rather than the entire history:\n\n```bash\ngit clone --depth 1 https://www.github.com/torvalds/linux.git\n```\n\n## 3. Optional: Determine number of processors.\n\nBuilding the kernel is a fairly labor intensive task for your computer. If you're not utilizing all of your processors, it will take much, much longer.\n\nIf you know how many CPUs your computer has, great. If not, examine the output of `cat /proc/cpuinfo`. Though you should verify this by examining the file yourself, the following command should give you the exact number of processors you have:\n\n```bash\ncat /proc/cpuinfo | grep processor | wc -l\n```\n\nMake note of this number - it will be important in the next few steps.\n\n## 4. Configure the kernel.\n\nEven Linux geeks like to use a GUI once in a while! The menuconfig program will turn your terminal into a mini-windowing system, allowing you to select which parts of the kernel are included in your build. To begin, run the following:\n\n```bash\ncd linux\nmake menuconfig\n```\n\nWhile in this program, you can use your arrow keys and enter/space bar to navigate and select modules. Another helpful trick is to press the `/` key, which will allow you to search. As an example, type `/HDMI` to get information on HDMI drivers in the kernel.\n\nOnce you have finished, select `< Save >` and press `< Ok >` to write to a `.config` file in that directory. After this, feel free to `< Exit >` the menu.\n\nAnother option is to use the `make config` command, but this isn't recommended. It will use the command line to ask you a long series of questions, requiring you to manually verify almost every setting in the kernel.\n\n## 5. Create Compressed Image\n\nIt's time for the moment of truth (one of them, anyway). We're going to create bzImage, which stands for \"Big Zimage.\" Don't worry about what this means - just think of it as another step in the pipeline.\n\nRemember the number of processors you found in step 3? Now's the time to use it. Run the following, where `<NUMBER OF PROCESSORS>` is your answer from Step 3:\n```bash\nmake bzImage -j< NUMBER OF PROCESSORS >\n```\n\nFor example, if your computer has 4 processors, you would use:\n```bash\nmake bzImage -j4\n```\n\nThis `-j` option specifies the **number of jobs** to use when running the `make` command. By using (at least) one job for each processor, you will take better advantage of your CPU's resources and speed up the build process significantly.\n\nWhile there is some debate over the exact jobs-to-processors ratio that provides the optimal performance, using a 1:1 ratio as a rule of thumb should work well enough getting started. Since the effectiveness of this may vary depending on what the job is, feel free to mess around with other numbers, benchmark results, and find what works best.\n\nFor the remainder of the article, we will assume 4 CPUs, hence `-j4`. Remember to change this if your system is different.\n\n## 6. Link Modules\n\nFor the next step, run the following command:\n\n```bash\nmake modules -j4\n```\n\nThis will link any modules marked as 'M' in `make menuconfig` to the kernel image created in the last step. Anything marked as 'Y' will already be included in that image.\n\n## 7. Install Modules\n\nNow we will install kernel modules in `/lib/modules`. This can be accomplished with the following:\n\n```bash\nsudo make modules_install -j4\n```\nNote that we had to prefix the command with `sudo`. We need to perform this step as a superuser because it involves copying files to sensitive system locations that are often locked down.\n\n## 8. Install the kernel\n\nFinally, we will install our kernel to `/boot`. Use:\n\n```bash\nsudo make install -j4\n```\n\nCongratulations, our kernel is built and present in `/boot`! The next step is to figure out how to boot into our kernel and see it in action.\n\nBefore we do anything, let's confirm which kernel we are using. In your home area, use the following to show the current kernel in use:\n\n```bash\nuname -r\n```\n\nYou may want to write this down or redirect to a file for later comparison, but if you can remember it, more power to you!\n\nThe kernel must now be configured in the system bootloader so that it will be used on the next restart. If you're using the ever-popular `grub`, you can use:\n\n```bash\nsudo update-grub\n```\n\nIf all is well, a reboot should use the new kernel. Try it now, and confirm the new kernel is in use with `uname -r`.\n\nThanks for reading through - I hope you learned something! If you're hungry for more, read the [next article][part2], in which we will make some simple modifications to kernel source code.\n\nIn an even [later article][part3], we'll be creating a basic kernel module.\n\n## Sources\n\n* [https://wiki.centos.org/HowTos/I_need_the_Kernel_Source](https://wiki.centos.org/HowTos/I_need_the_Kernel_Source)\n* [ftp://ftp.wayne.edu/ldp/en/Kernel-HOWTO/ar01s10.html](ftp://ftp.wayne.edu/ldp/en/Kernel-HOWTO/ar01s10.html)\n* [https://unix.stackexchange.com/questions/20864/what-happens-in-each-step-of-the-linux-kernel-building-process?newreg=4067157d2de24c1c99b0ab222a59366f](https://unix.stackexchange.com/questions/20864/what-happens-in-each-step-of-the-linux-kernel-building-process?newreg=4067157d2de24c1c99b0ab222a59366f)\n\n**This post is Part 1 of a series on the Linux kernel.**\n\n**Part 1 - [Part 2][part2] - [Part 3][part3]**\n\n[part1]: ./linux-kernel-1/\n[part2]: ./linux-kernel-2/\n[part3]: ./linux-kernel-3/\n";
						const data = {publishDate:new Date(1520035200000),title:"How to Compile the Linux Kernel from Source",image:"/blog/2018/linux-kernel-1.jpg",category:"Linux Kernel Series",tags:["linux","tutorial"],author:"Steve Grice"};
						const _internal = {
							type: 'content',
							filePath: "/home/runner/work/website/website/astrowind/src/content/post/blog/2018/linux-kernel-1/index.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
